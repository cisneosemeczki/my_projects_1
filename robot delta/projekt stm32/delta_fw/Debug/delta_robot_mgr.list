
delta_robot_mgr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dec4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  0800e068  0800e068  0001e068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eabc  0800eabc  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  0800eabc  0800eabc  0001eabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eac4  0800eac4  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eac4  0800eac4  0001eac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eac8  0800eac8  0001eac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800eacc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001538  2000029c  0800ed68  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017d4  0800ed68  000217d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140c8  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d7  00000000  00000000  00034394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00037470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019241  00000000  00000000  00038f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b80  00000000  00000000  000521c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f881  00000000  00000000  00063d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f35ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005608  00000000  00000000  000f3620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000029c 	.word	0x2000029c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e04c 	.word	0x0800e04c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002a0 	.word	0x200002a0
 80001dc:	0800e04c 	.word	0x0800e04c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_DMA_Init+0x3c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <MX_DMA_Init+0x3c>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_DMA_Init+0x3c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 2, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	2011      	movs	r0, #17
 8001044:	f001 fb7d 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001048:	2011      	movs	r0, #17
 800104a:	f001 fb96 	bl	800277a <HAL_NVIC_EnableIRQ>

}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <MX_GPIO_Init+0x16c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a53      	ldr	r2, [pc, #332]	; (80011c8 <MX_GPIO_Init+0x16c>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <MX_GPIO_Init+0x16c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <MX_GPIO_Init+0x16c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <MX_GPIO_Init+0x16c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <MX_GPIO_Init+0x16c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <MX_GPIO_Init+0x16c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x16c>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <MX_GPIO_Init+0x16c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_DIR_Pin|LD2_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80010cc:	483f      	ldr	r0, [pc, #252]	; (80011cc <MX_GPIO_Init+0x170>)
 80010ce:	f001 ffff 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_DIR_Pin|Z_EN_Pin|X_EN_Pin|Y_EN_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 80010d8:	483d      	ldr	r0, [pc, #244]	; (80011d0 <MX_GPIO_Init+0x174>)
 80010da:	f001 fff9 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <MX_GPIO_Init+0x178>)
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4839      	ldr	r0, [pc, #228]	; (80011d8 <MX_GPIO_Init+0x17c>)
 80010f4:	f001 fe68 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Z_MIN_Pin|Z_MAX_Pin|X_MIN_Pin|X_MAX_Pin;
 80010f8:	f241 430c 	movw	r3, #5132	; 0x140c
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <MX_GPIO_Init+0x178>)
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4619      	mov	r1, r3
 800110c:	4832      	ldr	r0, [pc, #200]	; (80011d8 <MX_GPIO_Init+0x17c>)
 800110e:	f001 fe5b 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|LD2_Pin|Z_DIR_Pin;
 8001112:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4828      	ldr	r0, [pc, #160]	; (80011cc <MX_GPIO_Init+0x170>)
 800112c:	f001 fe4c 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = X_DIR_Pin|Z_EN_Pin|X_EN_Pin|Y_EN_Pin;
 8001130:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <MX_GPIO_Init+0x174>)
 800114a:	f001 fe3d 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Y_MIN_Pin;
 800114e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_GPIO_Init+0x178>)
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Y_MIN_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	481a      	ldr	r0, [pc, #104]	; (80011cc <MX_GPIO_Init+0x170>)
 8001164:	f001 fe30 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Y_MAX_Pin;
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_GPIO_Init+0x178>)
 800116e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001170:	2302      	movs	r3, #2
 8001172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Y_MAX_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4815      	ldr	r0, [pc, #84]	; (80011d0 <MX_GPIO_Init+0x174>)
 800117c:	f001 fe24 	bl	8002dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	2008      	movs	r0, #8
 8001186:	f001 fadc 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800118a:	2008      	movs	r0, #8
 800118c:	f001 faf5 	bl	800277a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2101      	movs	r1, #1
 8001194:	2009      	movs	r0, #9
 8001196:	f001 fad4 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800119a:	2009      	movs	r0, #9
 800119c:	f001 faed 	bl	800277a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	2017      	movs	r0, #23
 80011a6:	f001 facc 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011aa:	2017      	movs	r0, #23
 80011ac:	f001 fae5 	bl	800277a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	2028      	movs	r0, #40	; 0x28
 80011b6:	f001 fac4 	bl	8002742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f001 fadd 	bl	800277a <HAL_NVIC_EnableIRQ>

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	10110000 	.word	0x10110000
 80011d8:	40020800 	.word	0x40020800

080011dc <skalowanie>:
*/

void skalowanie(punkt_kartezjanski *wyskalowany,
				punkt_kartezjanski *pt_str,
				punkt_kartezjanski *pt_kon)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	float droga_do_przebycia_x = (pt_kon->x - pt_str->x) * 0.326797F * 1.063830F;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800129c <skalowanie+0xc0>
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80012a0 <skalowanie+0xc4>
 8001204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001208:	edc7 7a07 	vstr	s15, [r7, #28]
	float droga_do_przebycia_y = (pt_kon->y - pt_str->y) * 0.543478F * 1.204819F;  //1.155942F
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	edd3 7a01 	vldr	s15, [r3, #4]
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80012a4 <skalowanie+0xc8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012a8 <skalowanie+0xcc>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a06 	vstr	s15, [r7, #24]
	float droga_do_przebycia_z = (pt_kon->z - pt_str->z) * 1.250000F * 1.086957F;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	ed93 7a02 	vldr	s14, [r3, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	edd3 7a02 	vldr	s15, [r3, #8]
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012ac <skalowanie+0xd0>
 800124c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001250:	edc7 7a05 	vstr	s15, [r7, #20]

	wyskalowany->x = pt_str->x + droga_do_przebycia_x;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	ed93 7a00 	vldr	s14, [r3]
 800125a:	edd7 7a07 	vldr	s15, [r7, #28]
 800125e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	edc3 7a00 	vstr	s15, [r3]
	wyskalowany->y = pt_str->y + droga_do_przebycia_y;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	ed93 7a01 	vldr	s14, [r3, #4]
 800126e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	edc3 7a01 	vstr	s15, [r3, #4]
	wyskalowany->z = pt_str->z + droga_do_przebycia_z;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001282:	edd7 7a05 	vldr	s15, [r7, #20]
 8001286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	edc3 7a02 	vstr	s15, [r3, #8]

	//printf("wyskalowany: X: %.3f   Y: %.3f   Z: %.3f\n", wyskalowany->x, wyskalowany->y, wyskalowany->z);
}
 8001290:	bf00      	nop
 8001292:	3724      	adds	r7, #36	; 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	3ea751f0 	.word	0x3ea751f0
 80012a0:	3f882b95 	.word	0x3f882b95
 80012a4:	3f0b2160 	.word	0x3f0b2160
 80012a8:	3f9a3782 	.word	0x3f9a3782
 80012ac:	3f8b2168 	.word	0x3f8b2168

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09e      	sub	sp, #120	; 0x78
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f001 f8f7 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 fb59 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f7ff fecd 	bl	800105c <MX_GPIO_Init>
  MX_DMA_Init();
 80012c2:	f7ff feab 	bl	800101c <MX_DMA_Init>
  MX_TIM2_Init();
 80012c6:	f000 fd47 	bl	8001d58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012ca:	f000 fdb9 	bl	8001e40 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012ce:	f000 fe2d 	bl	8001f2c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80012d2:	f001 f813 	bl	80022fc <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80012d6:	f000 fe9f 	bl	8002018 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  Stepper_Disable(&lista_silnikow[0]);
 80012da:	48b5      	ldr	r0, [pc, #724]	; (80015b0 <main+0x300>)
 80012dc:	f005 ff3e 	bl	800715c <Stepper_Disable>
  Stepper_Disable(&lista_silnikow[1]);
 80012e0:	48b4      	ldr	r0, [pc, #720]	; (80015b4 <main+0x304>)
 80012e2:	f005 ff3b 	bl	800715c <Stepper_Disable>
  Stepper_Disable(&lista_silnikow[2]);
 80012e6:	48b4      	ldr	r0, [pc, #720]	; (80015b8 <main+0x308>)
 80012e8:	f005 ff38 	bl	800715c <Stepper_Disable>

  robot_w_trakcie_ruchu = 0;
 80012ec:	4bb3      	ldr	r3, [pc, #716]	; (80015bc <main+0x30c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
  kalibracja_wykonana = 0;
 80012f2:	4bb3      	ldr	r3, [pc, #716]	; (80015c0 <main+0x310>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

  punkt_kartezjanski punkt_startowy = {};
 80012f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
  punkt_kartezjanski punkt_koncowy = {};
 8001306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  punkt_startowy.x = 0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	643b      	str	r3, [r7, #64]	; 0x40
  punkt_startowy.y = 0;
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  punkt_startowy.z = 0;
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	64bb      	str	r3, [r7, #72]	; 0x48

  Stepper_Init();
 8001326:	f005 fe19 	bl	8006f5c <Stepper_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 800132a:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800132e:	2300      	movs	r3, #0
 8001330:	2201      	movs	r2, #1
 8001332:	48a4      	ldr	r0, [pc, #656]	; (80015c4 <main+0x314>)
 8001334:	f003 fb92 	bl	8004a5c <HAL_UART_Receive>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d104      	bne.n	8001348 <main+0x98>
		  odbior_danych_z_aplikacji(value);
 800133e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001342:	4618      	mov	r0, r3
 8001344:	f006 f86a 	bl	800741c <odbior_danych_z_aplikacji>
	  	  }
*/


	  //glowny program
	  if (stan1 == 1)
 8001348:	4b9f      	ldr	r3, [pc, #636]	; (80015c8 <main+0x318>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10f      	bne.n	8001370 <main+0xc0>
		  //punkt_startowy.y = 0;
		  //punkt_startowy.z = 0;

		  //while(kalibracja_wykonana != 1) {}

		  lista_silnikow[0].absPos = -361.263702;
 8001350:	4b97      	ldr	r3, [pc, #604]	; (80015b0 <main+0x300>)
 8001352:	4a9e      	ldr	r2, [pc, #632]	; (80015cc <main+0x31c>)
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
		  lista_silnikow[1].absPos = -415.196625;
 8001356:	4b96      	ldr	r3, [pc, #600]	; (80015b0 <main+0x300>)
 8001358:	4a9d      	ldr	r2, [pc, #628]	; (80015d0 <main+0x320>)
 800135a:	671a      	str	r2, [r3, #112]	; 0x70
		  lista_silnikow[2].absPos = -415.196625;
 800135c:	4b94      	ldr	r3, [pc, #592]	; (80015b0 <main+0x300>)
 800135e:	4a9c      	ldr	r2, [pc, #624]	; (80015d0 <main+0x320>)
 8001360:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		  kalibracja_wykonana = 1;
 8001364:	4b96      	ldr	r3, [pc, #600]	; (80015c0 <main+0x310>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

		  stan1 = 0;
 800136a:	4b97      	ldr	r3, [pc, #604]	; (80015c8 <main+0x318>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
	  }

	  if (ruch_robotem == 1 && podczas_kalibracji == 0 && kalibracja_wykonana == 1 && robot_w_trakcie_ruchu == 0)
 8001370:	4b98      	ldr	r3, [pc, #608]	; (80015d4 <main+0x324>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	f040 82d4 	bne.w	8001922 <main+0x672>
 800137a:	4b97      	ldr	r3, [pc, #604]	; (80015d8 <main+0x328>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 82cf 	bne.w	8001922 <main+0x672>
 8001384:	4b8e      	ldr	r3, [pc, #568]	; (80015c0 <main+0x310>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 82ca 	bne.w	8001922 <main+0x672>
 800138e:	4b8b      	ldr	r3, [pc, #556]	; (80015bc <main+0x30c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 82c5 	bne.w	8001922 <main+0x672>
	  {
		  robot_w_trakcie_ruchu = 1;
 8001398:	4b88      	ldr	r3, [pc, #544]	; (80015bc <main+0x30c>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

		  float lengths_przeskalowane[3] = { 0 };
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
		  float lengths[3] = { 0 };
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]

		  punkt_koncowy.x = wspolrzedna_X;
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <main+0x32c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
		  punkt_koncowy.y = wspolrzedna_Y;
 80013bc:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <main+0x330>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
		  punkt_koncowy.z = wspolrzedna_Z;
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <main+0x334>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38

		  int rozdzielczosc = rozdzielczosc_interpolacji;
 80013c8:	4b87      	ldr	r3, [pc, #540]	; (80015e8 <main+0x338>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	66bb      	str	r3, [r7, #104]	; 0x68

		  if (punkt_startowy.x == punkt_koncowy.x && punkt_startowy.y == punkt_koncowy.y && punkt_startowy.z == punkt_koncowy.z)
 80013ce:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80013d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d11b      	bne.n	8001418 <main+0x168>
 80013e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80013e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	d112      	bne.n	8001418 <main+0x168>
 80013f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80013f6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80013fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d109      	bne.n	8001418 <main+0x168>
		  {
			  printf("Efektor sie nie przemiesci bo podano punkt, w ktorym sie znajduje teraz!\n");
 8001404:	4879      	ldr	r0, [pc, #484]	; (80015ec <main+0x33c>)
 8001406:	f006 ffdd 	bl	80083c4 <puts>
			  robot_w_trakcie_ruchu = 0;
 800140a:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <main+0x30c>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
			  ruch_robotem = 0;
 8001410:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <main+0x324>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e788      	b.n	800132a <main+0x7a>
			  continue;
		  }


		  punkt_kartezjanski wyskalowany_punkt_koncowy = {};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
		  skalowanie(&wyskalowany_punkt_koncowy, &punkt_startowy, &punkt_koncowy);
 8001424:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001428:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fed4 	bl	80011dc <skalowanie>


		  if (rodzaj_interpolacji == 1)
 8001434:	4b6e      	ldr	r3, [pc, #440]	; (80015f0 <main+0x340>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800143e:	eef4 7a47 	vcmp.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	f040 80db 	bne.w	8001600 <main+0x350>
		  {

			  liniowa_interpolacja(punkt_startowy, wyskalowany_punkt_koncowy, rozdzielczosc, 50, 100);
 800144a:	ed97 3a01 	vldr	s6, [r7, #4]
 800144e:	edd7 3a02 	vldr	s7, [r7, #8]
 8001452:	ed97 5a03 	vldr	s10, [r7, #12]
 8001456:	edd7 5a04 	vldr	s11, [r7, #16]
 800145a:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800145e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001462:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001466:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800146a:	eddf 4a62 	vldr	s9, [pc, #392]	; 80015f4 <main+0x344>
 800146e:	ed9f 4a62 	vldr	s8, [pc, #392]	; 80015f8 <main+0x348>
 8001472:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001474:	eeb0 2a43 	vmov.f32	s4, s6
 8001478:	eef0 2a63 	vmov.f32	s5, s7
 800147c:	eeb0 3a45 	vmov.f32	s6, s10
 8001480:	eef0 3a65 	vmov.f32	s7, s11
 8001484:	eeb0 0a46 	vmov.f32	s0, s12
 8001488:	eef0 0a66 	vmov.f32	s1, s13
 800148c:	eeb0 1a47 	vmov.f32	s2, s14
 8001490:	eef0 1a67 	vmov.f32	s3, s15
 8001494:	f004 fb78 	bl	8005b88 <liniowa_interpolacja>

			  for (int i = 1; i <= rozdzielczosc; i++)
 8001498:	2301      	movs	r3, #1
 800149a:	677b      	str	r3, [r7, #116]	; 0x74
 800149c:	e07b      	b.n	8001596 <main+0x2e6>
			  {
				  odwrotna_kinematyka(lengths_przeskalowane, trajektoria_liniowa[i].wektor);
 800149e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4a56      	ldr	r2, [pc, #344]	; (80015fc <main+0x34c>)
 80014a4:	441a      	add	r2, r3
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 f9a3 	bl	80057f8 <odwrotna_kinematyka>

				  float diff_lengths1 = (lengths_przeskalowane[1] - lista_silnikow[1].absPos) * 0.893;
 80014b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <main+0x300>)
 80014b8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80014bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c0:	ee17 0a90 	vmov	r0, s15
 80014c4:	f7ff f858 	bl	8000578 <__aeabi_f2d>
 80014c8:	a337      	add	r3, pc, #220	; (adr r3, 80015a8 <main+0x2f8>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f8ab 	bl	8000628 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb9d 	bl	8000c18 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	657b      	str	r3, [r7, #84]	; 0x54
				  float diff_lengths2 = (lengths_przeskalowane[2] - lista_silnikow[2].absPos) * 0.893;
 80014e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <main+0x300>)
 80014e8:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	ee17 0a90 	vmov	r0, s15
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	a32b      	add	r3, pc, #172	; (adr r3, 80015a8 <main+0x2f8>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f893 	bl	8000628 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	653b      	str	r3, [r7, #80]	; 0x50
				  lengths_przeskalowane[1] = lista_silnikow[1].absPos + diff_lengths1;
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <main+0x300>)
 8001514:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001518:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				  lengths_przeskalowane[2] = lista_silnikow[2].absPos + diff_lengths2;
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <main+0x300>)
 8001526:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800152a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

				  Stepper_EnableAll();										//(sList[0].absPos - lengths[0]) / traj_lin[i].t)
 8001536:	f005 fe27 	bl	8007188 <Stepper_EnableAll>

			  	  Stepper_moveAbsPos(&lista_silnikow[0], lengths_przeskalowane[0], 13);
 800153a:	edd7 7a08 	vldr	s15, [r7, #32]
 800153e:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	481a      	ldr	r0, [pc, #104]	; (80015b0 <main+0x300>)
 8001548:	f005 fe52 	bl	80071f0 <Stepper_moveAbsPos>
			  	  Stepper_moveAbsPos(&lista_silnikow[1], lengths_przeskalowane[1], 13);
 800154c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001550:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	4816      	ldr	r0, [pc, #88]	; (80015b4 <main+0x304>)
 800155a:	f005 fe49 	bl	80071f0 <Stepper_moveAbsPos>
			  	  Stepper_moveAbsPos(&lista_silnikow[2], lengths_przeskalowane[2], 13);
 800155e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001562:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <main+0x308>)
 800156c:	f005 fe40 	bl	80071f0 <Stepper_moveAbsPos>

			  	  while(lista_silnikow[0].moving_f == 1 || lista_silnikow[1].moving_f == 1 || lista_silnikow[2].moving_f == 1) {}
 8001570:	bf00      	nop
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <main+0x300>)
 8001574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001578:	2b01      	cmp	r3, #1
 800157a:	d0fa      	beq.n	8001572 <main+0x2c2>
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <main+0x300>)
 800157e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001582:	2b01      	cmp	r3, #1
 8001584:	d0f5      	beq.n	8001572 <main+0x2c2>
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <main+0x300>)
 8001588:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d0f0      	beq.n	8001572 <main+0x2c2>
			  for (int i = 1; i <= rozdzielczosc; i++)
 8001590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001592:	3301      	adds	r3, #1
 8001594:	677b      	str	r3, [r7, #116]	; 0x74
 8001596:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800159a:	429a      	cmp	r2, r3
 800159c:	f77f af7f 	ble.w	800149e <main+0x1ee>
 80015a0:	e19d      	b.n	80018de <main+0x62e>
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	bc6a7efa 	.word	0xbc6a7efa
 80015ac:	3fec9374 	.word	0x3fec9374
 80015b0:	20000010 	.word	0x20000010
 80015b4:	2000004c 	.word	0x2000004c
 80015b8:	20000088 	.word	0x20000088
 80015bc:	2000161c 	.word	0x2000161c
 80015c0:	20001584 	.word	0x20001584
 80015c4:	20001780 	.word	0x20001780
 80015c8:	2000157c 	.word	0x2000157c
 80015cc:	c3b4a1c1 	.word	0xc3b4a1c1
 80015d0:	c3cf992b 	.word	0xc3cf992b
 80015d4:	20001610 	.word	0x20001610
 80015d8:	20001580 	.word	0x20001580
 80015dc:	20001604 	.word	0x20001604
 80015e0:	20001608 	.word	0x20001608
 80015e4:	2000160c 	.word	0x2000160c
 80015e8:	20001600 	.word	0x20001600
 80015ec:	0800e068 	.word	0x0800e068
 80015f0:	200015fc 	.word	0x200015fc
 80015f4:	42c80000 	.word	0x42c80000
 80015f8:	42480000 	.word	0x42480000
 80015fc:	200002bc 	.word	0x200002bc

			  }
		  }
		  else if (rodzaj_interpolacji == 2)
 8001600:	4bcd      	ldr	r3, [pc, #820]	; (8001938 <main+0x688>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800160a:	eef4 7a47 	vcmp.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	f040 80ac 	bne.w	800176e <main+0x4be>
		  {
			  przegubowa_interpolacja(punkt_startowy, wyskalowany_punkt_koncowy, rozdzielczosc, 50, 100);
 8001616:	ed97 3a01 	vldr	s6, [r7, #4]
 800161a:	edd7 3a02 	vldr	s7, [r7, #8]
 800161e:	ed97 5a03 	vldr	s10, [r7, #12]
 8001622:	edd7 5a04 	vldr	s11, [r7, #16]
 8001626:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800162a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800162e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001632:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001636:	eddf 4ac1 	vldr	s9, [pc, #772]	; 800193c <main+0x68c>
 800163a:	ed9f 4ac1 	vldr	s8, [pc, #772]	; 8001940 <main+0x690>
 800163e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001640:	eeb0 2a43 	vmov.f32	s4, s6
 8001644:	eef0 2a63 	vmov.f32	s5, s7
 8001648:	eeb0 3a45 	vmov.f32	s6, s10
 800164c:	eef0 3a65 	vmov.f32	s7, s11
 8001650:	eeb0 0a46 	vmov.f32	s0, s12
 8001654:	eef0 0a66 	vmov.f32	s1, s13
 8001658:	eeb0 1a47 	vmov.f32	s2, s14
 800165c:	eef0 1a67 	vmov.f32	s3, s15
 8001660:	f004 fbb0 	bl	8005dc4 <przegubowa_interpolacja>

			  for (int i = 1; i <= rozdzielczosc; i++)
 8001664:	2301      	movs	r3, #1
 8001666:	673b      	str	r3, [r7, #112]	; 0x70
 8001668:	e07b      	b.n	8001762 <main+0x4b2>
			  {
				  odwrotna_kinematyka(lengths_przeskalowane, droga_przegubowa[i].wektor);
 800166a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4ab5      	ldr	r2, [pc, #724]	; (8001944 <main+0x694>)
 8001670:	441a      	add	r2, r3
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f004 f8bd 	bl	80057f8 <odwrotna_kinematyka>

				  float diff_lengths1 = (lengths_przeskalowane[1] - lista_silnikow[1].absPos) * 0.893;
 800167e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001682:	4bb1      	ldr	r3, [pc, #708]	; (8001948 <main+0x698>)
 8001684:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff72 	bl	8000578 <__aeabi_f2d>
 8001694:	a3a6      	add	r3, pc, #664	; (adr r3, 8001930 <main+0x680>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffc5 	bl	8000628 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fab7 	bl	8000c18 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	65fb      	str	r3, [r7, #92]	; 0x5c
				  float diff_lengths2 = (lengths_przeskalowane[2] - lista_silnikow[2].absPos) * 0.893;
 80016ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016b2:	4ba5      	ldr	r3, [pc, #660]	; (8001948 <main+0x698>)
 80016b4:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	ee17 0a90 	vmov	r0, s15
 80016c0:	f7fe ff5a 	bl	8000578 <__aeabi_f2d>
 80016c4:	a39a      	add	r3, pc, #616	; (adr r3, 8001930 <main+0x680>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ffad 	bl	8000628 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa9f 	bl	8000c18 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	65bb      	str	r3, [r7, #88]	; 0x58
				  lengths_przeskalowane[1] = lista_silnikow[1].absPos + diff_lengths1;
 80016de:	4b9a      	ldr	r3, [pc, #616]	; (8001948 <main+0x698>)
 80016e0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80016e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				  lengths_przeskalowane[2] = lista_silnikow[2].absPos + diff_lengths2;
 80016f0:	4b95      	ldr	r3, [pc, #596]	; (8001948 <main+0x698>)
 80016f2:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 80016f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

				  Stepper_EnableAll();
 8001702:	f005 fd41 	bl	8007188 <Stepper_EnableAll>

			  	  Stepper_moveAbsPos(&lista_silnikow[0], lengths_przeskalowane[0], 13);
 8001706:	edd7 7a08 	vldr	s15, [r7, #32]
 800170a:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	488d      	ldr	r0, [pc, #564]	; (8001948 <main+0x698>)
 8001714:	f005 fd6c 	bl	80071f0 <Stepper_moveAbsPos>
			  	  Stepper_moveAbsPos(&lista_silnikow[1], lengths_przeskalowane[1], 13);
 8001718:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800171c:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 8001720:	eeb0 0a67 	vmov.f32	s0, s15
 8001724:	4889      	ldr	r0, [pc, #548]	; (800194c <main+0x69c>)
 8001726:	f005 fd63 	bl	80071f0 <Stepper_moveAbsPos>
			  	  Stepper_moveAbsPos(&lista_silnikow[2], lengths_przeskalowane[2], 13);
 800172a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800172e:	eef2 0a0a 	vmov.f32	s1, #42	; 0x41500000  13.0
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	4886      	ldr	r0, [pc, #536]	; (8001950 <main+0x6a0>)
 8001738:	f005 fd5a 	bl	80071f0 <Stepper_moveAbsPos>

			  	  while(lista_silnikow[0].moving_f == 1 || lista_silnikow[1].moving_f == 1 || lista_silnikow[2].moving_f == 1) {}
 800173c:	bf00      	nop
 800173e:	4b82      	ldr	r3, [pc, #520]	; (8001948 <main+0x698>)
 8001740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001744:	2b01      	cmp	r3, #1
 8001746:	d0fa      	beq.n	800173e <main+0x48e>
 8001748:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <main+0x698>)
 800174a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800174e:	2b01      	cmp	r3, #1
 8001750:	d0f5      	beq.n	800173e <main+0x48e>
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <main+0x698>)
 8001754:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001758:	2b01      	cmp	r3, #1
 800175a:	d0f0      	beq.n	800173e <main+0x48e>
			  for (int i = 1; i <= rozdzielczosc; i++)
 800175c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800175e:	3301      	adds	r3, #1
 8001760:	673b      	str	r3, [r7, #112]	; 0x70
 8001762:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001766:	429a      	cmp	r2, r3
 8001768:	f77f af7f 	ble.w	800166a <main+0x3ba>
 800176c:	e0b7      	b.n	80018de <main+0x62e>
			  }
		  }
		  else if (rodzaj_interpolacji == 3)
 800176e:	4b72      	ldr	r3, [pc, #456]	; (8001938 <main+0x688>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001778:	eef4 7a47 	vcmp.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	f040 80ad 	bne.w	80018de <main+0x62e>
		  {
			  kolowa_interpolacja(punkt_startowy, wyskalowany_punkt_koncowy, 40, rozdzielczosc, 50, 100);
 8001784:	edd7 2a01 	vldr	s5, [r7, #4]
 8001788:	ed97 3a02 	vldr	s6, [r7, #8]
 800178c:	edd7 3a03 	vldr	s7, [r7, #12]
 8001790:	edd7 5a04 	vldr	s11, [r7, #16]
 8001794:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8001798:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800179c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80017a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017a4:	ed9f 5a65 	vldr	s10, [pc, #404]	; 800193c <main+0x68c>
 80017a8:	eddf 4a65 	vldr	s9, [pc, #404]	; 8001940 <main+0x690>
 80017ac:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80017ae:	ed9f 4a69 	vldr	s8, [pc, #420]	; 8001954 <main+0x6a4>
 80017b2:	eeb0 2a62 	vmov.f32	s4, s5
 80017b6:	eef0 2a43 	vmov.f32	s5, s6
 80017ba:	eeb0 3a63 	vmov.f32	s6, s7
 80017be:	eef0 3a65 	vmov.f32	s7, s11
 80017c2:	eeb0 0a46 	vmov.f32	s0, s12
 80017c6:	eef0 0a66 	vmov.f32	s1, s13
 80017ca:	eeb0 1a47 	vmov.f32	s2, s14
 80017ce:	eef0 1a67 	vmov.f32	s3, s15
 80017d2:	f004 fc09 	bl	8005fe8 <kolowa_interpolacja>
			  for (int i = 1; i <= rozdzielczosc; i++)
 80017d6:	2301      	movs	r3, #1
 80017d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017da:	e07b      	b.n	80018d4 <main+0x624>
			  {
				  odwrotna_kinematyka(lengths_przeskalowane, trajektoria_kolowa[i].wektor);
 80017dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <main+0x6a8>)
 80017e2:	441a      	add	r2, r3
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 f804 	bl	80057f8 <odwrotna_kinematyka>

				  float diff_lengths1 = (lengths_przeskalowane[1] - lista_silnikow[1].absPos) * 0.893;
 80017f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017f4:	4b54      	ldr	r3, [pc, #336]	; (8001948 <main+0x698>)
 80017f6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	ee17 0a90 	vmov	r0, s15
 8001802:	f7fe feb9 	bl	8000578 <__aeabi_f2d>
 8001806:	a34a      	add	r3, pc, #296	; (adr r3, 8001930 <main+0x680>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff0c 	bl	8000628 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9fe 	bl	8000c18 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	667b      	str	r3, [r7, #100]	; 0x64
				  float diff_lengths2 = (lengths_przeskalowane[2] - lista_silnikow[2].absPos) * 0.893;
 8001820:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <main+0x698>)
 8001826:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fea1 	bl	8000578 <__aeabi_f2d>
 8001836:	a33e      	add	r3, pc, #248	; (adr r3, 8001930 <main+0x680>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fef4 	bl	8000628 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9e6 	bl	8000c18 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	663b      	str	r3, [r7, #96]	; 0x60
				  lengths_przeskalowane[1] = lista_silnikow[1].absPos + diff_lengths1;
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <main+0x698>)
 8001852:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001856:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				  lengths_przeskalowane[2] = lista_silnikow[2].absPos + diff_lengths2;
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <main+0x698>)
 8001864:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8001868:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

				  Stepper_EnableAll();
 8001874:	f005 fc88 	bl	8007188 <Stepper_EnableAll>

				  Stepper_moveAbsPos(&lista_silnikow[0], lengths_przeskalowane[0], 7);
 8001878:	edd7 7a08 	vldr	s15, [r7, #32]
 800187c:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	4830      	ldr	r0, [pc, #192]	; (8001948 <main+0x698>)
 8001886:	f005 fcb3 	bl	80071f0 <Stepper_moveAbsPos>
				  Stepper_moveAbsPos(&lista_silnikow[1], lengths_przeskalowane[1], 7);
 800188a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800188e:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	482d      	ldr	r0, [pc, #180]	; (800194c <main+0x69c>)
 8001898:	f005 fcaa 	bl	80071f0 <Stepper_moveAbsPos>
				  Stepper_moveAbsPos(&lista_silnikow[2], lengths_przeskalowane[2], 7);
 800189c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018a0:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	4829      	ldr	r0, [pc, #164]	; (8001950 <main+0x6a0>)
 80018aa:	f005 fca1 	bl	80071f0 <Stepper_moveAbsPos>

				  while(lista_silnikow[0].moving_f == 1 || lista_silnikow[1].moving_f == 1 || lista_silnikow[2].moving_f == 1) {}
 80018ae:	bf00      	nop
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <main+0x698>)
 80018b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d0fa      	beq.n	80018b0 <main+0x600>
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <main+0x698>)
 80018bc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d0f5      	beq.n	80018b0 <main+0x600>
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <main+0x698>)
 80018c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d0f0      	beq.n	80018b0 <main+0x600>
			  for (int i = 1; i <= rozdzielczosc; i++)
 80018ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d0:	3301      	adds	r3, #1
 80018d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d8:	429a      	cmp	r2, r3
 80018da:	f77f af7f 	ble.w	80017dc <main+0x52c>
			  }
		  }
		  odwrotna_kinematyka(lengths, punkt_koncowy.wektor);
 80018de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 ff85 	bl	80057f8 <odwrotna_kinematyka>
		  lista_silnikow[0].absPos = lengths[0];
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <main+0x698>)
 80018f2:	6353      	str	r3, [r2, #52]	; 0x34
		  lista_silnikow[1].absPos = lengths[1];
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <main+0x698>)
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
		  lista_silnikow[2].absPos = lengths[2];
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4a12      	ldr	r2, [pc, #72]	; (8001948 <main+0x698>)
 80018fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

		  punkt_startowy.x = wspolrzedna_X;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <main+0x6ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
		  punkt_startowy.y = wspolrzedna_Y;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <main+0x6b0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
		  punkt_startowy.z = wspolrzedna_Z;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <main+0x6b4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48

		  robot_w_trakcie_ruchu = 0;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <main+0x6b8>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
		  ruch_robotem = 0;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <main+0x6bc>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
	  {
 8001920:	e002      	b.n	8001928 <main+0x678>
	  }
	  else
	  {
		  ruch_robotem = 0;
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <main+0x6bc>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
  {
 8001928:	e4ff      	b.n	800132a <main+0x7a>
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	bc6a7efa 	.word	0xbc6a7efa
 8001934:	3fec9374 	.word	0x3fec9374
 8001938:	200015fc 	.word	0x200015fc
 800193c:	42c80000 	.word	0x42c80000
 8001940:	42480000 	.word	0x42480000
 8001944:	20000f3c 	.word	0x20000f3c
 8001948:	20000010 	.word	0x20000010
 800194c:	2000004c 	.word	0x2000004c
 8001950:	20000088 	.word	0x20000088
 8001954:	42200000 	.word	0x42200000
 8001958:	200008fc 	.word	0x200008fc
 800195c:	20001604 	.word	0x20001604
 8001960:	20001608 	.word	0x20001608
 8001964:	2000160c 	.word	0x2000160c
 8001968:	2000161c 	.word	0x2000161c
 800196c:	20001610 	.word	0x20001610

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b094      	sub	sp, #80	; 0x50
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	2230      	movs	r2, #48	; 0x30
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fe18 	bl	80075b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <SystemClock_Config+0xc8>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <SystemClock_Config+0xc8>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <SystemClock_Config+0xc8>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <SystemClock_Config+0xcc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <SystemClock_Config+0xcc>)
 80019ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <SystemClock_Config+0xcc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019cc:	2302      	movs	r3, #2
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d4:	2310      	movs	r3, #16
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d8:	2302      	movs	r3, #2
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 fb9d 	bl	8003134 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a00:	f000 f81e 	bl	8001a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2103      	movs	r1, #3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fdf7 	bl	8003614 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a2c:	f000 f808 	bl	8001a40 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3750      	adds	r7, #80	; 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 fd2a 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b00:	2004      	movs	r0, #4
 8001b02:	f001 faff 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b0e:	2008      	movs	r0, #8
 8001b10:	f001 faf8 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA1_Stream6_IRQHandler+0x10>)
 8001b1e:	f000 ff17 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20001720 	.word	0x20001720

08001b2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b30:	2080      	movs	r0, #128	; 0x80
 8001b32:	f001 fae7 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f002 f89d 	bl	8003c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200016e0 	.word	0x200016e0

08001b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM3_IRQHandler+0x10>)
 8001b56:	f002 f893 	bl	8003c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200016a0 	.word	0x200016a0

08001b64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM4_IRQHandler+0x10>)
 8001b6a:	f002 f889 	bl	8003c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20001620 	.word	0x20001620

08001b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <USART2_IRQHandler+0x10>)
 8001b7e:	f003 f813 	bl	8004ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20001780 	.word	0x20001780

08001b8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b94:	f001 fab6 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b9c:	f001 fab2 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ba0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba4:	f001 faae 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ba8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bac:	f001 faaa 	bl	8003104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
	return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bce:	f005 fcc7 	bl	8007560 <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_exit>:

void _exit (int status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bf6:	e7fe      	b.n	8001bf6 <_exit+0x12>

08001bf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e00a      	b.n	8001c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c0a:	f3af 8000 	nop.w
 8001c0e:	4601      	mov	r1, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbf0      	blt.n	8001c0a <_read+0x12>
	}

return len;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e009      	b.n	8001c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fbc5 	bl	80073dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf1      	blt.n	8001c44 <_write+0x12>
	}
	return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	605a      	str	r2, [r3, #4]
	return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_isatty>:

int _isatty(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <_sbrk+0x50>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x16>
		heap_end = &end;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <_sbrk+0x50>)
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <_sbrk+0x54>)
 8001ce8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <_sbrk+0x50>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <_sbrk+0x50>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	466a      	mov	r2, sp
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d907      	bls.n	8001d0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cfe:	f005 fc2f 	bl	8007560 <__errno>
 8001d02:	4603      	mov	r3, r0
 8001d04:	220c      	movs	r2, #12
 8001d06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	e006      	b.n	8001d1c <_sbrk+0x48>
	}

	heap_end += incr;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <_sbrk+0x50>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <_sbrk+0x50>)
 8001d18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002b8 	.word	0x200002b8
 8001d28:	200017d8 	.word	0x200017d8

08001d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <SystemInit+0x28>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <SystemInit+0x28>)
 8001d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SystemInit+0x28>)
 8001d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d46:	609a      	str	r2, [r3, #8]
#endif
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08e      	sub	sp, #56	; 0x38
 8001d5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001d88:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001d9e:	2203      	movs	r2, #3
 8001da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dae:	4823      	ldr	r0, [pc, #140]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001db0:	f001 fe00 	bl	80039b4 <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001dba:	f7ff fe41 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481c      	ldr	r0, [pc, #112]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001dcc:	f002 f926 	bl	800401c <HAL_TIM_ConfigClockSource>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001dd6:	f7ff fe33 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dda:	4818      	ldr	r0, [pc, #96]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001ddc:	f001 fe15 	bl	8003a0a <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001de6:	f7ff fe2b 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	4619      	mov	r1, r3
 8001df8:	4810      	ldr	r0, [pc, #64]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001dfa:	f002 fcc7 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001e04:	f7ff fe1c 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001e20:	f002 f836 	bl	8003e90 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e2a:	f7ff fe09 	bl	8001a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM2_Init+0xe4>)
 8001e30:	f000 f9de 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8001e34:	bf00      	nop
 8001e36:	3738      	adds	r7, #56	; 0x38
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200016e0 	.word	0x200016e0

08001e40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001e70:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e72:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <MX_TIM3_Init+0xe8>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e84:	2203      	movs	r2, #3
 8001e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e94:	4823      	ldr	r0, [pc, #140]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001e96:	f001 fd8d 	bl	80039b4 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ea0:	f7ff fdce 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	481c      	ldr	r0, [pc, #112]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001eb2:	f002 f8b3 	bl	800401c <HAL_TIM_ConfigClockSource>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ebc:	f7ff fdc0 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ec0:	4818      	ldr	r0, [pc, #96]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001ec2:	f001 fda2 	bl	8003a0a <HAL_TIM_PWM_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001ecc:	f7ff fdb8 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed8:	f107 0320 	add.w	r3, r7, #32
 8001edc:	4619      	mov	r1, r3
 8001ede:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001ee0:	f002 fc54 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001eea:	f7ff fda9 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eee:	2360      	movs	r3, #96	; 0x60
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001f06:	f001 ffc3 	bl	8003e90 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001f10:	f7ff fd96 	bl	8001a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <MX_TIM3_Init+0xe4>)
 8001f16:	f000 f96b 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3738      	adds	r7, #56	; 0x38
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200016a0 	.word	0x200016a0
 8001f28:	40000400 	.word	0x40000400

08001f2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	615a      	str	r2, [r3, #20]
 8001f5a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <MX_TIM4_Init+0xe8>)
 8001f60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f70:	2203      	movs	r2, #3
 8001f72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f80:	4823      	ldr	r0, [pc, #140]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f82:	f001 fd17 	bl	80039b4 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001f8c:	f7ff fd58 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001f9e:	f002 f83d 	bl	800401c <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001fa8:	f7ff fd4a 	bl	8001a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fac:	4818      	ldr	r0, [pc, #96]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001fae:	f001 fd2c 	bl	8003a0a <HAL_TIM_PWM_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001fb8:	f7ff fd42 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fc4:	f107 0320 	add.w	r3, r7, #32
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001fcc:	f002 fbde 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001fd6:	f7ff fd33 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fda:	2360      	movs	r3, #96	; 0x60
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2200      	movs	r2, #0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_TIM4_Init+0xe4>)
 8001ff2:	f001 ff4d 	bl	8003e90 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001ffc:	f7ff fd20 	bl	8001a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <MX_TIM4_Init+0xe4>)
 8002002:	f000 f8f5 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8002006:	bf00      	nop
 8002008:	3738      	adds	r7, #56	; 0x38
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20001620 	.word	0x20001620
 8002014:	40000800 	.word	0x40000800

08002018 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <MX_TIM5_Init+0x90>)
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <MX_TIM5_Init+0x94>)
 8002038:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <MX_TIM5_Init+0x90>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <MX_TIM5_Init+0x90>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <MX_TIM5_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <MX_TIM5_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <MX_TIM5_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_TIM5_Init+0x90>)
 800205a:	f001 fcab 	bl	80039b4 <HAL_TIM_Base_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002064:	f7ff fcec 	bl	8001a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4619      	mov	r1, r3
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <MX_TIM5_Init+0x90>)
 8002076:	f001 ffd1 	bl	800401c <HAL_TIM_ConfigClockSource>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002080:	f7ff fcde 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_TIM5_Init+0x90>)
 8002092:	f002 fb7b 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800209c:	f7ff fcd0 	bl	8001a40 <Error_Handler>
  }

}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20001660 	.word	0x20001660
 80020ac:	40000c00 	.word	0x40000c00

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d0:	d116      	bne.n	8002100 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a40      	ldr	r2, [pc, #256]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2101      	movs	r1, #1
 80020f2:	201c      	movs	r0, #28
 80020f4:	f000 fb25 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f8:	201c      	movs	r0, #28
 80020fa:	f000 fb3e 	bl	800277a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80020fe:	e068      	b.n	80021d2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_TIM_Base_MspInit+0x130>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d134      	bne.n	8002174 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a32      	ldr	r2, [pc, #200]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = X_STEPC7_Pin;
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002152:	2302      	movs	r3, #2
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(X_STEPC7_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	4821      	ldr	r0, [pc, #132]	; (80021e4 <HAL_TIM_Base_MspInit+0x134>)
 800215e:	f000 fe33 	bl	8002dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2101      	movs	r1, #1
 8002166:	201d      	movs	r0, #29
 8002168:	f000 faeb 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800216c:	201d      	movs	r0, #29
 800216e:	f000 fb04 	bl	800277a <HAL_NVIC_EnableIRQ>
}
 8002172:	e02e      	b.n	80021d2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM4)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIM_Base_MspInit+0x138>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d116      	bne.n	80021ac <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a15      	ldr	r2, [pc, #84]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2101      	movs	r1, #1
 800219e:	201e      	movs	r0, #30
 80021a0:	f000 facf 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a4:	201e      	movs	r0, #30
 80021a6:	f000 fae8 	bl	800277a <HAL_NVIC_EnableIRQ>
}
 80021aa:	e012      	b.n	80021d2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM5)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_TIM_Base_MspInit+0x13c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10d      	bne.n	80021d2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
}
 80021d2:	bf00      	nop
 80021d4:	3730      	adds	r7, #48	; 0x30
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00

080021f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d11e      	bne.n	8002250 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a33      	ldr	r2, [pc, #204]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Y_STEP_Pin;
 800222e:	2301      	movs	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800223e:	2301      	movs	r3, #1
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Y_STEP_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4828      	ldr	r0, [pc, #160]	; (80022ec <HAL_TIM_MspPostInit+0xfc>)
 800224a:	f000 fdbd 	bl	8002dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800224e:	e046      	b.n	80022de <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_TIM_MspPostInit+0x100>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11e      	bne.n	8002298 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = X_STEP_Pin;
 8002276:	2340      	movs	r3, #64	; 0x40
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002286:	2302      	movs	r3, #2
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4816      	ldr	r0, [pc, #88]	; (80022ec <HAL_TIM_MspPostInit+0xfc>)
 8002292:	f000 fd99 	bl	8002dc8 <HAL_GPIO_Init>
}
 8002296:	e022      	b.n	80022de <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_TIM_MspPostInit+0x104>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d11d      	bne.n	80022de <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_TIM_MspPostInit+0xf8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Z_STEP_Pin;
 80022be:	2340      	movs	r3, #64	; 0x40
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ce:	2302      	movs	r3, #2
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Z_STEP_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <HAL_TIM_MspPostInit+0x108>)
 80022da:	f000 fd75 	bl	8002dc8 <HAL_GPIO_Init>
}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40020400 	.word	0x40020400

080022fc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_USART2_UART_Init+0x50>)
 8002304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_USART2_UART_Init+0x4c>)
 8002334:	f002 faac 	bl	8004890 <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800233e:	f7ff fb7f 	bl	8001a40 <Error_Handler>
  }

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20001780 	.word	0x20001780
 800234c:	40004400 	.word	0x40004400

08002350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	; (8002440 <HAL_UART_MspInit+0xf0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d161      	bne.n	8002436 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_UART_MspInit+0xf4>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_UART_MspInit+0xf4>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_UART_MspInit+0xf4>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <HAL_UART_MspInit+0xf4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_UART_MspInit+0xf4>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_UART_MspInit+0xf4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023aa:	230c      	movs	r3, #12
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ba:	2307      	movs	r3, #7
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4820      	ldr	r0, [pc, #128]	; (8002448 <HAL_UART_MspInit+0xf8>)
 80023c6:	f000 fcff 	bl	8002dc8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_UART_MspInit+0x100>)
 80023ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_UART_MspInit+0xfc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800240a:	4810      	ldr	r0, [pc, #64]	; (800244c <HAL_UART_MspInit+0xfc>)
 800240c:	f000 f9d0 	bl	80027b0 <HAL_DMA_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002416:	f7ff fb13 	bl	8001a40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_UART_MspInit+0xfc>)
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_UART_MspInit+0xfc>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2102      	movs	r1, #2
 800242a:	2026      	movs	r0, #38	; 0x26
 800242c:	f000 f989 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002430:	2026      	movs	r0, #38	; 0x26
 8002432:	f000 f9a2 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40004400 	.word	0x40004400
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000
 800244c:	20001720 	.word	0x20001720
 8002450:	400260a0 	.word	0x400260a0

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
  ldr  r2, =_sbss
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800247e:	f7ff fc55 	bl	8001d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f005 f873 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7fe ff13 	bl	80012b0 <main>
  bx  lr    
 800248a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800248c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002490:	0800eacc 	.word	0x0800eacc
  ldr  r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002498:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 800249c:	2000029c 	.word	0x2000029c
  ldr  r3, = _ebss
 80024a0:	200017d4 	.word	0x200017d4

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_Init+0x40>)
 80024b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_Init+0x40>)
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x40>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 f92b 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7ff fab8 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f943 	bl	8002796 <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f000 f90b 	bl	8002742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000000 	.word	0x20000000
 8002544:	20000008 	.word	0x20000008
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008
 8002570:	200017c0 	.word	0x200017c0

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	200017c0 	.word	0x200017c0

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <__NVIC_EnableIRQ+0x38>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff8e 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff29 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff3e 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff8e 	bl	8002680 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5d 	bl	800262c <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff31 	bl	80025f0 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa2 	bl	80026e8 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff feda 	bl	8002574 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e099      	b.n	8002900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ec:	e00f      	b.n	800280e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ee:	f7ff fec1 	bl	8002574 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d908      	bls.n	800280e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2203      	movs	r2, #3
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e078      	b.n	8002900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e8      	bne.n	80027ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_DMA_Init+0x158>)
 8002828:	4013      	ands	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2b04      	cmp	r3, #4
 8002866:	d107      	bne.n	8002878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4313      	orrs	r3, r2
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f023 0307 	bic.w	r3, r3, #7
 800288e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d117      	bne.n	80028d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00e      	beq.n	80028d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fa0b 	bl	8002cd0 <DMA_CheckFifoParam>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ce:	2301      	movs	r3, #1
 80028d0:	e016      	b.n	8002900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f9c2 	bl	8002c64 <DMA_CalcBaseAndBitshift>
 80028e0:	4603      	mov	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	223f      	movs	r2, #63	; 0x3f
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	f010803f 	.word	0xf010803f

0800290c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d004      	beq.n	800292a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00c      	b.n	8002944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2205      	movs	r2, #5
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800295c:	4b92      	ldr	r3, [pc, #584]	; (8002ba8 <HAL_DMA_IRQHandler+0x258>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a92      	ldr	r2, [pc, #584]	; (8002bac <HAL_DMA_IRQHandler+0x25c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2208      	movs	r2, #8
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2208      	movs	r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2204      	movs	r2, #4
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03c      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d024      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e01f      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e016      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0208 	bic.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808e 	beq.w	8002bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8086 	beq.w	8002bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d136      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x1da>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	223f      	movs	r2, #63	; 0x3f
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07d      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
        }
        return;
 8002b66:	e078      	b.n	8002c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01c      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d030      	beq.n	8002bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e02b      	b.n	8002bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d027      	beq.n	8002bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
 8002ba6:	e022      	b.n	8002bee <HAL_DMA_IRQHandler+0x29e>
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0210 	bic.w	r2, r2, #16
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d032      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d022      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d307      	bcc.n	8002c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f2      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x2ca>
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
 8002c58:	e000      	b.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c5a:	bf00      	nop
    }
  }
}
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop

08002c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3b10      	subs	r3, #16
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <DMA_CalcBaseAndBitshift+0x68>)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d909      	bls.n	8002ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca4:	e007      	b.n	8002cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	aaaaaaab 	.word	0xaaaaaaab
 8002ccc:	0800e1c4 	.word	0x0800e1c4

08002cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11f      	bne.n	8002d2a <DMA_CheckFifoParam+0x5a>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d856      	bhi.n	8002d9e <DMA_CheckFifoParam+0xce>
 8002cf0:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <DMA_CheckFifoParam+0x28>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d1b 	.word	0x08002d1b
 8002d00:	08002d09 	.word	0x08002d09
 8002d04:	08002d9f 	.word	0x08002d9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d046      	beq.n	8002da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e043      	b.n	8002da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d22:	d140      	bne.n	8002da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e03d      	b.n	8002da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d32:	d121      	bne.n	8002d78 <DMA_CheckFifoParam+0xa8>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d837      	bhi.n	8002daa <DMA_CheckFifoParam+0xda>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <DMA_CheckFifoParam+0x70>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d57 	.word	0x08002d57
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002d69 	.word	0x08002d69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e030      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d025      	beq.n	8002dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d66:	e022      	b.n	8002dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d76:	e01c      	b.n	8002db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d903      	bls.n	8002d86 <DMA_CheckFifoParam+0xb6>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d003      	beq.n	8002d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d84:	e018      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8a:	e015      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e00b      	b.n	8002db6 <DMA_CheckFifoParam+0xe6>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e00a      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e008      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e006      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e004      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
    }
  } 
  
  return status; 
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e159      	b.n	8003098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8148 	bne.w	8003092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d00b      	beq.n	8002e22 <HAL_GPIO_Init+0x5a>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d007      	beq.n	8002e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e16:	2b11      	cmp	r3, #17
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b12      	cmp	r3, #18
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0xfc>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d123      	bne.n	8002f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	69b9      	ldr	r1, [r7, #24]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a2 	beq.w	8003092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b54      	ldr	r3, [pc, #336]	; (80030b0 <HAL_GPIO_Init+0x2e8>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6a:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x2ec>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a49      	ldr	r2, [pc, #292]	; (80030b8 <HAL_GPIO_Init+0x2f0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x202>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_GPIO_Init+0x2f4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x1fe>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <HAL_GPIO_Init+0x2f8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x1fa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a46      	ldr	r2, [pc, #280]	; (80030c4 <HAL_GPIO_Init+0x2fc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x1f6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a45      	ldr	r2, [pc, #276]	; (80030c8 <HAL_GPIO_Init+0x300>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x1f2>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e008      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e004      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x204>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fdc:	4935      	ldr	r1, [pc, #212]	; (80030b4 <HAL_GPIO_Init+0x2ec>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_GPIO_Init+0x304>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300e:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003038:	4a24      	ldr	r2, [pc, #144]	; (80030cc <HAL_GPIO_Init+0x304>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_GPIO_Init+0x304>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_GPIO_Init+0x304>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800308c:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_GPIO_Init+0x304>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	f67f aea2 	bls.w	8002de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030ec:	e003      	b.n	80030f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	619a      	str	r2, [r3, #24]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800311a:	4a05      	ldr	r2, [pc, #20]	; (8003130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fe10 	bl	8006d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40013c00 	.word	0x40013c00

08003134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e25b      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003152:	4ba3      	ldr	r3, [pc, #652]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d00c      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4ba0      	ldr	r3, [pc, #640]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	2b08      	cmp	r3, #8
 8003168:	d112      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b9d      	ldr	r3, [pc, #628]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b99      	ldr	r3, [pc, #612]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e236      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b91      	ldr	r3, [pc, #580]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a90      	ldr	r2, [pc, #576]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a8a      	ldr	r2, [pc, #552]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b88      	ldr	r3, [pc, #544]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a87      	ldr	r2, [pc, #540]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b84      	ldr	r3, [pc, #528]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a83      	ldr	r2, [pc, #524]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a80      	ldr	r2, [pc, #512]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff f9c2 	bl	8002574 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7ff f9be 	bl	8002574 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1fb      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7ff f9ae 	bl	8002574 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff f9aa 	bl	8002574 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1e7      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1bb      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4952      	ldr	r1, [pc, #328]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b4f      	ldr	r3, [pc, #316]	; (80033e4 <HAL_RCC_OscConfig+0x2b0>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7ff f963 	bl	8002574 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7ff f95f 	bl	8002574 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e19c      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4940      	ldr	r1, [pc, #256]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_RCC_OscConfig+0x2b0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7ff f942 	bl	8002574 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f4:	f7ff f93e 	bl	8002574 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e17b      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d030      	beq.n	8003380 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_RCC_OscConfig+0x2b4>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7ff f922 	bl	8002574 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003334:	f7ff f91e 	bl	8002574 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e15b      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
 8003352:	e015      	b.n	8003380 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x2b4>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7ff f90b 	bl	8002574 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003362:	f7ff f907 	bl	8002574 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e144      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a0 	beq.w	80034ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x2b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d121      	bne.n	800340e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_RCC_OscConfig+0x2b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <HAL_RCC_OscConfig+0x2b8>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7ff f8cd 	bl	8002574 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	e011      	b.n	8003402 <HAL_RCC_OscConfig+0x2ce>
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	42470000 	.word	0x42470000
 80033e8:	42470e80 	.word	0x42470e80
 80033ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7ff f8c0 	bl	8002574 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0fd      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b81      	ldr	r3, [pc, #516]	; (8003608 <HAL_RCC_OscConfig+0x4d4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d106      	bne.n	8003424 <HAL_RCC_OscConfig+0x2f0>
 8003416:	4b7d      	ldr	r3, [pc, #500]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a7c      	ldr	r2, [pc, #496]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
 8003422:	e01c      	b.n	800345e <HAL_RCC_OscConfig+0x32a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b05      	cmp	r3, #5
 800342a:	d10c      	bne.n	8003446 <HAL_RCC_OscConfig+0x312>
 800342c:	4b77      	ldr	r3, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a76      	ldr	r2, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	4b74      	ldr	r3, [pc, #464]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a73      	ldr	r2, [pc, #460]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	e00b      	b.n	800345e <HAL_RCC_OscConfig+0x32a>
 8003446:	4b71      	ldr	r3, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a70      	ldr	r2, [pc, #448]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	4b6e      	ldr	r3, [pc, #440]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a6d      	ldr	r2, [pc, #436]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7ff f885 	bl	8002574 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7ff f881 	bl	8002574 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0bc      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ee      	beq.n	800346e <HAL_RCC_OscConfig+0x33a>
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7ff f86f 	bl	8002574 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7ff f86b 	bl	8002574 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0a6      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ee      	bne.n	800349a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b52      	ldr	r3, [pc, #328]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a51      	ldr	r2, [pc, #324]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8092 	beq.w	80035fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d8:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d05c      	beq.n	800359e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d141      	bne.n	8003570 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b48      	ldr	r3, [pc, #288]	; (8003610 <HAL_RCC_OscConfig+0x4dc>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7ff f83f 	bl	8002574 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7ff f83b 	bl	8002574 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e078      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	019b      	lsls	r3, r3, #6
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	4933      	ldr	r1, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003542:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_RCC_OscConfig+0x4dc>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7ff f814 	bl	8002574 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003550:	f7ff f810 	bl	8002574 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e04d      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x41c>
 800356e:	e045      	b.n	80035fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <HAL_RCC_OscConfig+0x4dc>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fe fffd 	bl	8002574 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357e:	f7fe fff9 	bl	8002574 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e036      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x44a>
 800359c:	e02e      	b.n	80035fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e029      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_RCC_OscConfig+0x4d8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d11c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d115      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d8:	4293      	cmp	r3, r2
 80035da:	d10d      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40007000 	.word	0x40007000
 800360c:	40023800 	.word	0x40023800
 8003610:	42470060 	.word	0x42470060

08003614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0cc      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003628:	4b68      	ldr	r3, [pc, #416]	; (80037cc <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d90c      	bls.n	8003650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b65      	ldr	r3, [pc, #404]	; (80037cc <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0b8      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003668:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a52      	ldr	r2, [pc, #328]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800368a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	494d      	ldr	r1, [pc, #308]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d044      	beq.n	8003734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d119      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e07f      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d2:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06f      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e2:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e067      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f2:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4934      	ldr	r1, [pc, #208]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003704:	f7fe ff36 	bl	8002574 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	e00a      	b.n	8003722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7fe ff32 	bl	8002574 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04f      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 020c 	and.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d1eb      	bne.n	800370c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20c      	bcs.n	800375c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e032      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4916      	ldr	r1, [pc, #88]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	490e      	ldr	r1, [pc, #56]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800379a:	f000 f821 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	490a      	ldr	r1, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	5ccb      	ldrb	r3, [r1, r3]
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1c8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fe96 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023c00 	.word	0x40023c00
 80037d0:	40023800 	.word	0x40023800
 80037d4:	0800e1ac 	.word	0x0800e1ac
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b5b0      	push	{r4, r5, r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037e6:	2100      	movs	r1, #0
 80037e8:	6079      	str	r1, [r7, #4]
 80037ea:	2100      	movs	r1, #0
 80037ec:	60f9      	str	r1, [r7, #12]
 80037ee:	2100      	movs	r1, #0
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037f2:	2100      	movs	r1, #0
 80037f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f6:	4952      	ldr	r1, [pc, #328]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 80037f8:	6889      	ldr	r1, [r1, #8]
 80037fa:	f001 010c 	and.w	r1, r1, #12
 80037fe:	2908      	cmp	r1, #8
 8003800:	d00d      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x3e>
 8003802:	2908      	cmp	r1, #8
 8003804:	f200 8094 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x150>
 8003808:	2900      	cmp	r1, #0
 800380a:	d002      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x32>
 800380c:	2904      	cmp	r1, #4
 800380e:	d003      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x38>
 8003810:	e08e      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003812:	4b4c      	ldr	r3, [pc, #304]	; (8003944 <HAL_RCC_GetSysClockFreq+0x164>)
 8003814:	60bb      	str	r3, [r7, #8]
       break;
 8003816:	e08e      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003818:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_RCC_GetSysClockFreq+0x168>)
 800381a:	60bb      	str	r3, [r7, #8]
      break;
 800381c:	e08b      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800381e:	4948      	ldr	r1, [pc, #288]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 8003820:	6849      	ldr	r1, [r1, #4]
 8003822:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003826:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003828:	4945      	ldr	r1, [pc, #276]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 800382a:	6849      	ldr	r1, [r1, #4]
 800382c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003830:	2900      	cmp	r1, #0
 8003832:	d024      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003834:	4942      	ldr	r1, [pc, #264]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 8003836:	6849      	ldr	r1, [r1, #4]
 8003838:	0989      	lsrs	r1, r1, #6
 800383a:	4608      	mov	r0, r1
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003844:	f04f 0500 	mov.w	r5, #0
 8003848:	ea00 0204 	and.w	r2, r0, r4
 800384c:	ea01 0305 	and.w	r3, r1, r5
 8003850:	493d      	ldr	r1, [pc, #244]	; (8003948 <HAL_RCC_GetSysClockFreq+0x168>)
 8003852:	fb01 f003 	mul.w	r0, r1, r3
 8003856:	2100      	movs	r1, #0
 8003858:	fb01 f102 	mul.w	r1, r1, r2
 800385c:	1844      	adds	r4, r0, r1
 800385e:	493a      	ldr	r1, [pc, #232]	; (8003948 <HAL_RCC_GetSysClockFreq+0x168>)
 8003860:	fba2 0101 	umull	r0, r1, r2, r1
 8003864:	1863      	adds	r3, r4, r1
 8003866:	4619      	mov	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f7fd fa22 	bl	8000cb8 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e04a      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b30      	ldr	r3, [pc, #192]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	461a      	mov	r2, r3
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	ea02 0400 	and.w	r4, r2, r0
 8003896:	ea03 0501 	and.w	r5, r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	014b      	lsls	r3, r1, #5
 80038a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038ac:	0142      	lsls	r2, r0, #5
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	1b00      	subs	r0, r0, r4
 80038b4:	eb61 0105 	sbc.w	r1, r1, r5
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	018b      	lsls	r3, r1, #6
 80038c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038c6:	0182      	lsls	r2, r0, #6
 80038c8:	1a12      	subs	r2, r2, r0
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	00d9      	lsls	r1, r3, #3
 80038d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038dc:	00d0      	lsls	r0, r2, #3
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	1912      	adds	r2, r2, r4
 80038e4:	eb45 0303 	adc.w	r3, r5, r3
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	0299      	lsls	r1, r3, #10
 80038f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038f6:	0290      	lsls	r0, r2, #10
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f7fd f9d6 	bl	8000cb8 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_GetSysClockFreq+0x160>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	60bb      	str	r3, [r7, #8]
      break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <HAL_RCC_GetSysClockFreq+0x164>)
 8003932:	60bb      	str	r3, [r7, #8]
      break;
 8003934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003936:	68bb      	ldr	r3, [r7, #8]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bdb0      	pop	{r4, r5, r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	00f42400 	.word	0x00f42400
 8003948:	017d7840 	.word	0x017d7840

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	0800e1bc 	.word	0x0800e1bc

0800398c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003990:	f7ff ffdc 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	0800e1bc 	.word	0x0800e1bc

080039b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e01d      	b.n	8003a02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fb68 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 fbfe 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e01d      	b.n	8003a58 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f815 	bl	8003a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f000 fbd3 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d841      	bhi.n	8003b08 <HAL_TIM_PWM_Start_IT+0x94>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HAL_TIM_PWM_Start_IT+0x18>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003b09 	.word	0x08003b09
 8003a94:	08003b09 	.word	0x08003b09
 8003a98:	08003b09 	.word	0x08003b09
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003b09 	.word	0x08003b09
 8003aa4:	08003b09 	.word	0x08003b09
 8003aa8:	08003b09 	.word	0x08003b09
 8003aac:	08003ae5 	.word	0x08003ae5
 8003ab0:	08003b09 	.word	0x08003b09
 8003ab4:	08003b09 	.word	0x08003b09
 8003ab8:	08003b09 	.word	0x08003b09
 8003abc:	08003af7 	.word	0x08003af7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0202 	orr.w	r2, r2, #2
 8003ace:	60da      	str	r2, [r3, #12]
      break;
 8003ad0:	e01b      	b.n	8003b0a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0204 	orr.w	r2, r2, #4
 8003ae0:	60da      	str	r2, [r3, #12]
      break;
 8003ae2:	e012      	b.n	8003b0a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0208 	orr.w	r2, r2, #8
 8003af2:	60da      	str	r2, [r3, #12]
      break;
 8003af4:	e009      	b.n	8003b0a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0210 	orr.w	r2, r2, #16
 8003b04:	60da      	str	r2, [r3, #12]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003b08:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fe14 	bl	8004740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_TIM_PWM_Start_IT+0xec>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d107      	bne.n	8003b32 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b06      	cmp	r3, #6
 8003b42:	d007      	beq.n	8003b54 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000

08003b64 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d841      	bhi.n	8003bf8 <HAL_TIM_PWM_Stop_IT+0x94>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_TIM_PWM_Stop_IT+0x18>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003bf9 	.word	0x08003bf9
 8003b84:	08003bf9 	.word	0x08003bf9
 8003b88:	08003bf9 	.word	0x08003bf9
 8003b8c:	08003bc3 	.word	0x08003bc3
 8003b90:	08003bf9 	.word	0x08003bf9
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003bf9 	.word	0x08003bf9
 8003b9c:	08003bd5 	.word	0x08003bd5
 8003ba0:	08003bf9 	.word	0x08003bf9
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003be7 	.word	0x08003be7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0202 	bic.w	r2, r2, #2
 8003bbe:	60da      	str	r2, [r3, #12]
      break;
 8003bc0:	e01b      	b.n	8003bfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0204 	bic.w	r2, r2, #4
 8003bd0:	60da      	str	r2, [r3, #12]
      break;
 8003bd2:	e012      	b.n	8003bfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0208 	bic.w	r2, r2, #8
 8003be2:	60da      	str	r2, [r3, #12]
      break;
 8003be4:	e009      	b.n	8003bfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0210 	bic.w	r2, r2, #16
 8003bf4:	60da      	str	r2, [r3, #12]
      break;
 8003bf6:	e000      	b.n	8003bfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8003bf8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fd9c 	bl	8004740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_TIM_PWM_Stop_IT+0x118>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d117      	bne.n	8003c42 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_TIM_PWM_Stop_IT+0xde>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	f240 4344 	movw	r3, #1092	; 0x444
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_PWM_Stop_IT+0xde>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_TIM_PWM_Stop_IT+0x10e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	f240 4344 	movw	r3, #1092	; 0x444
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_TIM_PWM_Stop_IT+0x10e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40010000 	.word	0x40010000

08003c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0202 	mvn.w	r2, #2
 8003cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa82 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa74 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f003 fb57 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0204 	mvn.w	r2, #4
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa58 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa4a 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f003 fb2d 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0208 	mvn.w	r2, #8
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa2e 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa20 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f003 fb03 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0210 	mvn.w	r2, #16
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2208      	movs	r2, #8
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa04 	bl	80041cc <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9f6 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f003 fad9 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0201 	mvn.w	r2, #1
 8003dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9d0 	bl	80041a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d10e      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d107      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fd26 	bl	800487c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9c2 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0220 	mvn.w	r2, #32
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fcf0 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0b4      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	f200 809f 	bhi.w	8004000 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08004001 	.word	0x08004001
 8003ed0:	08004001 	.word	0x08004001
 8003ed4:	08004001 	.word	0x08004001
 8003ed8:	08003f3d 	.word	0x08003f3d
 8003edc:	08004001 	.word	0x08004001
 8003ee0:	08004001 	.word	0x08004001
 8003ee4:	08004001 	.word	0x08004001
 8003ee8:	08003f7f 	.word	0x08003f7f
 8003eec:	08004001 	.word	0x08004001
 8003ef0:	08004001 	.word	0x08004001
 8003ef4:	08004001 	.word	0x08004001
 8003ef8:	08003fbf 	.word	0x08003fbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f9f6 	bl	80042f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0208 	orr.w	r2, r2, #8
 8003f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0204 	bic.w	r2, r2, #4
 8003f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6999      	ldr	r1, [r3, #24]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	619a      	str	r2, [r3, #24]
      break;
 8003f3a:	e062      	b.n	8004002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa3c 	bl	80043c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6999      	ldr	r1, [r3, #24]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	619a      	str	r2, [r3, #24]
      break;
 8003f7c:	e041      	b.n	8004002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fa87 	bl	8004498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0208 	orr.w	r2, r2, #8
 8003f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0204 	bic.w	r2, r2, #4
 8003fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69d9      	ldr	r1, [r3, #28]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	61da      	str	r2, [r3, #28]
      break;
 8003fbc:	e021      	b.n	8004002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fad1 	bl	800456c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69d9      	ldr	r1, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	021a      	lsls	r2, r3, #8
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	61da      	str	r2, [r3, #28]
      break;
 8003ffe:	e000      	b.n	8004002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004000:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIM_ConfigClockSource+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e0b3      	b.n	800419c <HAL_TIM_ConfigClockSource+0x180>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d03e      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0xd0>
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004072:	f200 8087 	bhi.w	8004184 <HAL_TIM_ConfigClockSource+0x168>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	f000 8085 	beq.w	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d87f      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 8004084:	2b70      	cmp	r3, #112	; 0x70
 8004086:	d01a      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xa2>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d87b      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 800408c:	2b60      	cmp	r3, #96	; 0x60
 800408e:	d050      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0x116>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d877      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 8004094:	2b50      	cmp	r3, #80	; 0x50
 8004096:	d03c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0xf6>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d873      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d058      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x136>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d86f      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d064      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d86b      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d060      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d867      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05c      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d05a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040bc:	e062      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6899      	ldr	r1, [r3, #8]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f000 fb17 	bl	8004700 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
      break;
 80040ea:	e04e      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f000 fb00 	bl	8004700 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410e:	609a      	str	r2, [r3, #8]
      break;
 8004110:	e03b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	461a      	mov	r2, r3
 8004120:	f000 fa74 	bl	800460c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2150      	movs	r1, #80	; 0x50
 800412a:	4618      	mov	r0, r3
 800412c:	f000 facd 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8004130:	e02b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	f000 fa93 	bl	800466a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2160      	movs	r1, #96	; 0x60
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fabd 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8004150:	e01b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	461a      	mov	r2, r3
 8004160:	f000 fa54 	bl	800460c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	4618      	mov	r0, r3
 800416c:	f000 faad 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8004170:	e00b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f000 faa4 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8004182:	e002      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004188:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <TIM_Base_SetConfig+0xe4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a31      	ldr	r2, [pc, #196]	; (80042dc <TIM_Base_SetConfig+0xe8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <TIM_Base_SetConfig+0xec>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <TIM_Base_SetConfig+0xf0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <TIM_Base_SetConfig+0xe4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01b      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d017      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a22      	ldr	r2, [pc, #136]	; (80042dc <TIM_Base_SetConfig+0xe8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <TIM_Base_SetConfig+0xec>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00f      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <TIM_Base_SetConfig+0xf0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00b      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <TIM_Base_SetConfig+0xf4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <TIM_Base_SetConfig+0xf8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d003      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <TIM_Base_SetConfig+0xfc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d108      	bne.n	8004290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <TIM_Base_SetConfig+0xe4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d103      	bne.n	80042c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	615a      	str	r2, [r3, #20]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800

080042f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 0302 	bic.w	r3, r3, #2
 800433c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <TIM_OC1_SetConfig+0xc8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10c      	bne.n	800436a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0308 	bic.w	r3, r3, #8
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <TIM_OC1_SetConfig+0xc8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40010000 	.word	0x40010000

080043c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0320 	bic.w	r3, r3, #32
 800440a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <TIM_OC2_SetConfig+0xd4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d10d      	bne.n	800443c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a15      	ldr	r2, [pc, #84]	; (8004494 <TIM_OC2_SetConfig+0xd4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d113      	bne.n	800446c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800444a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000

08004498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <TIM_OC3_SetConfig+0xd0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10d      	bne.n	8004512 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <TIM_OC3_SetConfig+0xd0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d113      	bne.n	8004542 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40010000 	.word	0x40010000

0800456c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	031b      	lsls	r3, r3, #12
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <TIM_OC4_SetConfig+0x9c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d109      	bne.n	80045e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000

0800460c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 030a 	bic.w	r3, r3, #10
 8004648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466a:	b480      	push	{r7}
 800466c:	b087      	sub	sp, #28
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0210 	bic.w	r2, r3, #16
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f043 0307 	orr.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	431a      	orrs	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2201      	movs	r2, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e050      	b.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d013      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a16      	ldr	r2, [pc, #88]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10c      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4313      	orrs	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40014000 	.word	0x40014000

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e03f      	b.n	8004922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fd4a 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fbf1 	bl	80050bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b088      	sub	sp, #32
 800492e:	af02      	add	r7, sp, #8
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b20      	cmp	r3, #32
 8004948:	f040 8083 	bne.w	8004a52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_UART_Transmit+0x2e>
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e07b      	b.n	8004a54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x40>
 8004966:	2302      	movs	r3, #2
 8004968:	e074      	b.n	8004a54 <HAL_UART_Transmit+0x12a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004980:	f7fd fdf8 	bl	8002574 <HAL_GetTick>
 8004984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800499a:	e042      	b.n	8004a22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b2:	d122      	bne.n	80049fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2200      	movs	r2, #0
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fa10 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e042      	b.n	8004a54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d103      	bne.n	80049f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3302      	adds	r3, #2
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	e017      	b.n	8004a22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	e013      	b.n	8004a22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f9ed 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e01f      	b.n	8004a54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	60ba      	str	r2, [r7, #8]
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1b7      	bne.n	800499c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2140      	movs	r1, #64	; 0x40
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f9d4 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	f040 8090 	bne.w	8004b9e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_UART_Receive+0x2e>
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e088      	b.n	8004ba0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Receive+0x40>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e081      	b.n	8004ba0 <HAL_UART_Receive+0x144>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2222      	movs	r2, #34	; 0x22
 8004aae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ab2:	f7fd fd5f 	bl	8002574 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004acc:	e05c      	b.n	8004b88 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d12b      	bne.n	8004b3e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2120      	movs	r1, #32
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f977 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e04f      	b.n	8004ba0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10c      	bne.n	8004b26 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3302      	adds	r3, #2
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	e030      	b.n	8004b88 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	e024      	b.n	8004b88 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2120      	movs	r1, #32
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f94b 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e023      	b.n	8004ba0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d108      	bne.n	8004b72 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	60ba      	str	r2, [r7, #8]
 8004b6c:	b2ca      	uxtb	r2, r1
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e00a      	b.n	8004b88 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d19d      	bne.n	8004ace <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_UART_IRQHandler+0x52>
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9e0 	bl	8004fb8 <UART_Receive_IT>
      return;
 8004bf8:	e0d0      	b.n	8004d9c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80b0 	beq.w	8004d62 <HAL_UART_IRQHandler+0x1ba>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_UART_IRQHandler+0x70>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a5 	beq.w	8004d62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_UART_IRQHandler+0x90>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_UART_IRQHandler+0xb0>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	f043 0202 	orr.w	r2, r3, #2
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_UART_IRQHandler+0xd0>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c70:	f043 0204 	orr.w	r2, r3, #4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xfa>
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <HAL_UART_IRQHandler+0xee>
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	f043 0208 	orr.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d077      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x11c>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f97a 	bl	8004fb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_UART_IRQHandler+0x144>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d031      	beq.n	8004d50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8c3 	bl	8004e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d123      	bne.n	8004d48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <HAL_UART_IRQHandler+0x1fc>)
 8004d1e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fdf1 	bl	800290c <HAL_DMA_Abort_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d016      	beq.n	8004d5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3e:	e00e      	b.n	8004d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f845 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d46:	e00a      	b.n	8004d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f841 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4e:	e006      	b.n	8004d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f83d 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004d5c:	e01d      	b.n	8004d9a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5e:	bf00      	nop
    return;
 8004d60:	e01b      	b.n	8004d9a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x1d6>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8b0 	bl	8004edc <UART_Transmit_IT>
    return;
 8004d7c:	e00e      	b.n	8004d9c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_UART_IRQHandler+0x1f4>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8f8 	bl	8004f88 <UART_EndTransmit_IT>
    return;
 8004d98:	e000      	b.n	8004d9c <HAL_UART_IRQHandler+0x1f4>
    return;
 8004d9a:	bf00      	nop
  }
}
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	08004eb5 	.word	0x08004eb5

08004da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df4:	e02c      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d028      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e04:	f7fd fbb6 	bl	8002574 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d21d      	bcs.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e00f      	b.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d0c3      	beq.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ff7e 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b21      	cmp	r3, #33	; 0x21
 8004eee:	d144      	bne.n	8004f7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef8:	d11a      	bne.n	8004f30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	621a      	str	r2, [r3, #32]
 8004f22:	e00e      	b.n	8004f42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]
 8004f2e:	e008      	b.n	8004f42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6211      	str	r1, [r2, #32]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fefd 	bl	8004da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b22      	cmp	r3, #34	; 0x22
 8004fca:	d171      	bne.n	80050b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	d123      	bne.n	800501e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10e      	bne.n	8005002 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8005000:	e029      	b.n	8005056 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	b29b      	uxth	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28
 800501c:	e01b      	b.n	8005056 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6858      	ldr	r0, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	1c59      	adds	r1, r3, #1
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6291      	str	r1, [r2, #40]	; 0x28
 8005036:	b2c2      	uxtb	r2, r0
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e00c      	b.n	8005056 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	1c58      	adds	r0, r3, #1
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	6288      	str	r0, [r1, #40]	; 0x28
 800504e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29b      	uxth	r3, r3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4619      	mov	r1, r3
 8005064:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005066:	2b00      	cmp	r3, #0
 8005068:	d120      	bne.n	80050ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0220 	bic.w	r2, r2, #32
 8005078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fe8a 	bl	8004dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e002      	b.n	80050b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	b0bd      	sub	sp, #244	; 0xf4
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d8:	68d9      	ldr	r1, [r3, #12]
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	ea40 0301 	orr.w	r3, r0, r1
 80050e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005114:	f021 010c 	bic.w	r1, r1, #12
 8005118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005122:	430b      	orrs	r3, r1
 8005124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	6999      	ldr	r1, [r3, #24]
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	ea40 0301 	orr.w	r3, r0, r1
 8005142:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514e:	f040 81a5 	bne.w	800549c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4bcd      	ldr	r3, [pc, #820]	; (8005490 <UART_SetConfig+0x3d4>)
 800515a:	429a      	cmp	r2, r3
 800515c:	d006      	beq.n	800516c <UART_SetConfig+0xb0>
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4bcb      	ldr	r3, [pc, #812]	; (8005494 <UART_SetConfig+0x3d8>)
 8005166:	429a      	cmp	r2, r3
 8005168:	f040 80cb 	bne.w	8005302 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe fc0e 	bl	800398c <HAL_RCC_GetPCLK2Freq>
 8005170:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005178:	461c      	mov	r4, r3
 800517a:	f04f 0500 	mov.w	r5, #0
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	1891      	adds	r1, r2, r2
 8005184:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005188:	415b      	adcs	r3, r3
 800518a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800518e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005192:	1912      	adds	r2, r2, r4
 8005194:	eb45 0303 	adc.w	r3, r5, r3
 8005198:	f04f 0000 	mov.w	r0, #0
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	00d9      	lsls	r1, r3, #3
 80051a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051a6:	00d0      	lsls	r0, r2, #3
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	1911      	adds	r1, r2, r4
 80051ae:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80051b2:	416b      	adcs	r3, r5
 80051b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	461a      	mov	r2, r3
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80051ca:	415b      	adcs	r3, r3
 80051cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051d4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80051d8:	f7fb fd6e 	bl	8000cb8 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4bad      	ldr	r3, [pc, #692]	; (8005498 <UART_SetConfig+0x3dc>)
 80051e2:	fba3 2302 	umull	r2, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	011e      	lsls	r6, r3, #4
 80051ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ee:	461c      	mov	r4, r3
 80051f0:	f04f 0500 	mov.w	r5, #0
 80051f4:	4622      	mov	r2, r4
 80051f6:	462b      	mov	r3, r5
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80051fc:	415b      	adcs	r3, r3
 80051fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005200:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005204:	1912      	adds	r2, r2, r4
 8005206:	eb45 0303 	adc.w	r3, r5, r3
 800520a:	f04f 0000 	mov.w	r0, #0
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	00d9      	lsls	r1, r3, #3
 8005214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005218:	00d0      	lsls	r0, r2, #3
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	1911      	adds	r1, r2, r4
 8005220:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005224:	416b      	adcs	r3, r5
 8005226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	461a      	mov	r2, r3
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	1891      	adds	r1, r2, r2
 8005238:	6739      	str	r1, [r7, #112]	; 0x70
 800523a:	415b      	adcs	r3, r3
 800523c:	677b      	str	r3, [r7, #116]	; 0x74
 800523e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005242:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005246:	f7fb fd37 	bl	8000cb8 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4b92      	ldr	r3, [pc, #584]	; (8005498 <UART_SetConfig+0x3dc>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	; 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	3332      	adds	r3, #50	; 0x32
 8005262:	4a8d      	ldr	r2, [pc, #564]	; (8005498 <UART_SetConfig+0x3dc>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005270:	441e      	add	r6, r3
 8005272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005276:	4618      	mov	r0, r3
 8005278:	f04f 0100 	mov.w	r1, #0
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	1894      	adds	r4, r2, r2
 8005282:	66bc      	str	r4, [r7, #104]	; 0x68
 8005284:	415b      	adcs	r3, r3
 8005286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005288:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800528c:	1812      	adds	r2, r2, r0
 800528e:	eb41 0303 	adc.w	r3, r1, r3
 8005292:	f04f 0400 	mov.w	r4, #0
 8005296:	f04f 0500 	mov.w	r5, #0
 800529a:	00dd      	lsls	r5, r3, #3
 800529c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052a0:	00d4      	lsls	r4, r2, #3
 80052a2:	4622      	mov	r2, r4
 80052a4:	462b      	mov	r3, r5
 80052a6:	1814      	adds	r4, r2, r0
 80052a8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80052ac:	414b      	adcs	r3, r1
 80052ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	1891      	adds	r1, r2, r2
 80052c0:	6639      	str	r1, [r7, #96]	; 0x60
 80052c2:	415b      	adcs	r3, r3
 80052c4:	667b      	str	r3, [r7, #100]	; 0x64
 80052c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052ce:	f7fb fcf3 	bl	8000cb8 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4b70      	ldr	r3, [pc, #448]	; (8005498 <UART_SetConfig+0x3dc>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	3332      	adds	r3, #50	; 0x32
 80052ea:	4a6b      	ldr	r2, [pc, #428]	; (8005498 <UART_SetConfig+0x3dc>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f003 0207 	and.w	r2, r3, #7
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4432      	add	r2, r6
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	e26d      	b.n	80057de <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005302:	f7fe fb2f 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8005306:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800530a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800530e:	461c      	mov	r4, r3
 8005310:	f04f 0500 	mov.w	r5, #0
 8005314:	4622      	mov	r2, r4
 8005316:	462b      	mov	r3, r5
 8005318:	1891      	adds	r1, r2, r2
 800531a:	65b9      	str	r1, [r7, #88]	; 0x58
 800531c:	415b      	adcs	r3, r3
 800531e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005320:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005324:	1912      	adds	r2, r2, r4
 8005326:	eb45 0303 	adc.w	r3, r5, r3
 800532a:	f04f 0000 	mov.w	r0, #0
 800532e:	f04f 0100 	mov.w	r1, #0
 8005332:	00d9      	lsls	r1, r3, #3
 8005334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005338:	00d0      	lsls	r0, r2, #3
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	1911      	adds	r1, r2, r4
 8005340:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005344:	416b      	adcs	r3, r5
 8005346:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	1891      	adds	r1, r2, r2
 8005358:	6539      	str	r1, [r7, #80]	; 0x50
 800535a:	415b      	adcs	r3, r3
 800535c:	657b      	str	r3, [r7, #84]	; 0x54
 800535e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005362:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005366:	f7fb fca7 	bl	8000cb8 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <UART_SetConfig+0x3dc>)
 8005370:	fba3 2302 	umull	r2, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	011e      	lsls	r6, r3, #4
 8005378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800537c:	461c      	mov	r4, r3
 800537e:	f04f 0500 	mov.w	r5, #0
 8005382:	4622      	mov	r2, r4
 8005384:	462b      	mov	r3, r5
 8005386:	1891      	adds	r1, r2, r2
 8005388:	64b9      	str	r1, [r7, #72]	; 0x48
 800538a:	415b      	adcs	r3, r3
 800538c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800538e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005392:	1912      	adds	r2, r2, r4
 8005394:	eb45 0303 	adc.w	r3, r5, r3
 8005398:	f04f 0000 	mov.w	r0, #0
 800539c:	f04f 0100 	mov.w	r1, #0
 80053a0:	00d9      	lsls	r1, r3, #3
 80053a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053a6:	00d0      	lsls	r0, r2, #3
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	1911      	adds	r1, r2, r4
 80053ae:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80053b2:	416b      	adcs	r3, r5
 80053b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	461a      	mov	r2, r3
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	1891      	adds	r1, r2, r2
 80053c6:	6439      	str	r1, [r7, #64]	; 0x40
 80053c8:	415b      	adcs	r3, r3
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
 80053cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80053d4:	f7fb fc70 	bl	8000cb8 <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <UART_SetConfig+0x3dc>)
 80053de:	fba3 1302 	umull	r1, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2164      	movs	r1, #100	; 0x64
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a29      	ldr	r2, [pc, #164]	; (8005498 <UART_SetConfig+0x3dc>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053fe:	441e      	add	r6, r3
 8005400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005404:	4618      	mov	r0, r3
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	1894      	adds	r4, r2, r2
 8005410:	63bc      	str	r4, [r7, #56]	; 0x38
 8005412:	415b      	adcs	r3, r3
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005416:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800541a:	1812      	adds	r2, r2, r0
 800541c:	eb41 0303 	adc.w	r3, r1, r3
 8005420:	f04f 0400 	mov.w	r4, #0
 8005424:	f04f 0500 	mov.w	r5, #0
 8005428:	00dd      	lsls	r5, r3, #3
 800542a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800542e:	00d4      	lsls	r4, r2, #3
 8005430:	4622      	mov	r2, r4
 8005432:	462b      	mov	r3, r5
 8005434:	1814      	adds	r4, r2, r0
 8005436:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800543a:	414b      	adcs	r3, r1
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	461a      	mov	r2, r3
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	1891      	adds	r1, r2, r2
 800544e:	6339      	str	r1, [r7, #48]	; 0x30
 8005450:	415b      	adcs	r3, r3
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
 8005454:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005458:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800545c:	f7fb fc2c 	bl	8000cb8 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <UART_SetConfig+0x3dc>)
 8005466:	fba3 1302 	umull	r1, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2164      	movs	r1, #100	; 0x64
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	3332      	adds	r3, #50	; 0x32
 8005478:	4a07      	ldr	r2, [pc, #28]	; (8005498 <UART_SetConfig+0x3dc>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f003 0207 	and.w	r2, r3, #7
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4432      	add	r2, r6
 800548c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800548e:	e1a6      	b.n	80057de <UART_SetConfig+0x722>
 8005490:	40011000 	.word	0x40011000
 8005494:	40011400 	.word	0x40011400
 8005498:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4bd1      	ldr	r3, [pc, #836]	; (80057e8 <UART_SetConfig+0x72c>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d006      	beq.n	80054b6 <UART_SetConfig+0x3fa>
 80054a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4bcf      	ldr	r3, [pc, #828]	; (80057ec <UART_SetConfig+0x730>)
 80054b0:	429a      	cmp	r2, r3
 80054b2:	f040 80ca 	bne.w	800564a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b6:	f7fe fa69 	bl	800398c <HAL_RCC_GetPCLK2Freq>
 80054ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054c2:	461c      	mov	r4, r3
 80054c4:	f04f 0500 	mov.w	r5, #0
 80054c8:	4622      	mov	r2, r4
 80054ca:	462b      	mov	r3, r5
 80054cc:	1891      	adds	r1, r2, r2
 80054ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80054d0:	415b      	adcs	r3, r3
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054d8:	1912      	adds	r2, r2, r4
 80054da:	eb45 0303 	adc.w	r3, r5, r3
 80054de:	f04f 0000 	mov.w	r0, #0
 80054e2:	f04f 0100 	mov.w	r1, #0
 80054e6:	00d9      	lsls	r1, r3, #3
 80054e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054ec:	00d0      	lsls	r0, r2, #3
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	eb12 0a04 	adds.w	sl, r2, r4
 80054f6:	eb43 0b05 	adc.w	fp, r3, r5
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4618      	mov	r0, r3
 8005502:	f04f 0100 	mov.w	r1, #0
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	008b      	lsls	r3, r1, #2
 8005510:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005514:	0082      	lsls	r2, r0, #2
 8005516:	4650      	mov	r0, sl
 8005518:	4659      	mov	r1, fp
 800551a:	f7fb fbcd 	bl	8000cb8 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4bb3      	ldr	r3, [pc, #716]	; (80057f0 <UART_SetConfig+0x734>)
 8005524:	fba3 2302 	umull	r2, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	011e      	lsls	r6, r3, #4
 800552c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005530:	4618      	mov	r0, r3
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	1894      	adds	r4, r2, r2
 800553c:	623c      	str	r4, [r7, #32]
 800553e:	415b      	adcs	r3, r3
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
 8005542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005546:	1812      	adds	r2, r2, r0
 8005548:	eb41 0303 	adc.w	r3, r1, r3
 800554c:	f04f 0400 	mov.w	r4, #0
 8005550:	f04f 0500 	mov.w	r5, #0
 8005554:	00dd      	lsls	r5, r3, #3
 8005556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800555a:	00d4      	lsls	r4, r2, #3
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	1814      	adds	r4, r2, r0
 8005562:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005566:	414b      	adcs	r3, r1
 8005568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4618      	mov	r0, r3
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	008b      	lsls	r3, r1, #2
 8005582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005586:	0082      	lsls	r2, r0, #2
 8005588:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800558c:	f7fb fb94 	bl	8000cb8 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b96      	ldr	r3, [pc, #600]	; (80057f0 <UART_SetConfig+0x734>)
 8005596:	fba3 1302 	umull	r1, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	; 0x64
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a91      	ldr	r2, [pc, #580]	; (80057f0 <UART_SetConfig+0x734>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b4:	441e      	add	r6, r3
 80055b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055ba:	4618      	mov	r0, r3
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	1894      	adds	r4, r2, r2
 80055c6:	61bc      	str	r4, [r7, #24]
 80055c8:	415b      	adcs	r3, r3
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d0:	1812      	adds	r2, r2, r0
 80055d2:	eb41 0303 	adc.w	r3, r1, r3
 80055d6:	f04f 0400 	mov.w	r4, #0
 80055da:	f04f 0500 	mov.w	r5, #0
 80055de:	00dd      	lsls	r5, r3, #3
 80055e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055e4:	00d4      	lsls	r4, r2, #3
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	1814      	adds	r4, r2, r0
 80055ec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80055f0:	414b      	adcs	r3, r1
 80055f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f04f 0100 	mov.w	r1, #0
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	008b      	lsls	r3, r1, #2
 800560c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005610:	0082      	lsls	r2, r0, #2
 8005612:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005616:	f7fb fb4f 	bl	8000cb8 <__aeabi_uldivmod>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4b74      	ldr	r3, [pc, #464]	; (80057f0 <UART_SetConfig+0x734>)
 8005620:	fba3 1302 	umull	r1, r3, r3, r2
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	2164      	movs	r1, #100	; 0x64
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	3332      	adds	r3, #50	; 0x32
 8005632:	4a6f      	ldr	r2, [pc, #444]	; (80057f0 <UART_SetConfig+0x734>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	f003 020f 	and.w	r2, r3, #15
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4432      	add	r2, r6
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	e0c9      	b.n	80057de <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800564a:	f7fe f98b 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 800564e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005652:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005656:	461c      	mov	r4, r3
 8005658:	f04f 0500 	mov.w	r5, #0
 800565c:	4622      	mov	r2, r4
 800565e:	462b      	mov	r3, r5
 8005660:	1891      	adds	r1, r2, r2
 8005662:	6139      	str	r1, [r7, #16]
 8005664:	415b      	adcs	r3, r3
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800566c:	1912      	adds	r2, r2, r4
 800566e:	eb45 0303 	adc.w	r3, r5, r3
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	00d9      	lsls	r1, r3, #3
 800567c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005680:	00d0      	lsls	r0, r2, #3
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	eb12 0804 	adds.w	r8, r2, r4
 800568a:	eb43 0905 	adc.w	r9, r3, r5
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4618      	mov	r0, r3
 8005696:	f04f 0100 	mov.w	r1, #0
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	008b      	lsls	r3, r1, #2
 80056a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056a8:	0082      	lsls	r2, r0, #2
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f7fb fb03 	bl	8000cb8 <__aeabi_uldivmod>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <UART_SetConfig+0x734>)
 80056b8:	fba3 2302 	umull	r2, r3, r3, r2
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	011e      	lsls	r6, r3, #4
 80056c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056c4:	4618      	mov	r0, r3
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	1894      	adds	r4, r2, r2
 80056d0:	60bc      	str	r4, [r7, #8]
 80056d2:	415b      	adcs	r3, r3
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056da:	1812      	adds	r2, r2, r0
 80056dc:	eb41 0303 	adc.w	r3, r1, r3
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	f04f 0500 	mov.w	r5, #0
 80056e8:	00dd      	lsls	r5, r3, #3
 80056ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056ee:	00d4      	lsls	r4, r2, #3
 80056f0:	4622      	mov	r2, r4
 80056f2:	462b      	mov	r3, r5
 80056f4:	1814      	adds	r4, r2, r0
 80056f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80056fa:	414b      	adcs	r3, r1
 80056fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	008b      	lsls	r3, r1, #2
 8005716:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800571a:	0082      	lsls	r2, r0, #2
 800571c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005720:	f7fb faca 	bl	8000cb8 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <UART_SetConfig+0x734>)
 800572a:	fba3 1302 	umull	r1, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	2164      	movs	r1, #100	; 0x64
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	3332      	adds	r3, #50	; 0x32
 800573c:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <UART_SetConfig+0x734>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005748:	441e      	add	r6, r3
 800574a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800574e:	4618      	mov	r0, r3
 8005750:	f04f 0100 	mov.w	r1, #0
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	1894      	adds	r4, r2, r2
 800575a:	603c      	str	r4, [r7, #0]
 800575c:	415b      	adcs	r3, r3
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005764:	1812      	adds	r2, r2, r0
 8005766:	eb41 0303 	adc.w	r3, r1, r3
 800576a:	f04f 0400 	mov.w	r4, #0
 800576e:	f04f 0500 	mov.w	r5, #0
 8005772:	00dd      	lsls	r5, r3, #3
 8005774:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005778:	00d4      	lsls	r4, r2, #3
 800577a:	4622      	mov	r2, r4
 800577c:	462b      	mov	r3, r5
 800577e:	1814      	adds	r4, r2, r0
 8005780:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005784:	414b      	adcs	r3, r1
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4618      	mov	r0, r3
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	008b      	lsls	r3, r1, #2
 80057a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057a4:	0082      	lsls	r2, r0, #2
 80057a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80057aa:	f7fb fa85 	bl	8000cb8 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <UART_SetConfig+0x734>)
 80057b4:	fba3 1302 	umull	r1, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	2164      	movs	r1, #100	; 0x64
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	3332      	adds	r3, #50	; 0x32
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <UART_SetConfig+0x734>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	f003 020f 	and.w	r2, r3, #15
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4432      	add	r2, r6
 80057da:	609a      	str	r2, [r3, #8]
}
 80057dc:	e7ff      	b.n	80057de <UART_SetConfig+0x722>
 80057de:	bf00      	nop
 80057e0:	37f4      	adds	r7, #244	; 0xf4
 80057e2:	46bd      	mov	sp, r7
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	40011000 	.word	0x40011000
 80057ec:	40011400 	.word	0x40011400
 80057f0:	51eb851f 	.word	0x51eb851f
 80057f4:	00000000 	.word	0x00000000

080057f8 <odwrotna_kinematyka>:
#include "delta_kinematics.h"

uint8_t odwrotna_kinematyka(
        float *pozycja_wozkow_prowadnicy,
		float *zadana_pozycja_xyz)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	ed2d 8b02 	vpush	{d8}
 80057fe:	b09a      	sub	sp, #104	; 0x68
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

    float a = L1;
 800580c:	4bda      	ldr	r3, [pc, #872]	; (8005b78 <odwrotna_kinematyka+0x380>)
 800580e:	65fb      	str	r3, [r7, #92]	; 0x5c
    float b = L4;
 8005810:	4bda      	ldr	r3, [pc, #872]	; (8005b7c <odwrotna_kinematyka+0x384>)
 8005812:	65bb      	str	r3, [r7, #88]	; 0x58
    float l = L3;
 8005814:	4bda      	ldr	r3, [pc, #872]	; (8005b80 <odwrotna_kinematyka+0x388>)
 8005816:	657b      	str	r3, [r7, #84]	; 0x54
    float alfa = ALPHA;
 8005818:	4bda      	ldr	r3, [pc, #872]	; (8005b84 <odwrotna_kinematyka+0x38c>)
 800581a:	653b      	str	r3, [r7, #80]	; 0x50
    float teta = 0.0F;
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	64fb      	str	r3, [r7, #76]	; 0x4c

    float fi;
    float beta;

    for (int i=1; i<=3; i++)
 8005822:	2301      	movs	r3, #1
 8005824:	667b      	str	r3, [r7, #100]	; 0x64
 8005826:	e191      	b.n	8005b4c <odwrotna_kinematyka+0x354>
    {
        fi = (i - 1) * 120;
 8005828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582a:	1e5a      	subs	r2, r3, #1
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800583c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        beta = teta + (i - 1) * 120;
 8005840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005854:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800585c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        //zakladamy ze wszystkie wektory maja strukture 3x1 czyli 3wiersze oraz 1 kolumna, w matlabie jest to vector = [a; b; c]

        float vector_a[3] = {a*cosf(DEG2RAD(fi)), a*sinf(DEG2RAD(fi)), 0};
 8005860:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005862:	f7fa fe89 	bl	8000578 <__aeabi_f2d>
 8005866:	a3c2      	add	r3, pc, #776	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f7fa fedc 	bl	8000628 <__aeabi_dmul>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	f7fb f9ce 	bl	8000c18 <__aeabi_d2f>
 800587c:	4603      	mov	r3, r0
 800587e:	ee00 3a10 	vmov	s0, r3
 8005882:	f006 ff91 	bl	800c7a8 <cosf>
 8005886:	eeb0 7a40 	vmov.f32	s14, s0
 800588a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8005896:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005898:	f7fa fe6e 	bl	8000578 <__aeabi_f2d>
 800589c:	a3b4      	add	r3, pc, #720	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fec1 	bl	8000628 <__aeabi_dmul>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4610      	mov	r0, r2
 80058ac:	4619      	mov	r1, r3
 80058ae:	f7fb f9b3 	bl	8000c18 <__aeabi_d2f>
 80058b2:	4603      	mov	r3, r0
 80058b4:	ee00 3a10 	vmov	s0, r3
 80058b8:	f007 f814 	bl	800c8e4 <sinf>
 80058bc:	eeb0 7a40 	vmov.f32	s14, s0
 80058c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80058c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
        float vector_b[3] = {b*cosf(DEG2RAD(beta)), a*sinf(DEG2RAD(beta)), 0};
 80058d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80058d4:	f7fa fe50 	bl	8000578 <__aeabi_f2d>
 80058d8:	a3a5      	add	r3, pc, #660	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f7fa fea3 	bl	8000628 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4610      	mov	r0, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	f7fb f995 	bl	8000c18 <__aeabi_d2f>
 80058ee:	4603      	mov	r3, r0
 80058f0:	ee00 3a10 	vmov	s0, r3
 80058f4:	f006 ff58 	bl	800c7a8 <cosf>
 80058f8:	eeb0 7a40 	vmov.f32	s14, s0
 80058fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005904:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8005908:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800590a:	f7fa fe35 	bl	8000578 <__aeabi_f2d>
 800590e:	a398      	add	r3, pc, #608	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fe88 	bl	8000628 <__aeabi_dmul>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4610      	mov	r0, r2
 800591e:	4619      	mov	r1, r3
 8005920:	f7fb f97a 	bl	8000c18 <__aeabi_d2f>
 8005924:	4603      	mov	r3, r0
 8005926:	ee00 3a10 	vmov	s0, r3
 800592a:	f006 ffdb 	bl	800c8e4 <sinf>
 800592e:	eeb0 7a40 	vmov.f32	s14, s0
 8005932:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c

        float vector_d[3] =  {-cosf(DEG2RAD(alfa))*cosf(DEG2RAD(fi)), -cosf(DEG2RAD(alfa))*sinf(DEG2RAD(fi)), -sinf(DEG2RAD(alfa)) };
 8005944:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005946:	f7fa fe17 	bl	8000578 <__aeabi_f2d>
 800594a:	a389      	add	r3, pc, #548	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f7fa fe6a 	bl	8000628 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	f7fb f95c 	bl	8000c18 <__aeabi_d2f>
 8005960:	4603      	mov	r3, r0
 8005962:	ee00 3a10 	vmov	s0, r3
 8005966:	f006 ff1f 	bl	800c7a8 <cosf>
 800596a:	eef0 7a40 	vmov.f32	s15, s0
 800596e:	eeb1 8a67 	vneg.f32	s16, s15
 8005972:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005974:	f7fa fe00 	bl	8000578 <__aeabi_f2d>
 8005978:	a37d      	add	r3, pc, #500	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fe53 	bl	8000628 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	f7fb f945 	bl	8000c18 <__aeabi_d2f>
 800598e:	4603      	mov	r3, r0
 8005990:	ee00 3a10 	vmov	s0, r3
 8005994:	f006 ff08 	bl	800c7a8 <cosf>
 8005998:	eef0 7a40 	vmov.f32	s15, s0
 800599c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80059a0:	edc7 7a06 	vstr	s15, [r7, #24]
 80059a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059a6:	f7fa fde7 	bl	8000578 <__aeabi_f2d>
 80059aa:	a371      	add	r3, pc, #452	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fe3a 	bl	8000628 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
 80059bc:	f7fb f92c 	bl	8000c18 <__aeabi_d2f>
 80059c0:	4603      	mov	r3, r0
 80059c2:	ee00 3a10 	vmov	s0, r3
 80059c6:	f006 feef 	bl	800c7a8 <cosf>
 80059ca:	eef0 7a40 	vmov.f32	s15, s0
 80059ce:	eeb1 8a67 	vneg.f32	s16, s15
 80059d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80059d4:	f7fa fdd0 	bl	8000578 <__aeabi_f2d>
 80059d8:	a365      	add	r3, pc, #404	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f7fa fe23 	bl	8000628 <__aeabi_dmul>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	f7fb f915 	bl	8000c18 <__aeabi_d2f>
 80059ee:	4603      	mov	r3, r0
 80059f0:	ee00 3a10 	vmov	s0, r3
 80059f4:	f006 ff76 	bl	800c8e4 <sinf>
 80059f8:	eef0 7a40 	vmov.f32	s15, s0
 80059fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a00:	edc7 7a07 	vstr	s15, [r7, #28]
 8005a04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a06:	f7fa fdb7 	bl	8000578 <__aeabi_f2d>
 8005a0a:	a359      	add	r3, pc, #356	; (adr r3, 8005b70 <odwrotna_kinematyka+0x378>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fe0a 	bl	8000628 <__aeabi_dmul>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fb f8fc 	bl	8000c18 <__aeabi_d2f>
 8005a20:	4603      	mov	r3, r0
 8005a22:	ee00 3a10 	vmov	s0, r3
 8005a26:	f006 ff5d 	bl	800c8e4 <sinf>
 8005a2a:	eef0 7a40 	vmov.f32	s15, s0
 8005a2e:	eef1 7a67 	vneg.f32	s15, s15
 8005a32:	edc7 7a08 	vstr	s15, [r7, #32]

        float vector_L[3] = {0};
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	609a      	str	r2, [r3, #8]

        vector_L[0] = zadana_pozycja_xyz[0] + vector_b[0] - vector_a[0];
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	ed93 7a00 	vldr	s14, [r3]
 8005a48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a58:	edc7 7a03 	vstr	s15, [r7, #12]
        vector_L[1] = zadana_pozycja_xyz[1] + vector_b[1] - vector_a[1];
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	ed93 7a00 	vldr	s14, [r3]
 8005a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a74:	edc7 7a04 	vstr	s15, [r7, #16]
        vector_L[2] = zadana_pozycja_xyz[2] + vector_b[2] - vector_a[2];
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	ed93 7a00 	vldr	s14, [r3]
 8005a80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a90:	edc7 7a05 	vstr	s15, [r7, #20]

        float temp_di0T_Li;
        temp_di0T_Li = vector_d[0] * vector_L[0] + vector_d[1] * vector_L[1] + vector_d[2] * vector_L[2];
 8005a94:	ed97 7a06 	vldr	s14, [r7, #24]
 8005a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ab0:	edd7 6a08 	vldr	s13, [r7, #32]
 8005ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        float temp_LiT_Li;
        temp_LiT_Li = vector_L[0] * vector_L[0] + vector_L[1] * vector_L[1] + vector_L[2] * vector_L[2];
 8005ac4:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ad0:	edd7 6a04 	vldr	s13, [r7, #16]
 8005ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ae0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ae4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        pozycja_wozkow_prowadnicy[i-1] = temp_di0T_Li - sqrtf( powf(temp_di0T_Li, 2) - temp_LiT_Li + powf(l, 2) );
 8005af4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005af8:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8005afc:	f006 ff6a 	bl	800c9d4 <powf>
 8005b00:	eeb0 7a40 	vmov.f32	s14, s0
 8005b04:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005b08:	ee37 8a67 	vsub.f32	s16, s14, s15
 8005b0c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005b10:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8005b14:	f006 ff5e 	bl	800c9d4 <powf>
 8005b18:	eef0 7a40 	vmov.f32	s15, s0
 8005b1c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005b20:	eeb0 0a67 	vmov.f32	s0, s15
 8005b24:	f006 ffee 	bl	800cb04 <sqrtf>
 8005b28:	eeb0 7a40 	vmov.f32	s14, s0
 8005b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b32:	3b01      	subs	r3, #1
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005b3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b42:	edc3 7a00 	vstr	s15, [r3]
    for (int i=1; i<=3; i++)
 8005b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b48:	3301      	adds	r3, #1
 8005b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	f77f ae6a 	ble.w	8005828 <odwrotna_kinematyka+0x30>

        //printf("%d prowadnica - polozenie wynosi %f\n", i, pozycja_wozkow_prowadnicy[i-1]);

    }
    return status = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8005b5a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3768      	adds	r7, #104	; 0x68
 8005b62:	46bd      	mov	sp, r7
 8005b64:	ecbd 8b02 	vpop	{d8}
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w
 8005b70:	a2529d39 	.word	0xa2529d39
 8005b74:	3f91df46 	.word	0x3f91df46
 8005b78:	43520000 	.word	0x43520000
 8005b7c:	429b999a 	.word	0x429b999a
 8005b80:	43d90000 	.word	0x43d90000
 8005b84:	42820000 	.word	0x42820000

08005b88 <liniowa_interpolacja>:
		punkt_kartezjanski punkt_koncowy,		// [IN] - Wspolrzedne punktu koncowego [mm]
		//punkt_kartezjanski *trajektoria,
		int rozdzielczosc,						// [IN] - Rozdzielczosc [-]
		float v_max,							// [IN] - Maksymalna predkosc [mm/s]
		float a_max)							// [IN] - Maksymalne przyspieszenie [mm/s^2]
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	ed2d 8b02 	vpush	{d8}
 8005b8e:	b092      	sub	sp, #72	; 0x48
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	eeb0 5a41 	vmov.f32	s10, s2
 8005b96:	eef0 5a61 	vmov.f32	s11, s3
 8005b9a:	eeb0 6a42 	vmov.f32	s12, s4
 8005b9e:	eef0 6a62 	vmov.f32	s13, s5
 8005ba2:	eeb0 7a43 	vmov.f32	s14, s6
 8005ba6:	eef0 7a63 	vmov.f32	s15, s7
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	ed87 4a02 	vstr	s8, [r7, #8]
 8005bb0:	edc7 4a01 	vstr	s9, [r7, #4]
 8005bb4:	ed87 0a08 	vstr	s0, [r7, #32]
 8005bb8:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8005bbc:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8005bc0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8005bc4:	ed87 6a04 	vstr	s12, [r7, #16]
 8005bc8:	edc7 6a05 	vstr	s13, [r7, #20]
 8005bcc:	ed87 7a06 	vstr	s14, [r7, #24]
 8005bd0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (rozdzielczosc < MAX_ROZDZIELCZOSC_INTERPOLACJI)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b63      	cmp	r3, #99	; 0x63
 8005bd8:	f300 80e5 	bgt.w	8005da6 <liniowa_interpolacja+0x21e>
	{

		float s = sqrtf(powf(punkt_koncowy.x - punkt_poczatkowy.x, 2) +
 8005bdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005be0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005bec:	eeb0 0a67 	vmov.f32	s0, s15
 8005bf0:	f006 fef0 	bl	800c9d4 <powf>
 8005bf4:	eeb0 8a40 	vmov.f32	s16, s0
				powf(punkt_koncowy.y - punkt_poczatkowy.y, 2) + powf(punkt_koncowy.z - punkt_poczatkowy.z, 2));	//dlugosci drogi
 8005bf8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c04:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005c08:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0c:	f006 fee2 	bl	800c9d4 <powf>
 8005c10:	eef0 7a40 	vmov.f32	s15, s0
		float s = sqrtf(powf(punkt_koncowy.x - punkt_poczatkowy.x, 2) +
 8005c14:	ee38 8a27 	vadd.f32	s16, s16, s15
				powf(punkt_koncowy.y - punkt_poczatkowy.y, 2) + powf(punkt_koncowy.z - punkt_poczatkowy.z, 2));	//dlugosci drogi
 8005c18:	ed97 7a06 	vldr	s14, [r7, #24]
 8005c1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c24:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005c28:	eeb0 0a67 	vmov.f32	s0, s15
 8005c2c:	f006 fed2 	bl	800c9d4 <powf>
 8005c30:	eef0 7a40 	vmov.f32	s15, s0
		float s = sqrtf(powf(punkt_koncowy.x - punkt_poczatkowy.x, 2) +
 8005c34:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005c38:	eeb0 0a67 	vmov.f32	s0, s15
 8005c3c:	f006 ff62 	bl	800cb04 <sqrtf>
 8005c40:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

		float t_ruchu = fmaxf(sqrtf(6 * s / a_max), 3 * s / (2 * v_max));			//czas ruchu
 8005c44:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005c48:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005c4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c58:	eeb0 0a66 	vmov.f32	s0, s13
 8005c5c:	f006 ff52 	bl	800cb04 <sqrtf>
 8005c60:	eeb0 6a40 	vmov.f32	s12, s0
 8005c64:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005c68:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005c6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c7c:	eef0 0a66 	vmov.f32	s1, s13
 8005c80:	eeb0 0a46 	vmov.f32	s0, s12
 8005c84:	f006 fdd0 	bl	800c828 <fmaxf>
 8005c88:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

		float inkrement_czasu = t_ruchu / rozdzielczosc;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c96:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		float t;

		for (uint8_t i = 0; i <= rozdzielczosc; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ca8:	e077      	b.n	8005d9a <liniowa_interpolacja+0x212>
		{
			t = i * inkrement_czasu;
 8005caa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float wspolczynnik_od_czasu = powf(t / t_ruchu, 2) * (3 - 2 * t / t_ruchu);		//wspolczynnik przemieszczenia zalezny od czasu
 8005cc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005cca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005cce:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005cd2:	eeb0 0a66 	vmov.f32	s0, s13
 8005cd6:	f006 fe7d 	bl	800c9d4 <powf>
 8005cda:	eeb0 6a40 	vmov.f32	s12, s0
 8005cde:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ce2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ce6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cfa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			trajektoria_liniowa[i].x = punkt_poczatkowy.x + (punkt_koncowy.x - punkt_poczatkowy.x) * wspolczynnik_od_czasu;
 8005cfe:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d02:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1e:	4a27      	ldr	r2, [pc, #156]	; (8005dbc <liniowa_interpolacja+0x234>)
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	edc3 7a00 	vstr	s15, [r3]
			trajektoria_liniowa[i].y = punkt_poczatkowy.y + (punkt_koncowy.y - punkt_poczatkowy.y) * wspolczynnik_od_czasu;
 8005d28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005d2c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005d30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <liniowa_interpolacja+0x234>)
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	edc3 7a00 	vstr	s15, [r3]
			trajektoria_liniowa[i].z = punkt_poczatkowy.z + (punkt_koncowy.z - punkt_poczatkowy.z) * wspolczynnik_od_czasu;
 8005d54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005d58:	edd7 6a06 	vldr	s13, [r7, #24]
 8005d5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <liniowa_interpolacja+0x234>)
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	4413      	add	r3, r2
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	edc3 7a00 	vstr	s15, [r3]
			trajektoria_liniowa[i].t = t;
 8005d80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d84:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <liniowa_interpolacja+0x234>)
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	4413      	add	r3, r2
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8e:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i <= rozdzielczosc; i++)
 8005d90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d94:	3301      	adds	r3, #1
 8005d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	da82      	bge.n	8005caa <liniowa_interpolacja+0x122>
		}
	}
	else printf("BLAD: rozdzielczosc interpolacji musi byc mniejsza niz %d",
			MAX_ROZDZIELCZOSC_INTERPOLACJI);
}
 8005da4:	e003      	b.n	8005dae <liniowa_interpolacja+0x226>
	else printf("BLAD: rozdzielczosc interpolacji musi byc mniejsza niz %d",
 8005da6:	2164      	movs	r1, #100	; 0x64
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <liniowa_interpolacja+0x238>)
 8005daa:	f002 fa85 	bl	80082b8 <iprintf>
}
 8005dae:	bf00      	nop
 8005db0:	3748      	adds	r7, #72	; 0x48
 8005db2:	46bd      	mov	sp, r7
 8005db4:	ecbd 8b02 	vpop	{d8}
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200002bc 	.word	0x200002bc
 8005dc0:	0800e0b4 	.word	0x0800e0b4

08005dc4 <przegubowa_interpolacja>:
		punkt_kartezjanski pozycja_poczatkowa,		// [IN] - Pozycja poczatkowa [mm]
		punkt_kartezjanski pozycja_koncowa,			// [IN] - Pozycja koncowa [mm]
		int rozdzielczosc,							// [IN] - Rozdzielczosc [-]
		float v_max,								// [IN] - Predkosc maksymalna [mm/s]
		float a_max)								// [IN] - Przyspieszenie maksymalna [mm/s^2]
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b092      	sub	sp, #72	; 0x48
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	eeb0 5a41 	vmov.f32	s10, s2
 8005dce:	eef0 5a61 	vmov.f32	s11, s3
 8005dd2:	eeb0 6a42 	vmov.f32	s12, s4
 8005dd6:	eef0 6a62 	vmov.f32	s13, s5
 8005dda:	eeb0 7a43 	vmov.f32	s14, s6
 8005dde:	eef0 7a63 	vmov.f32	s15, s7
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	ed87 4a02 	vstr	s8, [r7, #8]
 8005de8:	edc7 4a01 	vstr	s9, [r7, #4]
 8005dec:	ed87 0a08 	vstr	s0, [r7, #32]
 8005df0:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8005df4:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8005df8:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8005dfc:	ed87 6a04 	vstr	s12, [r7, #16]
 8005e00:	edc7 6a05 	vstr	s13, [r7, #20]
 8005e04:	ed87 7a06 	vstr	s14, [r7, #24]
 8005e08:	edc7 7a07 	vstr	s15, [r7, #28]
	if (rozdzielczosc < MAX_ROZDZIELCZOSC_INTERPOLACJI)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b63      	cmp	r3, #99	; 0x63
 8005e10:	f300 80db 	bgt.w	8005fca <przegubowa_interpolacja+0x206>
	{
		float delta_d_max = fmaxf(fmaxf(fabsf(pozycja_koncowa.x - pozycja_poczatkowa.x), fabsf(pozycja_koncowa.y - pozycja_poczatkowa.y)), fabsf(pozycja_koncowa.z - pozycja_poczatkowa.z));	//najwieksze przemieszczenie przegubu
 8005e14:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e18:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	eef0 6ae7 	vabs.f32	s13, s15
 8005e24:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e30:	eef0 7ae7 	vabs.f32	s15, s15
 8005e34:	eef0 0a67 	vmov.f32	s1, s15
 8005e38:	eeb0 0a66 	vmov.f32	s0, s13
 8005e3c:	f006 fcf4 	bl	800c828 <fmaxf>
 8005e40:	eef0 6a40 	vmov.f32	s13, s0
 8005e44:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e50:	eef0 7ae7 	vabs.f32	s15, s15
 8005e54:	eef0 0a67 	vmov.f32	s1, s15
 8005e58:	eeb0 0a66 	vmov.f32	s0, s13
 8005e5c:	f006 fce4 	bl	800c828 <fmaxf>
 8005e60:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

		float t_ruchu = fmaxf(sqrt(6 * delta_d_max / a_max), 3 * delta_d_max / (2 * v_max));												//czas ruchu
 8005e64:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005e68:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e78:	ee16 0a90 	vmov	r0, s13
 8005e7c:	f7fa fb7c 	bl	8000578 <__aeabi_f2d>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	ec43 2b10 	vmov	d0, r2, r3
 8005e88:	f006 fd6e 	bl	800c968 <sqrt>
 8005e8c:	ec53 2b10 	vmov	r2, r3, d0
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	f7fa fec0 	bl	8000c18 <__aeabi_d2f>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005e9e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005ea2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005eaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005eae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005eb2:	eef0 0a66 	vmov.f32	s1, s13
 8005eb6:	ee00 3a10 	vmov	s0, r3
 8005eba:	f006 fcb5 	bl	800c828 <fmaxf>
 8005ebe:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

		float inkrement_czasu = t_ruchu / rozdzielczosc;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ecc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		float t;

		for (int i = 0; i <= rozdzielczosc; i++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	647b      	str	r3, [r7, #68]	; 0x44
 8005edc:	e070      	b.n	8005fc0 <przegubowa_interpolacja+0x1fc>
		{
			t = i * inkrement_czasu;
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ee8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float wspolczynnik_od_czasu = powf(t / t_ruchu, 2) * (3 - 2 * t / t_ruchu);	//wspolczynnik zalezny od czasu
 8005ef4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005ef8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005efc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f00:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005f04:	eeb0 0a66 	vmov.f32	s0, s13
 8005f08:	f006 fd64 	bl	800c9d4 <powf>
 8005f0c:	eeb0 6a40 	vmov.f32	s12, s0
 8005f10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f18:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f20:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f28:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			droga_przegubowa[i].x = pozycja_poczatkowa.x + (pozycja_koncowa.x - pozycja_poczatkowa.x) * wspolczynnik_od_czasu;
 8005f30:	ed97 7a08 	vldr	s14, [r7, #32]
 8005f34:	edd7 6a04 	vldr	s13, [r7, #16]
 8005f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f4c:	4a23      	ldr	r2, [pc, #140]	; (8005fdc <przegubowa_interpolacja+0x218>)
 8005f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	4413      	add	r3, r2
 8005f54:	edc3 7a00 	vstr	s15, [r3]
			droga_przegubowa[i].y = pozycja_poczatkowa.y + (pozycja_koncowa.y - pozycja_poczatkowa.y) * wspolczynnik_od_czasu;
 8005f58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005f5c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005f60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005f64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <przegubowa_interpolacja+0x218>)
 8005f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	edc3 7a00 	vstr	s15, [r3]
			droga_przegubowa[i].z = pozycja_poczatkowa.z + (pozycja_koncowa.z - pozycja_poczatkowa.z) * wspolczynnik_od_czasu;
 8005f82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005f86:	edd7 6a06 	vldr	s13, [r7, #24]
 8005f8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f9e:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <przegubowa_interpolacja+0x218>)
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	edc3 7a00 	vstr	s15, [r3]
			droga_przegubowa[i].t = t;
 8005fac:	4a0b      	ldr	r2, [pc, #44]	; (8005fdc <przegubowa_interpolacja+0x218>)
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	4413      	add	r3, r2
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i <= rozdzielczosc; i++)
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	dd8a      	ble.n	8005ede <przegubowa_interpolacja+0x11a>

		}
	}
	else printf("BLAD: rozdzielczosc interpolacji musi byc mniejsza niz %d",
			MAX_ROZDZIELCZOSC_INTERPOLACJI);
}
 8005fc8:	e003      	b.n	8005fd2 <przegubowa_interpolacja+0x20e>
	else printf("BLAD: rozdzielczosc interpolacji musi byc mniejsza niz %d",
 8005fca:	2164      	movs	r1, #100	; 0x64
 8005fcc:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <przegubowa_interpolacja+0x21c>)
 8005fce:	f002 f973 	bl	80082b8 <iprintf>
}
 8005fd2:	bf00      	nop
 8005fd4:	3748      	adds	r7, #72	; 0x48
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000f3c 	.word	0x20000f3c
 8005fe0:	0800e0b4 	.word	0x0800e0b4
 8005fe4:	00000000 	.word	0x00000000

08005fe8 <kolowa_interpolacja>:
		punkt_kartezjanski Pk,		// [IN] - Wspolrzedne punktu koncowego [mm]
		float promien,				// [IN] - Promien okregu [mm]
		int rozdzielczosc,			// [IN] - Rozdzielczosc [-]
		float v_max,				// [IN] - Maksymalna predkosc [mm/s]
		float a_max)				// [IN] - Maksymalne przyspieszenie [mm/s^2]
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	ed2d 8b02 	vpush	{d8}
 8005fee:	f5ad 6df8 	sub.w	sp, sp, #1984	; 0x7c0
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	eef0 5a61 	vmov.f32	s11, s3
 8005ff8:	f107 0220 	add.w	r2, r7, #32
 8005ffc:	eeb0 6a42 	vmov.f32	s12, s4
 8006000:	eef0 6a62 	vmov.f32	s13, s5
 8006004:	eeb0 7a43 	vmov.f32	s14, s6
 8006008:	eef0 7a63 	vmov.f32	s15, s7
 800600c:	f107 0310 	add.w	r3, r7, #16
 8006010:	f107 010c 	add.w	r1, r7, #12
 8006014:	ed81 4a00 	vstr	s8, [r1]
 8006018:	f107 0108 	add.w	r1, r7, #8
 800601c:	6008      	str	r0, [r1, #0]
 800601e:	1d39      	adds	r1, r7, #4
 8006020:	edc1 4a00 	vstr	s9, [r1]
 8006024:	4639      	mov	r1, r7
 8006026:	ed81 5a00 	vstr	s10, [r1]
 800602a:	ed82 0a00 	vstr	s0, [r2]
 800602e:	edc2 0a01 	vstr	s1, [r2, #4]
 8006032:	ed82 1a02 	vstr	s2, [r2, #8]
 8006036:	edc2 5a03 	vstr	s11, [r2, #12]
 800603a:	ed83 6a00 	vstr	s12, [r3]
 800603e:	edc3 6a01 	vstr	s13, [r3, #4]
 8006042:	ed83 7a02 	vstr	s14, [r3, #8]
 8006046:	edc3 7a03 	vstr	s15, [r3, #12]
    // Pf - punkt koncowy
    // Ps - punkt poczatkowy
    // Po - srodek okregu
    // M - srodek odcinka miedzy Pk a Ps

    if (rozdzielczosc < MAX_ROZDZIELCZOSC_INTERPOLACJI)
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b63      	cmp	r3, #99	; 0x63
 8006052:	f300 8547 	bgt.w	8006ae4 <kolowa_interpolacja+0xafc>
    {
        float s_min = sqrtf(powf(Pk.x - Ps.x, 2) +  powf(Pk.y - Ps.y, 2) + powf(Pk.z - Ps.z, 2));
 8006056:	f107 0310 	add.w	r3, r7, #16
 800605a:	ed93 7a00 	vldr	s14, [r3]
 800605e:	f107 0320 	add.w	r3, r7, #32
 8006062:	edd3 7a00 	vldr	s15, [r3]
 8006066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800606a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800606e:	eeb0 0a67 	vmov.f32	s0, s15
 8006072:	f006 fcaf 	bl	800c9d4 <powf>
 8006076:	eeb0 8a40 	vmov.f32	s16, s0
 800607a:	f107 0310 	add.w	r3, r7, #16
 800607e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006082:	f107 0320 	add.w	r3, r7, #32
 8006086:	edd3 7a01 	vldr	s15, [r3, #4]
 800608a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800608e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006092:	eeb0 0a67 	vmov.f32	s0, s15
 8006096:	f006 fc9d 	bl	800c9d4 <powf>
 800609a:	eef0 7a40 	vmov.f32	s15, s0
 800609e:	ee38 8a27 	vadd.f32	s16, s16, s15
 80060a2:	f107 0310 	add.w	r3, r7, #16
 80060a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80060aa:	f107 0320 	add.w	r3, r7, #32
 80060ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80060b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060b6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80060ba:	eeb0 0a67 	vmov.f32	s0, s15
 80060be:	f006 fc89 	bl	800c9d4 <powf>
 80060c2:	eef0 7a40 	vmov.f32	s15, s0
 80060c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80060ca:	eeb0 0a67 	vmov.f32	s0, s15
 80060ce:	f006 fd19 	bl	800cb04 <sqrtf>
 80060d2:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 80060d6:	ed83 0a00 	vstr	s0, [r3]
        float r_min = s_min/2;
 80060da:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 80060de:	ed93 7a00 	vldr	s14, [r3]
 80060e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80060e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060ea:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80060ee:	edc3 7a00 	vstr	s15, [r3]

        if (promien < r_min) promien = r_min+1;
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	ed93 7a00 	vldr	s14, [r3]
 80060fa:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80060fe:	edd3 7a00 	vldr	s15, [r3]
 8006102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610a:	d50b      	bpl.n	8006124 <kolowa_interpolacja+0x13c>
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 8006114:	edd2 7a00 	vldr	s15, [r2]
 8006118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800611c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006120:	edc3 7a00 	vstr	s15, [r3]

        punkt_kartezjanski wektor_PsPf;
        wektor_PsPf.x = Pk.x - Ps.x;
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	ed93 7a00 	vldr	s14, [r3]
 800612c:	f107 0320 	add.w	r3, r7, #32
 8006130:	edd3 7a00 	vldr	s15, [r3]
 8006134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006138:	f207 7354 	addw	r3, r7, #1876	; 0x754
 800613c:	edc3 7a00 	vstr	s15, [r3]
        wektor_PsPf.y = Pk.y - Ps.y;
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	ed93 7a01 	vldr	s14, [r3, #4]
 8006148:	f107 0320 	add.w	r3, r7, #32
 800614c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006154:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8006158:	edc3 7a00 	vstr	s15, [r3]
        wektor_PsPf.z = Pk.z - Ps.z;
 800615c:	f107 0310 	add.w	r3, r7, #16
 8006160:	ed93 7a02 	vldr	s14, [r3, #8]
 8006164:	f107 0320 	add.w	r3, r7, #32
 8006168:	edd3 7a02 	vldr	s15, [r3, #8]
 800616c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006170:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 8006174:	edc3 7a00 	vstr	s15, [r3]

        punkt_kartezjanski M;   //srodek odcinka miedzy Pf a Ps
        M.x = (Pk.x - Ps.x)/2 + Ps.x;
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	ed93 7a00 	vldr	s14, [r3]
 8006180:	f107 0320 	add.w	r3, r7, #32
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006190:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006194:	f107 0320 	add.w	r3, r7, #32
 8006198:	edd3 7a00 	vldr	s15, [r3]
 800619c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a0:	f207 7344 	addw	r3, r7, #1860	; 0x744
 80061a4:	edc3 7a00 	vstr	s15, [r3]
        M.y = (Pk.y - Ps.y)/2 + Ps.y;
 80061a8:	f107 0310 	add.w	r3, r7, #16
 80061ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80061b0:	f107 0320 	add.w	r3, r7, #32
 80061b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80061b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061c4:	f107 0320 	add.w	r3, r7, #32
 80061c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80061cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061d0:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80061d4:	edc3 7a00 	vstr	s15, [r3]
        M.z = (Pk.z - Ps.z)/2 + Ps.z;
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80061e0:	f107 0320 	add.w	r3, r7, #32
 80061e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80061e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061f4:	f107 0320 	add.w	r3, r7, #32
 80061f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80061fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006200:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006204:	edc3 7a00 	vstr	s15, [r3]

        //stała D od rownania plaszczyzny
        float D = -1*(wektor_PsPf.x * M.x + wektor_PsPf.y * M.y + wektor_PsPf.z * M.z);
 8006208:	f207 7354 	addw	r3, r7, #1876	; 0x754
 800620c:	ed93 7a00 	vldr	s14, [r3]
 8006210:	f207 7344 	addw	r3, r7, #1860	; 0x744
 8006214:	edd3 7a00 	vldr	s15, [r3]
 8006218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800621c:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8006220:	edd3 6a00 	vldr	s13, [r3]
 8006224:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8006228:	edd3 7a00 	vldr	s15, [r3]
 800622c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006234:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 8006238:	edd3 6a00 	vldr	s13, [r3]
 800623c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006240:	edd3 7a00 	vldr	s15, [r3]
 8006244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624c:	eef1 7a67 	vneg.f32	s15, s15
 8006250:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 8006254:	edc3 7a00 	vstr	s15, [r3]

        // ppPfsr - plaszczyzna prostopadla do_wektora_Pf_w_jego_srodku
        //float ppPfsr[4] = {wektor_PsPf.x, wektor_PsPf.y, wektor_PsPf.z, D};

        float przyprostokatna_1_r = sqrtf(powf(M.x - Ps.x, 2) +  powf(M.y - Ps.y, 2) + powf(M.z - Ps.z, 2));
 8006258:	f207 7344 	addw	r3, r7, #1860	; 0x744
 800625c:	ed93 7a00 	vldr	s14, [r3]
 8006260:	f107 0320 	add.w	r3, r7, #32
 8006264:	edd3 7a00 	vldr	s15, [r3]
 8006268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800626c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006270:	eeb0 0a67 	vmov.f32	s0, s15
 8006274:	f006 fbae 	bl	800c9d4 <powf>
 8006278:	eeb0 8a40 	vmov.f32	s16, s0
 800627c:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8006280:	ed93 7a00 	vldr	s14, [r3]
 8006284:	f107 0320 	add.w	r3, r7, #32
 8006288:	edd3 7a01 	vldr	s15, [r3, #4]
 800628c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006290:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006294:	eeb0 0a67 	vmov.f32	s0, s15
 8006298:	f006 fb9c 	bl	800c9d4 <powf>
 800629c:	eef0 7a40 	vmov.f32	s15, s0
 80062a0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80062a4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80062a8:	ed93 7a00 	vldr	s14, [r3]
 80062ac:	f107 0320 	add.w	r3, r7, #32
 80062b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80062b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062b8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80062bc:	eeb0 0a67 	vmov.f32	s0, s15
 80062c0:	f006 fb88 	bl	800c9d4 <powf>
 80062c4:	eef0 7a40 	vmov.f32	s15, s0
 80062c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80062cc:	eeb0 0a67 	vmov.f32	s0, s15
 80062d0:	f006 fc18 	bl	800cb04 <sqrtf>
 80062d4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80062d8:	ed83 0a00 	vstr	s0, [r3]
        float przyprostokatna_2_r = sqrtf(powf(promien, 2) - powf(przyprostokatna_1_r, 2));
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80062e4:	ed93 0a00 	vldr	s0, [r3]
 80062e8:	f006 fb74 	bl	800c9d4 <powf>
 80062ec:	eeb0 8a40 	vmov.f32	s16, s0
 80062f0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80062f4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80062f8:	ed93 0a00 	vldr	s0, [r3]
 80062fc:	f006 fb6a 	bl	800c9d4 <powf>
 8006300:	eef0 7a40 	vmov.f32	s15, s0
 8006304:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006308:	eeb0 0a67 	vmov.f32	s0, s15
 800630c:	f006 fbfa 	bl	800cb04 <sqrtf>
 8006310:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006314:	ed83 0a00 	vstr	s0, [r3]


        punkt_kartezjanski Po; //srodek okregu
        Po.x = 0;
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	f207 7234 	addw	r2, r7, #1844	; 0x734
 8006320:	6013      	str	r3, [r2, #0]
        Po.y = 0;
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	f507 62e7 	add.w	r2, r7, #1848	; 0x738
 800632a:	6013      	str	r3, [r2, #0]
        Po.z = M.z;  //zakladamy ze wspol_Z srodka okregu bedzie sie pokrywac z wspol_Z srodka odcinka
 800632c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f207 723c 	addw	r2, r7, #1852	; 0x73c
 8006336:	6013      	str	r3, [r2, #0]

        float a = wektor_PsPf.y/(-wektor_PsPf.x);
 8006338:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	eef1 6a67 	vneg.f32	s13, s15
 8006344:	f207 7354 	addw	r3, r7, #1876	; 0x754
 8006348:	ed93 7a00 	vldr	s14, [r3]
 800634c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006350:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006354:	edc3 7a00 	vstr	s15, [r3]
        float b = (wektor_PsPf.z * Po.z + D)/(-wektor_PsPf.x);
 8006358:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 800635c:	ed93 7a00 	vldr	s14, [r3]
 8006360:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 8006364:	edd3 7a00 	vldr	s15, [r3]
 8006368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800636c:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 8006370:	edd3 7a00 	vldr	s15, [r3]
 8006374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006378:	eef1 6a67 	vneg.f32	s13, s15
 800637c:	f207 7354 	addw	r3, r7, #1876	; 0x754
 8006380:	ed93 7a00 	vldr	s14, [r3]
 8006384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006388:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 800638c:	edc3 7a00 	vstr	s15, [r3]
        float g = b - M.x;
 8006390:	f207 7344 	addw	r3, r7, #1860	; 0x744
 8006394:	edd3 7a00 	vldr	s15, [r3]
 8006398:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 800639c:	ed93 7a00 	vldr	s14, [r3]
 80063a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063a4:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80063a8:	edc3 7a00 	vstr	s15, [r3]
        float m = powf(a, 2) + 1.0F;
 80063ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80063b0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80063b4:	ed93 0a00 	vldr	s0, [r3]
 80063b8:	f006 fb0c 	bl	800c9d4 <powf>
 80063bc:	eef0 7a40 	vmov.f32	s15, s0
 80063c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063c8:	f207 7394 	addw	r3, r7, #1940	; 0x794
 80063cc:	edc3 7a00 	vstr	s15, [r3]
        float n = 2*g*a - 2*M.y;
 80063d0:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80063d4:	edd3 7a00 	vldr	s15, [r3]
 80063d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80063dc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80063e0:	edd3 7a00 	vldr	s15, [r3]
 80063e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063e8:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80063ec:	edd3 7a00 	vldr	s15, [r3]
 80063f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063f8:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 80063fc:	edc3 7a00 	vstr	s15, [r3]
        float o = powf(g, 2) + powf(M.y, 2) - powf(przyprostokatna_2_r, 2);
 8006400:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006404:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 8006408:	ed93 0a00 	vldr	s0, [r3]
 800640c:	f006 fae2 	bl	800c9d4 <powf>
 8006410:	eeb0 8a40 	vmov.f32	s16, s0
 8006414:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8006418:	edd3 7a00 	vldr	s15, [r3]
 800641c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006420:	eeb0 0a67 	vmov.f32	s0, s15
 8006424:	f006 fad6 	bl	800c9d4 <powf>
 8006428:	eef0 7a40 	vmov.f32	s15, s0
 800642c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8006430:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006434:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006438:	ed93 0a00 	vldr	s0, [r3]
 800643c:	f006 faca 	bl	800c9d4 <powf>
 8006440:	eef0 7a40 	vmov.f32	s15, s0
 8006444:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006448:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 800644c:	edc3 7a00 	vstr	s15, [r3]
        float delta = powf(n, 2) - 4*m*o;
 8006450:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006454:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8006458:	ed93 0a00 	vldr	s0, [r3]
 800645c:	f006 faba 	bl	800c9d4 <powf>
 8006460:	eef0 6a40 	vmov.f32	s13, s0
 8006464:	f207 7394 	addw	r3, r7, #1940	; 0x794
 8006468:	edd3 7a00 	vldr	s15, [r3]
 800646c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006470:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006474:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 8006478:	edd3 7a00 	vldr	s15, [r3]
 800647c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006480:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006484:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8006488:	edc3 7a00 	vstr	s15, [r3]

        Po.y = ( -n - sqrtf(delta) ) / (2*m);
 800648c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8006490:	edd3 7a00 	vldr	s15, [r3]
 8006494:	eeb1 8a67 	vneg.f32	s16, s15
 8006498:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 800649c:	ed93 0a00 	vldr	s0, [r3]
 80064a0:	f006 fb30 	bl	800cb04 <sqrtf>
 80064a4:	eef0 7a40 	vmov.f32	s15, s0
 80064a8:	ee78 6a67 	vsub.f32	s13, s16, s15
 80064ac:	f207 7394 	addw	r3, r7, #1940	; 0x794
 80064b0:	edd3 7a00 	vldr	s15, [r3]
 80064b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064bc:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80064c0:	edc3 7a00 	vstr	s15, [r3]
        Po.x = a * Po.y + b;
 80064c4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80064c8:	ed93 7a00 	vldr	s14, [r3]
 80064cc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80064d0:	edd3 7a00 	vldr	s15, [r3]
 80064d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064d8:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 80064dc:	edd3 7a00 	vldr	s15, [r3]
 80064e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80064e8:	edc3 7a00 	vstr	s15, [r3]

        //float temp_r1 = sqrtf(powf(Po.x - Ps.x, 2) +  powf(Po.y - Ps.y, 2) + powf(Po.z - Ps.z, 2));
        //float temp_r2 = sqrtf(powf(Po.x - Pf.x, 2) +  powf(Po.y - Pf.y, 2) + powf(Po.z - Pf.z, 2));


        punkt_kartezjanski wektor_PsPo = {};
 80064ec:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	605a      	str	r2, [r3, #4]
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	60da      	str	r2, [r3, #12]
        wektor_PsPo.x =  Po.x - Ps.x;
 80064fa:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80064fe:	ed93 7a00 	vldr	s14, [r3]
 8006502:	f107 0320 	add.w	r3, r7, #32
 8006506:	edd3 7a00 	vldr	s15, [r3]
 800650a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800650e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8006512:	edc3 7a00 	vstr	s15, [r3]
        wektor_PsPo.y =  Po.y - Ps.y;
 8006516:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800651a:	ed93 7a00 	vldr	s14, [r3]
 800651e:	f107 0320 	add.w	r3, r7, #32
 8006522:	edd3 7a01 	vldr	s15, [r3, #4]
 8006526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800652e:	edc3 7a00 	vstr	s15, [r3]
        wektor_PsPo.z =  Po.z - Ps.z;
 8006532:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 8006536:	ed93 7a00 	vldr	s14, [r3]
 800653a:	f107 0320 	add.w	r3, r7, #32
 800653e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006546:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 800654a:	edc3 7a00 	vstr	s15, [r3]

        //vector_sub(&wektor_PsPo, &Po, &Ps);

        //osie w układzie plaskim UV
        punkt_kartezjanski U;
        normalizacja(&U, &wektor_PsPf);
 800654e:	f207 7254 	addw	r2, r7, #1876	; 0x754
 8006552:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fb1e 	bl	8006b9a <normalizacja>

        punkt_kartezjanski V;
        iloczyn_wektorowy(&V, &U, &wektor_PsPo);
 800655e:	f207 7224 	addw	r2, r7, #1828	; 0x724
 8006562:	f207 7114 	addw	r1, r7, #1812	; 0x714
 8006566:	f207 7304 	addw	r3, r7, #1796	; 0x704
 800656a:	4618      	mov	r0, r3
 800656c:	f000 faca 	bl	8006b04 <iloczyn_wektorowy>
        iloczyn_wektorowy(&V, &V, &U);
 8006570:	f207 7214 	addw	r2, r7, #1812	; 0x714
 8006574:	f207 7104 	addw	r1, r7, #1796	; 0x704
 8006578:	f207 7304 	addw	r3, r7, #1796	; 0x704
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fac1 	bl	8006b04 <iloczyn_wektorowy>
        normalizacja(&V, &V);
 8006582:	f207 7204 	addw	r2, r7, #1796	; 0x704
 8006586:	f207 7304 	addw	r3, r7, #1796	; 0x704
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fb04 	bl	8006b9a <normalizacja>


        //punkty okręgu w układzie UV
        punkt_kartezjanski Ps_UV;
        Ps_UV.x = 0;
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800659a:	6013      	str	r3, [r2, #0]
        Ps_UV.y = 0;
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
 80065a4:	6013      	str	r3, [r2, #0]
        punkt_kartezjanski Pf_UV;
        Pf_UV.x = iloczyn_skalarny(&wektor_PsPf, &U);
 80065a6:	f207 7214 	addw	r2, r7, #1812	; 0x714
 80065aa:	f207 7354 	addw	r3, r7, #1876	; 0x754
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fb48 	bl	8006c46 <iloczyn_skalarny>
 80065b6:	eef0 7a40 	vmov.f32	s15, s0
 80065ba:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 80065be:	edc3 7a00 	vstr	s15, [r3]
        Pf_UV.y = 0;
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 80065ca:	6013      	str	r3, [r2, #0]
        punkt_kartezjanski Po_UV;
        Po_UV.x = iloczyn_skalarny(&wektor_PsPo, &U);
 80065cc:	f207 7214 	addw	r2, r7, #1812	; 0x714
 80065d0:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fb35 	bl	8006c46 <iloczyn_skalarny>
 80065dc:	eef0 7a40 	vmov.f32	s15, s0
 80065e0:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 80065e4:	edc3 7a00 	vstr	s15, [r3]
        Po_UV.y = iloczyn_skalarny(&wektor_PsPo, &V);
 80065e8:	f207 7204 	addw	r2, r7, #1796	; 0x704
 80065ec:	f207 7324 	addw	r3, r7, #1828	; 0x724
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fb27 	bl	8006c46 <iloczyn_skalarny>
 80065f8:	eef0 7a40 	vmov.f32	s15, s0
 80065fc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8006600:	edc3 7a00 	vstr	s15, [r3]

        float alfa_s = (atan2f(Ps_UV.y - Po_UV.y, Ps_UV.x - Po_UV.x));
 8006604:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006608:	ed93 7a00 	vldr	s14, [r3]
 800660c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8006610:	edd3 7a00 	vldr	s15, [r3]
 8006614:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006618:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 800661c:	ed93 7a00 	vldr	s14, [r3]
 8006620:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8006624:	edd3 7a00 	vldr	s15, [r3]
 8006628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800662c:	eef0 0a67 	vmov.f32	s1, s15
 8006630:	eeb0 0a66 	vmov.f32	s0, s13
 8006634:	f006 f9cc 	bl	800c9d0 <atan2f>
 8006638:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800663c:	ed83 0a00 	vstr	s0, [r3]
        float alfa_f = (atan2f(Pf_UV.y - Po_UV.y, Pf_UV.x - Po_UV.x));
 8006640:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8006644:	ed93 7a00 	vldr	s14, [r3]
 8006648:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800664c:	edd3 7a00 	vldr	s15, [r3]
 8006650:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006654:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 8006658:	ed93 7a00 	vldr	s14, [r3]
 800665c:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8006660:	edd3 7a00 	vldr	s15, [r3]
 8006664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006668:	eef0 0a67 	vmov.f32	s1, s15
 800666c:	eeb0 0a66 	vmov.f32	s0, s13
 8006670:	f006 f9ae 	bl	800c9d0 <atan2f>
 8006674:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8006678:	ed83 0a00 	vstr	s0, [r3]
        float delta_alfa = fabsf(alfa_f - alfa_s);
 800667c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8006680:	ed93 7a00 	vldr	s14, [r3]
 8006684:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006688:	edd3 7a00 	vldr	s15, [r3]
 800668c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006690:	eef0 7ae7 	vabs.f32	s15, s15
 8006694:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 8006698:	edc3 7a00 	vstr	s15, [r3]


        float s = 2 * PI * promien * (RAD2DEG(fabsf(delta_alfa))/360);
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	edd3 7a00 	vldr	s15, [r3]
 80066a4:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8006978 <kolowa_interpolacja+0x990>
 80066a8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80066ac:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 80066b0:	edd3 7a00 	vldr	s15, [r3]
 80066b4:	eef0 7ae7 	vabs.f32	s15, s15
 80066b8:	ee17 0a90 	vmov	r0, s15
 80066bc:	f7f9 ff5c 	bl	8000578 <__aeabi_f2d>
 80066c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8006970 <kolowa_interpolacja+0x988>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 ffaf 	bl	8000628 <__aeabi_dmul>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fa faa1 	bl	8000c18 <__aeabi_d2f>
 80066d6:	ee06 0a90 	vmov	s13, r0
 80066da:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800697c <kolowa_interpolacja+0x994>
 80066de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80066e6:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 80066ea:	edc3 7a00 	vstr	s15, [r3]

        float t_ruchu = fmaxf(sqrtf(6 * s / a_max), 3 * s / (2 * v_max));
 80066ee:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 80066f2:	edd3 7a00 	vldr	s15, [r3]
 80066f6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80066fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066fe:	463b      	mov	r3, r7
 8006700:	edd3 7a00 	vldr	s15, [r3]
 8006704:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006708:	eeb0 0a66 	vmov.f32	s0, s13
 800670c:	f006 f9fa 	bl	800cb04 <sqrtf>
 8006710:	eeb0 6a40 	vmov.f32	s12, s0
 8006714:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8006718:	edd3 7a00 	vldr	s15, [r3]
 800671c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	edd3 7a00 	vldr	s15, [r3]
 800672a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800672e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006732:	eef0 0a66 	vmov.f32	s1, s13
 8006736:	eeb0 0a46 	vmov.f32	s0, s12
 800673a:	f006 f875 	bl	800c828 <fmaxf>
 800673e:	f207 7374 	addw	r3, r7, #1908	; 0x774
 8006742:	ed83 0a00 	vstr	s0, [r3]

        float inkrement_czasu = t_ruchu / rozdzielczosc;
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006754:	f207 7374 	addw	r3, r7, #1908	; 0x774
 8006758:	edd3 6a00 	vldr	s13, [r3]
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8006764:	edc3 7a00 	vstr	s15, [r3]

        float inkrement_alfa = delta_alfa/rozdzielczosc;
 8006768:	f107 0308 	add.w	r3, r7, #8
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006776:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 800677a:	edd3 6a00 	vldr	s13, [r3]
 800677e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006782:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006786:	edc3 7a00 	vstr	s15, [r3]
        float alfa;

        // punkty posrednie w UV
        punkt_kartezjanski P_UV[MAX_ROZDZIELCZOSC_INTERPOLACJI];

        for (int i = 0; i <= rozdzielczosc; i++)
 800678a:	2300      	movs	r3, #0
 800678c:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8006790:	e078      	b.n	8006884 <kolowa_interpolacja+0x89c>
        {
            t = i * inkrement_czasu;
 8006792:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800679e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80067a2:	ed93 7a00 	vldr	s14, [r3]
 80067a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067aa:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80067ae:	edc3 7a00 	vstr	s15, [r3]
            alfa = i * inkrement_alfa;
 80067b2:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067be:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80067c2:	ed93 7a00 	vldr	s14, [r3]
 80067c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ca:	f207 7364 	addw	r3, r7, #1892	; 0x764
 80067ce:	edc3 7a00 	vstr	s15, [r3]
            P_UV[i].x = Po_UV.x + promien * cosf(alfa_s + alfa);
 80067d2:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 80067d6:	ed93 8a00 	vldr	s16, [r3]
 80067da:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80067de:	ed93 7a00 	vldr	s14, [r3]
 80067e2:	f207 7364 	addw	r3, r7, #1892	; 0x764
 80067e6:	edd3 7a00 	vldr	s15, [r3]
 80067ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ee:	eeb0 0a67 	vmov.f32	s0, s15
 80067f2:	f005 ffd9 	bl	800c7a8 <cosf>
 80067f6:	eeb0 7a40 	vmov.f32	s14, s0
 80067fa:	f107 030c 	add.w	r3, r7, #12
 80067fe:	edd3 7a00 	vldr	s15, [r3]
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	ee78 7a27 	vadd.f32	s15, s16, s15
 800680a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800680e:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	4413      	add	r3, r2
 8006816:	edc3 7a00 	vstr	s15, [r3]
            P_UV[i].y = Po_UV.y + promien * sinf(alfa_s + alfa);
 800681a:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800681e:	ed93 8a00 	vldr	s16, [r3]
 8006822:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006826:	ed93 7a00 	vldr	s14, [r3]
 800682a:	f207 7364 	addw	r3, r7, #1892	; 0x764
 800682e:	edd3 7a00 	vldr	s15, [r3]
 8006832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006836:	eeb0 0a67 	vmov.f32	s0, s15
 800683a:	f006 f853 	bl	800c8e4 <sinf>
 800683e:	eeb0 7a40 	vmov.f32	s14, s0
 8006842:	f107 030c 	add.w	r3, r7, #12
 8006846:	edd3 7a00 	vldr	s15, [r3]
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006852:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006856:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	4413      	add	r3, r2
 800685e:	3304      	adds	r3, #4
 8006860:	edc3 7a00 	vstr	s15, [r3]
            P_UV[i].t = t;
 8006864:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006868:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	4413      	add	r3, r2
 8006870:	330c      	adds	r3, #12
 8006872:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	601a      	str	r2, [r3, #0]
        for (int i = 0; i <= rozdzielczosc; i++)
 800687a:	f8d7 37bc 	ldr.w	r3, [r7, #1980]	; 0x7bc
 800687e:	3301      	adds	r3, #1
 8006880:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8006884:	f107 0308 	add.w	r3, r7, #8
 8006888:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	f77f af7f 	ble.w	8006792 <kolowa_interpolacja+0x7aa>
        }
        //tutaj nadpisuje wartosci poniewaz z powyzszych przeksztalcen punkt poczatkowy i koncowy roznia sie o kilka tysiecznych
        P_UV[0].x = Ps_UV.x;
 8006894:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800689e:	601a      	str	r2, [r3, #0]
        P_UV[0].y = Ps_UV.y;
 80068a0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80068aa:	605a      	str	r2, [r3, #4]
        P_UV[rozdzielczosc].x = Pf_UV.x;
 80068ac:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80068b6:	f107 0308 	add.w	r3, r7, #8
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	440b      	add	r3, r1
 80068c0:	601a      	str	r2, [r3, #0]
        P_UV[rozdzielczosc].y = Pf_UV.y;
 80068c2:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	440b      	add	r3, r1
 80068d6:	3304      	adds	r3, #4
 80068d8:	601a      	str	r2, [r3, #0]


        // osie do rzutowania
        punkt_kartezjanski x_axis;
        x_axis.x = 1;
 80068da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80068de:	f207 62c4 	addw	r2, r7, #1732	; 0x6c4
 80068e2:	6013      	str	r3, [r2, #0]
        x_axis.y = 0;
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 80068ec:	6013      	str	r3, [r2, #0]
        x_axis.z = 0;
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	f207 62cc 	addw	r2, r7, #1740	; 0x6cc
 80068f6:	6013      	str	r3, [r2, #0]
        punkt_kartezjanski y_axis;
        y_axis.x = 0;
 80068f8:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
        y_axis.y = 1;
 8006902:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8006906:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800690a:	605a      	str	r2, [r3, #4]
        y_axis.z = 0;
 800690c:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
        punkt_kartezjanski z_axis;
        z_axis.x = 0;
 8006916:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
        z_axis.y = 0;
 8006920:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	605a      	str	r2, [r3, #4]
        z_axis.z = 1;
 800692a:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 800692e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006932:	609a      	str	r2, [r3, #8]

        punkt_kartezjanski P_U_axis = {};
 8006934:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	6053      	str	r3, [r2, #4]
 8006940:	6093      	str	r3, [r2, #8]
 8006942:	60d3      	str	r3, [r2, #12]
        punkt_kartezjanski P_V_axis = {};
 8006944:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	6053      	str	r3, [r2, #4]
 8006950:	6093      	str	r3, [r2, #8]
 8006952:	60d3      	str	r3, [r2, #12]
        punkt_kartezjanski P_UV_axis = {};
 8006954:	f207 6374 	addw	r3, r7, #1652	; 0x674
 8006958:	461a      	mov	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	6053      	str	r3, [r2, #4]
 8006960:	6093      	str	r3, [r2, #8]
 8006962:	60d3      	str	r3, [r2, #12]

        for (int i = 0; i <= rozdzielczosc; i++)
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 37b8 	str.w	r3, [r7, #1976]	; 0x7b8
 800696a:	e092      	b.n	8006a92 <kolowa_interpolacja+0xaaa>
 800696c:	f3af 8000 	nop.w
 8006970:	1a63c1f8 	.word	0x1a63c1f8
 8006974:	404ca5dc 	.word	0x404ca5dc
 8006978:	40c90fdb 	.word	0x40c90fdb
 800697c:	43b40000 	.word	0x43b40000
        {
            //wektory U i V o długościach równych współrzędnym punktu p_uv
        	mnozenie_wektora_przez_skalar(&P_U_axis, &U, P_UV[i].x);
 8006980:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006984:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	4413      	add	r3, r2
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	f207 7214 	addw	r2, r7, #1812	; 0x714
 8006994:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8006998:	eeb0 0a67 	vmov.f32	s0, s15
 800699c:	4611      	mov	r1, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f979 	bl	8006c96 <mnozenie_wektora_przez_skalar>
            mnozenie_wektora_przez_skalar(&P_V_axis, &V, P_UV[i].y);
 80069a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069a8:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	4413      	add	r3, r2
 80069b0:	3304      	adds	r3, #4
 80069b2:	edd3 7a00 	vldr	s15, [r3]
 80069b6:	f207 7204 	addw	r2, r7, #1796	; 0x704
 80069ba:	f207 6384 	addw	r3, r7, #1668	; 0x684
 80069be:	eeb0 0a67 	vmov.f32	s0, s15
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f966 	bl	8006c96 <mnozenie_wektora_przez_skalar>

            //suma wektorów = wektor od p_s do p w układzie XYZ
            dodawanie_wektorow(&P_UV_axis, &P_U_axis, &P_V_axis);
 80069ca:	f207 6284 	addw	r2, r7, #1668	; 0x684
 80069ce:	f207 6194 	addw	r1, r7, #1684	; 0x694
 80069d2:	f207 6374 	addw	r3, r7, #1652	; 0x674
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f988 	bl	8006cec <dodawanie_wektorow>

            //rzutowanie wektora p_uv_axis na osie układu XYZ
            trajektoria_kolowa[i].x = Ps.x + iloczyn_skalarny(&P_UV_axis, &x_axis);
 80069dc:	f107 0320 	add.w	r3, r7, #32
 80069e0:	ed93 8a00 	vldr	s16, [r3]
 80069e4:	f207 62c4 	addw	r2, r7, #1732	; 0x6c4
 80069e8:	f207 6374 	addw	r3, r7, #1652	; 0x674
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f929 	bl	8006c46 <iloczyn_skalarny>
 80069f4:	eef0 7a40 	vmov.f32	s15, s0
 80069f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80069fc:	4a3f      	ldr	r2, [pc, #252]	; (8006afc <kolowa_interpolacja+0xb14>)
 80069fe:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	4413      	add	r3, r2
 8006a06:	edc3 7a00 	vstr	s15, [r3]
            trajektoria_kolowa[i].y = Ps.y + iloczyn_skalarny(&P_UV_axis, &y_axis);
 8006a0a:	f107 0320 	add.w	r3, r7, #32
 8006a0e:	ed93 8a01 	vldr	s16, [r3, #4]
 8006a12:	f207 62b4 	addw	r2, r7, #1716	; 0x6b4
 8006a16:	f207 6374 	addw	r3, r7, #1652	; 0x674
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f912 	bl	8006c46 <iloczyn_skalarny>
 8006a22:	eef0 7a40 	vmov.f32	s15, s0
 8006a26:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006a2a:	4a34      	ldr	r2, [pc, #208]	; (8006afc <kolowa_interpolacja+0xb14>)
 8006a2c:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	4413      	add	r3, r2
 8006a34:	3304      	adds	r3, #4
 8006a36:	edc3 7a00 	vstr	s15, [r3]
            trajektoria_kolowa[i].z = Ps.z + iloczyn_skalarny(&P_UV_axis, &z_axis);
 8006a3a:	f107 0320 	add.w	r3, r7, #32
 8006a3e:	ed93 8a02 	vldr	s16, [r3, #8]
 8006a42:	f207 62a4 	addw	r2, r7, #1700	; 0x6a4
 8006a46:	f207 6374 	addw	r3, r7, #1652	; 0x674
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f8fa 	bl	8006c46 <iloczyn_skalarny>
 8006a52:	eef0 7a40 	vmov.f32	s15, s0
 8006a56:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006a5a:	4a28      	ldr	r2, [pc, #160]	; (8006afc <kolowa_interpolacja+0xb14>)
 8006a5c:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4413      	add	r3, r2
 8006a64:	3308      	adds	r3, #8
 8006a66:	edc3 7a00 	vstr	s15, [r3]
            trajektoria_kolowa[i].t = P_UV[i].t;
 8006a6a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006a6e:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	4413      	add	r3, r2
 8006a76:	330c      	adds	r3, #12
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4920      	ldr	r1, [pc, #128]	; (8006afc <kolowa_interpolacja+0xb14>)
 8006a7c:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	440b      	add	r3, r1
 8006a84:	330c      	adds	r3, #12
 8006a86:	601a      	str	r2, [r3, #0]
        for (int i = 0; i <= rozdzielczosc; i++)
 8006a88:	f8d7 37b8 	ldr.w	r3, [r7, #1976]	; 0x7b8
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	f8c7 37b8 	str.w	r3, [r7, #1976]	; 0x7b8
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f77f af6f 	ble.w	8006980 <kolowa_interpolacja+0x998>
        }
        //tutaj nadpisuje wartosci poniewaz z powyzszych przeksztalcen punkt koncowy rozni sie o kilka tysiecznych
        trajektoria_kolowa[rozdzielczosc].x = Pk.x;
 8006aa2:	f107 0310 	add.w	r3, r7, #16
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4914      	ldr	r1, [pc, #80]	; (8006afc <kolowa_interpolacja+0xb14>)
 8006aaa:	f107 0308 	add.w	r3, r7, #8
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	440b      	add	r3, r1
 8006ab4:	601a      	str	r2, [r3, #0]
        trajektoria_kolowa[rozdzielczosc].y = Pk.y;
 8006ab6:	f107 0310 	add.w	r3, r7, #16
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	490f      	ldr	r1, [pc, #60]	; (8006afc <kolowa_interpolacja+0xb14>)
 8006abe:	f107 0308 	add.w	r3, r7, #8
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3304      	adds	r3, #4
 8006aca:	601a      	str	r2, [r3, #0]
        trajektoria_kolowa[rozdzielczosc].z = Pk.z;
 8006acc:	f107 0310 	add.w	r3, r7, #16
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	490a      	ldr	r1, [pc, #40]	; (8006afc <kolowa_interpolacja+0xb14>)
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	440b      	add	r3, r1
 8006ade:	3308      	adds	r3, #8
 8006ae0:	601a      	str	r2, [r3, #0]

    }
    else printf("BLAD: rozdzielczosc interpolacji musi byc mniejsza niz %d",
    		MAX_ROZDZIELCZOSC_INTERPOLACJI);
}
 8006ae2:	e003      	b.n	8006aec <kolowa_interpolacja+0xb04>
    else printf("BLAD: rozdzielczosc interpolacji musi byc mniejsza niz %d",
 8006ae4:	2164      	movs	r1, #100	; 0x64
 8006ae6:	4806      	ldr	r0, [pc, #24]	; (8006b00 <kolowa_interpolacja+0xb18>)
 8006ae8:	f001 fbe6 	bl	80082b8 <iprintf>
}
 8006aec:	bf00      	nop
 8006aee:	f507 67f8 	add.w	r7, r7, #1984	; 0x7c0
 8006af2:	46bd      	mov	sp, r7
 8006af4:	ecbd 8b02 	vpop	{d8}
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200008fc 	.word	0x200008fc
 8006b00:	0800e0b4 	.word	0x0800e0b4

08006b04 <iloczyn_wektorowy>:

void iloczyn_wektorowy(
		punkt_kartezjanski *pkt_wyj,		// [OUT]
		punkt_kartezjanski *pkt_wej_1,		// [IN]
		punkt_kartezjanski *pkt_wej_2)		// [IN]
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
	pkt_wyj->x = pkt_wej_1->y * pkt_wej_2->z - pkt_wej_1->z * pkt_wej_2->y;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	ed93 7a01 	vldr	s14, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	edc3 7a00 	vstr	s15, [r3]
	pkt_wyj->y = pkt_wej_1->z * pkt_wej_2->x - pkt_wej_1->x * pkt_wej_2->z;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	edd3 7a00 	vldr	s15, [r3]
 8006b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	edd3 6a00 	vldr	s13, [r3]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	edc3 7a01 	vstr	s15, [r3, #4]
	pkt_wyj->z = pkt_wej_1->x * pkt_wej_2->y - pkt_wej_1->y * pkt_wej_2->x;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	ed93 7a00 	vldr	s14, [r3]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	edd3 6a01 	vldr	s13, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	edd3 7a00 	vldr	s15, [r3]
 8006b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <normalizacja>:


void normalizacja(
		punkt_kartezjanski *pkt_wyj,		// [OUT]
		punkt_kartezjanski *pkt_wej)		// [IN]
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	ed2d 8b02 	vpush	{d8}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
	float dlugosc_pkt_wej = sqrtf(powf(pkt_wej->x, 2) + powf(pkt_wej->y, 2) + powf(pkt_wej->z, 2));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	edd3 7a00 	vldr	s15, [r3]
 8006bae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bb6:	f005 ff0d 	bl	800c9d4 <powf>
 8006bba:	eeb0 8a40 	vmov.f32	s16, s0
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006bc4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8006bcc:	f005 ff02 	bl	800c9d4 <powf>
 8006bd0:	eef0 7a40 	vmov.f32	s15, s0
 8006bd4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8006bde:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006be2:	eeb0 0a67 	vmov.f32	s0, s15
 8006be6:	f005 fef5 	bl	800c9d4 <powf>
 8006bea:	eef0 7a40 	vmov.f32	s15, s0
 8006bee:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf6:	f005 ff85 	bl	800cb04 <sqrtf>
 8006bfa:	ed87 0a03 	vstr	s0, [r7, #12]
	pkt_wyj->x = pkt_wej->x / dlugosc_pkt_wej;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	edd3 6a00 	vldr	s13, [r3]
 8006c04:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	edc3 7a00 	vstr	s15, [r3]
	pkt_wyj->y = pkt_wej->y / dlugosc_pkt_wej;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	edd3 6a01 	vldr	s13, [r3, #4]
 8006c18:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	edc3 7a01 	vstr	s15, [r3, #4]
	pkt_wyj->z = pkt_wej->z / dlugosc_pkt_wej;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	ecbd 8b02 	vpop	{d8}
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <iloczyn_skalarny>:


float iloczyn_skalarny(
		punkt_kartezjanski *pkt_wej_1,		// [IN]
		punkt_kartezjanski *pkt_wej_2)		// [IN]
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
	return pkt_wej_1->x * pkt_wej_2->x + pkt_wej_1->y * pkt_wej_2->y + pkt_wej_1->z * pkt_wej_2->z;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	ed93 7a00 	vldr	s14, [r3]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	edd3 7a00 	vldr	s15, [r3]
 8006c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	edd3 6a01 	vldr	s13, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c84:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006c88:	eeb0 0a67 	vmov.f32	s0, s15
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <mnozenie_wektora_przez_skalar>:

void mnozenie_wektora_przez_skalar(
		punkt_kartezjanski *wektor_wyj,		// [OUT]
		punkt_kartezjanski *wektor_wej,		// [IN]
		float skalar)						// [IN]
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	ed87 0a01 	vstr	s0, [r7, #4]
	wektor_wyj->x = wektor_wej->x * skalar;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	ed93 7a00 	vldr	s14, [r3]
 8006caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	edc3 7a00 	vstr	s15, [r3]
	wektor_wyj->y = wektor_wej->y * skalar;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	ed93 7a01 	vldr	s14, [r3, #4]
 8006cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	edc3 7a01 	vstr	s15, [r3, #4]
	wektor_wyj->z = wektor_wej->z * skalar;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	ed93 7a02 	vldr	s14, [r3, #8]
 8006cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <dodawanie_wektorow>:

void dodawanie_wektorow(
		punkt_kartezjanski *wektor_wyj,		// [OUT]
		punkt_kartezjanski *wektor_wej_1,	// [IN]
		punkt_kartezjanski *wektor_wej_2)	// [IN]
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
	wektor_wyj->x = wektor_wej_1->x + wektor_wej_2->x;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	ed93 7a00 	vldr	s14, [r3]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	edd3 7a00 	vldr	s15, [r3]
 8006d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	edc3 7a00 	vstr	s15, [r3]
	wektor_wyj->y = wektor_wej_1->y + wektor_wej_2->y;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	edc3 7a01 	vstr	s15, [r3, #4]
	wektor_wyj->z = wektor_wej_1->z + wektor_wej_2->z;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	ed93 7a02 	vldr	s14, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <HAL_GPIO_EXTI_Callback>:
int krancowka_aktywna = 1;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == X_MIN_Pin || X_MAX_Pin || Y_MIN_Pin ||
			Y_MAX_Pin || Z_MIN_Pin || Z_MAX_Pin) && podczas_kalibracji == 0)
 8006d52:	4b79      	ldr	r3, [pc, #484]	; (8006f38 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
	if ((GPIO_Pin == X_MIN_Pin || X_MAX_Pin || Y_MIN_Pin ||
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d108      	bne.n	8006d6c <HAL_GPIO_EXTI_Callback+0x24>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		Stepper_EndStopHandler(0);
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f000 fad6 	bl	800730c <Stepper_EndStopHandler>
		Stepper_EndStopHandler(1);
 8006d60:	2001      	movs	r0, #1
 8006d62:	f000 fad3 	bl	800730c <Stepper_EndStopHandler>
		Stepper_EndStopHandler(2);
 8006d66:	2002      	movs	r0, #2
 8006d68:	f000 fad0 	bl	800730c <Stepper_EndStopHandler>
	}


	if ((GPIO_Pin == USER_BUTTON_Pin) && podczas_kalibracji == 0)
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d106      	bne.n	8006d82 <HAL_GPIO_EXTI_Callback+0x3a>
 8006d74:	4b70      	ldr	r3, [pc, #448]	; (8006f38 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		stan1 = 1;
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	; (8006f3c <HAL_GPIO_EXTI_Callback+0x1f4>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
	}

	//tutaj do kalibracji od krancowek
	if ((GPIO_Pin == X_MAX_Pin || Y_MAX_Pin || Z_MAX_Pin) && podczas_kalibracji == 1 && krancowka_aktywna == 1)
 8006d82:	4b6d      	ldr	r3, [pc, #436]	; (8006f38 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	f040 80d2 	bne.w	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
 8006d8c:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	f040 80cd 	bne.w	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
	{
		if (dojazd_do_1_krancowki == 0 && dojazd_do_2_krancowki == 0 && dojazd_do_3_krancowki == 0)
 8006d96:	4b6b      	ldr	r3, [pc, #428]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d137      	bne.n	8006e0e <HAL_GPIO_EXTI_Callback+0xc6>
 8006d9e:	4b6a      	ldr	r3, [pc, #424]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x200>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d133      	bne.n	8006e0e <HAL_GPIO_EXTI_Callback+0xc6>
 8006da6:	4b69      	ldr	r3, [pc, #420]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x204>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d12f      	bne.n	8006e0e <HAL_GPIO_EXTI_Callback+0xc6>
		{
			if (GPIO_Pin == X_MAX_Pin)
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db4:	d10c      	bne.n	8006dd0 <HAL_GPIO_EXTI_Callback+0x88>
					{
						krancowka_X = 1;
 8006db6:	4b66      	ldr	r3, [pc, #408]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x208>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
						dojazd_do_1_krancowki = 1;
 8006dbc:	4b61      	ldr	r3, [pc, #388]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(0);
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f000 fa9f 	bl	800730c <Stepper_EndStopHandler>
 8006dce:	e01e      	b.n	8006e0e <HAL_GPIO_EXTI_Callback+0xc6>
					}
			else if (GPIO_Pin == Y_MAX_Pin)
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d10c      	bne.n	8006df0 <HAL_GPIO_EXTI_Callback+0xa8>
					{
						krancowka_Y = 1;
 8006dd6:	4b5f      	ldr	r3, [pc, #380]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x20c>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
						dojazd_do_1_krancowki = 1;
 8006ddc:	4b59      	ldr	r3, [pc, #356]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006de2:	4b57      	ldr	r3, [pc, #348]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(1);
 8006de8:	2001      	movs	r0, #1
 8006dea:	f000 fa8f 	bl	800730c <Stepper_EndStopHandler>
 8006dee:	e00e      	b.n	8006e0e <HAL_GPIO_EXTI_Callback+0xc6>
					}
			else if (GPIO_Pin == Z_MAX_Pin)
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d10b      	bne.n	8006e0e <HAL_GPIO_EXTI_Callback+0xc6>
					{
						krancowka_Z = 1;
 8006df6:	4b58      	ldr	r3, [pc, #352]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x210>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
						dojazd_do_1_krancowki = 1;
 8006dfc:	4b51      	ldr	r3, [pc, #324]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006e02:	4b4f      	ldr	r3, [pc, #316]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(2);
 8006e08:	2002      	movs	r0, #2
 8006e0a:	f000 fa7f 	bl	800730c <Stepper_EndStopHandler>
					}
		}
		if (dojazd_do_1_krancowki == 1 && dojazd_do_2_krancowki == 0 && dojazd_do_3_krancowki == 0)
 8006e0e:	4b4d      	ldr	r3, [pc, #308]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d143      	bne.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
 8006e16:	4b4c      	ldr	r3, [pc, #304]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x200>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d13f      	bne.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
 8006e1e:	4b4b      	ldr	r3, [pc, #300]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x204>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d13b      	bne.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
		{
			if ((GPIO_Pin == X_MAX_Pin) && krancowka_X == 0)
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d110      	bne.n	8006e50 <HAL_GPIO_EXTI_Callback+0x108>
 8006e2e:	4b48      	ldr	r3, [pc, #288]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x208>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <HAL_GPIO_EXTI_Callback+0x108>
					{
						krancowka_X = 1;
 8006e36:	4b46      	ldr	r3, [pc, #280]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x208>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
						dojazd_do_2_krancowki = 1;
 8006e3c:	4b42      	ldr	r3, [pc, #264]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x200>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006e42:	4b3f      	ldr	r3, [pc, #252]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(0);
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f000 fa5f 	bl	800730c <Stepper_EndStopHandler>
 8006e4e:	e026      	b.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
					}
			else if ((GPIO_Pin == Y_MAX_Pin) && krancowka_Y == 0)
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	2b80      	cmp	r3, #128	; 0x80
 8006e54:	d110      	bne.n	8006e78 <HAL_GPIO_EXTI_Callback+0x130>
 8006e56:	4b3f      	ldr	r3, [pc, #252]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x20c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10c      	bne.n	8006e78 <HAL_GPIO_EXTI_Callback+0x130>
					{
						krancowka_Y = 1;
 8006e5e:	4b3d      	ldr	r3, [pc, #244]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x20c>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
						dojazd_do_2_krancowki = 1;
 8006e64:	4b38      	ldr	r3, [pc, #224]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x200>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006e6a:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(1);
 8006e70:	2001      	movs	r0, #1
 8006e72:	f000 fa4b 	bl	800730c <Stepper_EndStopHandler>
 8006e76:	e012      	b.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
					}
			else if ((GPIO_Pin == Z_MAX_Pin) && krancowka_Z == 0)
 8006e78:	88fb      	ldrh	r3, [r7, #6]
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	d10f      	bne.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x210>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <HAL_GPIO_EXTI_Callback+0x156>
					{
						krancowka_Z = 1;
 8006e86:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x210>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]
						dojazd_do_2_krancowki = 1;
 8006e8c:	4b2e      	ldr	r3, [pc, #184]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x200>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(2);
 8006e98:	2002      	movs	r0, #2
 8006e9a:	f000 fa37 	bl	800730c <Stepper_EndStopHandler>
					}
		}
		if (dojazd_do_1_krancowki == 1 && dojazd_do_2_krancowki == 1 && dojazd_do_3_krancowki == 0)
 8006e9e:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d144      	bne.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
 8006ea6:	4b28      	ldr	r3, [pc, #160]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x200>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d140      	bne.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
 8006eae:	4b27      	ldr	r3, [pc, #156]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x204>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d13c      	bne.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
		{
			if ((GPIO_Pin == X_MAX_Pin) && krancowka_X == 0)
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebc:	d110      	bne.n	8006ee0 <HAL_GPIO_EXTI_Callback+0x198>
 8006ebe:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x208>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_GPIO_EXTI_Callback+0x198>
					{
						krancowka_X = 1;
 8006ec6:	4b22      	ldr	r3, [pc, #136]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x208>)
 8006ec8:	2201      	movs	r2, #1
 8006eca:	601a      	str	r2, [r3, #0]
						dojazd_do_3_krancowki = 1;
 8006ecc:	4b1f      	ldr	r3, [pc, #124]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x204>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006ed2:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(0);
 8006ed8:	2000      	movs	r0, #0
 8006eda:	f000 fa17 	bl	800730c <Stepper_EndStopHandler>
 8006ede:	e027      	b.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
					}
			else if ((GPIO_Pin == Y_MAX_Pin) && krancowka_Y == 0)
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d110      	bne.n	8006f08 <HAL_GPIO_EXTI_Callback+0x1c0>
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x20c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <HAL_GPIO_EXTI_Callback+0x1c0>
					{
						krancowka_Y = 1;
 8006eee:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x20c>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
						dojazd_do_3_krancowki = 1;
 8006ef4:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x204>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(1);
 8006f00:	2001      	movs	r0, #1
 8006f02:	f000 fa03 	bl	800730c <Stepper_EndStopHandler>
 8006f06:	e013      	b.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
					}
			else if ((GPIO_Pin == Z_MAX_Pin) && krancowka_Z == 0)
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d110      	bne.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x210>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10c      	bne.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
					{
						krancowka_Z = 1;
 8006f16:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x210>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
						dojazd_do_3_krancowki = 1;
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x204>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
						krancowka_aktywna = 0;
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
						Stepper_EndStopHandler(2);
 8006f28:	2002      	movs	r0, #2
 8006f2a:	f000 f9ef 	bl	800730c <Stepper_EndStopHandler>
					}
		}
	}
}
 8006f2e:	e7ff      	b.n	8006f30 <HAL_GPIO_EXTI_Callback+0x1e8>
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20001580 	.word	0x20001580
 8006f3c:	2000157c 	.word	0x2000157c
 8006f40:	2000000c 	.word	0x2000000c
 8006f44:	20001588 	.word	0x20001588
 8006f48:	2000158c 	.word	0x2000158c
 8006f4c:	20001590 	.word	0x20001590
 8006f50:	20001594 	.word	0x20001594
 8006f54:	20001598 	.word	0x20001598
 8006f58:	2000159c 	.word	0x2000159c

08006f5c <Stepper_Init>:

Stepper_Status_t stepperStatus = STEPPER_OK;


void Stepper_Init(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
	lista_silnikow[0].stepsPerRev = 200 * lista_silnikow[0].uStep;
 8006f60:	4b36      	ldr	r3, [pc, #216]	; (800703c <Stepper_Init+0xe0>)
 8006f62:	7e9b      	ldrb	r3, [r3, #26]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	461a      	mov	r2, r3
 8006f68:	0092      	lsls	r2, r2, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	0091      	lsls	r1, r2, #2
 8006f70:	461a      	mov	r2, r3
 8006f72:	460b      	mov	r3, r1
 8006f74:	4413      	add	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	4b30      	ldr	r3, [pc, #192]	; (800703c <Stepper_Init+0xe0>)
 8006f7c:	831a      	strh	r2, [r3, #24]
	lista_silnikow[1].stepsPerRev = 200 * lista_silnikow[1].uStep;
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	; (800703c <Stepper_Init+0xe0>)
 8006f80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	0091      	lsls	r1, r2, #2
 8006f90:	461a      	mov	r2, r3
 8006f92:	460b      	mov	r3, r1
 8006f94:	4413      	add	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	4b28      	ldr	r3, [pc, #160]	; (800703c <Stepper_Init+0xe0>)
 8006f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	lista_silnikow[2].stepsPerRev = 200 * lista_silnikow[2].uStep;
 8006fa0:	4b26      	ldr	r3, [pc, #152]	; (800703c <Stepper_Init+0xe0>)
 8006fa2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	0091      	lsls	r1, r2, #2
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	4b1f      	ldr	r3, [pc, #124]	; (800703c <Stepper_Init+0xe0>)
 8006fbe:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	lista_silnikow[0].mmPerStep = lista_silnikow[0].pitch / lista_silnikow[0].stepsPerRev;
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	; (800703c <Stepper_Init+0xe0>)
 8006fc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	; (800703c <Stepper_Init+0xe0>)
 8006fca:	8b1b      	ldrh	r3, [r3, #24]
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd8:	4b18      	ldr	r3, [pc, #96]	; (800703c <Stepper_Init+0xe0>)
 8006fda:	edc3 7a08 	vstr	s15, [r3, #32]
	lista_silnikow[1].mmPerStep = lista_silnikow[1].pitch / lista_silnikow[1].stepsPerRev;
 8006fde:	4b17      	ldr	r3, [pc, #92]	; (800703c <Stepper_Init+0xe0>)
 8006fe0:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <Stepper_Init+0xe0>)
 8006fe6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff6:	4b11      	ldr	r3, [pc, #68]	; (800703c <Stepper_Init+0xe0>)
 8006ff8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	lista_silnikow[2].mmPerStep = lista_silnikow[2].pitch / lista_silnikow[2].stepsPerRev;
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <Stepper_Init+0xe0>)
 8006ffe:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <Stepper_Init+0xe0>)
 8007004:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <Stepper_Init+0xe0>)
 8007016:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

	TIM_H_X.Instance->CCR1 = 2;
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <Stepper_Init+0xe4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2202      	movs	r2, #2
 8007020:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_H_Y.Instance->CCR1 = 2;
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <Stepper_Init+0xe8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2202      	movs	r2, #2
 8007028:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_H_Z.Instance->CCR1 = 2;
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <Stepper_Init+0xec>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2202      	movs	r2, #2
 8007030:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007032:	bf00      	nop
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	20000010 	.word	0x20000010
 8007040:	200016a0 	.word	0x200016a0
 8007044:	200016e0 	.word	0x200016e0
 8007048:	20001620 	.word	0x20001620

0800704c <Stepper_Update>:


void Stepper_Update(int i)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	lista_silnikow[i].absPos += (lista_silnikow[i].dir) ? (-lista_silnikow[i].mmPerStep) : (lista_silnikow[i].mmPerStep);
 8007054:	4940      	ldr	r1, [pc, #256]	; (8007158 <Stepper_Update+0x10c>)
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3334      	adds	r3, #52	; 0x34
 8007064:	ed93 7a00 	vldr	s14, [r3]
 8007068:	493b      	ldr	r1, [pc, #236]	; (8007158 <Stepper_Update+0x10c>)
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3330      	adds	r3, #48	; 0x30
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <Stepper_Update+0x4c>
 800707e:	4936      	ldr	r1, [pc, #216]	; (8007158 <Stepper_Update+0x10c>)
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3320      	adds	r3, #32
 800708e:	edd3 7a00 	vldr	s15, [r3]
 8007092:	eef1 7a67 	vneg.f32	s15, s15
 8007096:	e009      	b.n	80070ac <Stepper_Update+0x60>
 8007098:	492f      	ldr	r1, [pc, #188]	; (8007158 <Stepper_Update+0x10c>)
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3320      	adds	r3, #32
 80070a8:	edd3 7a00 	vldr	s15, [r3]
 80070ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070b0:	4929      	ldr	r1, [pc, #164]	; (8007158 <Stepper_Update+0x10c>)
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	3334      	adds	r3, #52	; 0x34
 80070c0:	edc3 7a00 	vstr	s15, [r3]
	lista_silnikow[i].stepsCount--;
 80070c4:	4924      	ldr	r1, [pc, #144]	; (8007158 <Stepper_Update+0x10c>)
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	332c      	adds	r3, #44	; 0x2c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	1e59      	subs	r1, r3, #1
 80070d8:	481f      	ldr	r0, [pc, #124]	; (8007158 <Stepper_Update+0x10c>)
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4403      	add	r3, r0
 80070e6:	332c      	adds	r3, #44	; 0x2c
 80070e8:	6019      	str	r1, [r3, #0]
	if (lista_silnikow[i].stepsCount == 0)
 80070ea:	491b      	ldr	r1, [pc, #108]	; (8007158 <Stepper_Update+0x10c>)
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	332c      	adds	r3, #44	; 0x2c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d127      	bne.n	8007150 <Stepper_Update+0x104>
	{
		lista_silnikow[i].moving_f = 0;
 8007100:	4915      	ldr	r1, [pc, #84]	; (8007158 <Stepper_Update+0x10c>)
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3328      	adds	r3, #40	; 0x28
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop_IT(lista_silnikow[i].timInstance, lista_silnikow[i].timChannel);
 8007114:	4910      	ldr	r1, [pc, #64]	; (8007158 <Stepper_Update+0x10c>)
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	490c      	ldr	r1, [pc, #48]	; (8007158 <Stepper_Update+0x10c>)
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	3304      	adds	r3, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4619      	mov	r1, r3
 8007138:	f7fc fd14 	bl	8003b64 <HAL_TIM_PWM_Stop_IT>
		Stepper_Disable(&lista_silnikow[i]);
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4a04      	ldr	r2, [pc, #16]	; (8007158 <Stepper_Update+0x10c>)
 8007148:	4413      	add	r3, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f806 	bl	800715c <Stepper_Disable>
	}
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000010 	.word	0x20000010

0800715c <Stepper_Disable>:
			instancja_silnika->enPinMask, GPIO_PIN_RESET);
}


void Stepper_Disable(Stepper_t *instancja_silnika)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	instancja_silnika->isEnabled = 0;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	HAL_GPIO_WritePin(instancja_silnika->enGpioPort,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6918      	ldr	r0, [r3, #16]
			instancja_silnika->enPinMask, GPIO_PIN_SET);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_WritePin(instancja_silnika->enGpioPort,
 8007174:	b29b      	uxth	r3, r3
 8007176:	2201      	movs	r2, #1
 8007178:	4619      	mov	r1, r3
 800717a:	f7fb ffa9 	bl	80030d0 <HAL_GPIO_WritePin>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <Stepper_EnableAll>:


void Stepper_EnableAll(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LICZBA_SILNIKOW; ++i)
 800718e:	2300      	movs	r3, #0
 8007190:	71fb      	strb	r3, [r7, #7]
 8007192:	e023      	b.n	80071dc <Stepper_EnableAll+0x54>
	{
		HAL_GPIO_WritePin(lista_silnikow[i].enGpioPort,
 8007194:	79fa      	ldrb	r2, [r7, #7]
 8007196:	4915      	ldr	r1, [pc, #84]	; (80071ec <Stepper_EnableAll+0x64>)
 8007198:	4613      	mov	r3, r2
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	3310      	adds	r3, #16
 80071a4:	6818      	ldr	r0, [r3, #0]
				lista_silnikow[i].enPinMask, GPIO_PIN_RESET);
 80071a6:	79fa      	ldrb	r2, [r7, #7]
 80071a8:	4910      	ldr	r1, [pc, #64]	; (80071ec <Stepper_EnableAll+0x64>)
 80071aa:	4613      	mov	r3, r2
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3314      	adds	r3, #20
 80071b6:	681b      	ldr	r3, [r3, #0]
		HAL_GPIO_WritePin(lista_silnikow[i].enGpioPort,
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2200      	movs	r2, #0
 80071bc:	4619      	mov	r1, r3
 80071be:	f7fb ff87 	bl	80030d0 <HAL_GPIO_WritePin>
		lista_silnikow[i].isEnabled = 1;
 80071c2:	79fa      	ldrb	r2, [r7, #7]
 80071c4:	4909      	ldr	r1, [pc, #36]	; (80071ec <Stepper_EnableAll+0x64>)
 80071c6:	4613      	mov	r3, r2
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	3329      	adds	r3, #41	; 0x29
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < LICZBA_SILNIKOW; ++i)
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	3301      	adds	r3, #1
 80071da:	71fb      	strb	r3, [r7, #7]
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d9d8      	bls.n	8007194 <Stepper_EnableAll+0xc>
	}
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000010 	.word	0x20000010

080071f0 <Stepper_moveAbsPos>:


Stepper_Status_t Stepper_moveAbsPos(Stepper_t *instancja_silnika,
		float pozycja,
		float predkosc)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80071fc:	edc7 0a01 	vstr	s1, [r7, #4]
	if (!instancja_silnika->isEnabled) return STEPPER_DISABLED;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <Stepper_moveAbsPos+0x1e>
 800720a:	2301      	movs	r3, #1
 800720c:	e075      	b.n	80072fa <Stepper_moveAbsPos+0x10a>
	if (instancja_silnika->moving_f) return STEPPER_MOVE_INTERRUPT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <Stepper_moveAbsPos+0x2c>
 8007218:	2303      	movs	r3, #3
 800721a:	e06e      	b.n	80072fa <Stepper_moveAbsPos+0x10a>
	//if (pozycja < JOINT_MIN_POS || pozycja > JOINT_MAX_POS) return STEPPER_OUT_OF_RANGE;
	if (predkosc == 0) return STEPPER_OK;
 800721c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007220:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	d101      	bne.n	800722e <Stepper_moveAbsPos+0x3e>
 800722a:	2300      	movs	r3, #0
 800722c:	e065      	b.n	80072fa <Stepper_moveAbsPos+0x10a>

	// Zmiana czestotliwosci PWM na podstawie zadanej predkosci
	TIM_HandleTypeDef *tmpTim = instancja_silnika->timInstance;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	61fb      	str	r3, [r7, #28]
	float czestotliwosc_pwm = (predkosc / instancja_silnika->mmPerStep); 				// mm/s -> steps/s (PWM freq)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	ed93 7a08 	vldr	s14, [r3, #32]
 800723a:	edd7 6a01 	vldr	s13, [r7, #4]
 800723e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007242:	edc7 7a06 	vstr	s15, [r7, #24]
	WRITE_REG(tmpTim->Instance->PSC, (uint32_t) 50000000.0F / czestotliwosc_pwm);
 8007246:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007304 <Stepper_moveAbsPos+0x114>
 800724a:	ed97 7a06 	vldr	s14, [r7, #24]
 800724e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725a:	ee17 2a90 	vmov	r2, s15
 800725e:	629a      	str	r2, [r3, #40]	; 0x28

	float dystans = pozycja - instancja_silnika->absPos;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007266:	ed97 7a02 	vldr	s14, [r7, #8]
 800726a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800726e:	edc7 7a05 	vstr	s15, [r7, #20]

	// Wybranie kierunku obrotu
	instancja_silnika->dir = (dystans < 0) ? (1) : (0);
 8007272:	edd7 7a05 	vldr	s15, [r7, #20]
 8007276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727e:	bf4c      	ite	mi
 8007280:	2301      	movmi	r3, #1
 8007282:	2300      	movpl	r3, #0
 8007284:	b2db      	uxtb	r3, r3
 8007286:	461a      	mov	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dystans = fabsf(dystans);
 800728e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007292:	eef0 7ae7 	vabs.f32	s15, s15
 8007296:	edc7 7a05 	vstr	s15, [r7, #20]

	// Obliczenie liczby krokow do pokonania
	instancja_silnika->stepsCount = (uint32_t) roundf(200.0F * dystans);
 800729a:	edd7 7a05 	vldr	s15, [r7, #20]
 800729e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007308 <Stepper_moveAbsPos+0x118>
 80072a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072a6:	eeb0 0a67 	vmov.f32	s0, s15
 80072aa:	f005 faf5 	bl	800c898 <roundf>
 80072ae:	eef0 7a40 	vmov.f32	s15, s0
 80072b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b6:	ee17 2a90 	vmov	r2, s15
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c
	if (instancja_silnika->stepsCount == 0) return STEPPER_OK;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <Stepper_moveAbsPos+0xda>
 80072c6:	2300      	movs	r3, #0
 80072c8:	e017      	b.n	80072fa <Stepper_moveAbsPos+0x10a>

	instancja_silnika->moving_f = 1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// Uruchomienie PWM (zostabie wylaczony w przerwaniu jak wykona zadana liczbe krokow)
	HAL_GPIO_WritePin(instancja_silnika->dirGpioPort, instancja_silnika->dirPinMask, instancja_silnika->dir);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6898      	ldr	r0, [r3, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	b299      	uxth	r1, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072e2:	461a      	mov	r2, r3
 80072e4:	f7fb fef4 	bl	80030d0 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(instancja_silnika->timInstance, instancja_silnika->timChannel);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7fc fbbe 	bl	8003a74 <HAL_TIM_PWM_Start_IT>

	return STEPPER_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3720      	adds	r7, #32
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	4c3ebc20 	.word	0x4c3ebc20
 8007308:	43480000 	.word	0x43480000

0800730c <Stepper_EndStopHandler>:
	return STEPPER_OK;
}


void Stepper_EndStopHandler(int i)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_IT(lista_silnikow[i].timInstance, lista_silnikow[i].timChannel);
 8007314:	491a      	ldr	r1, [pc, #104]	; (8007380 <Stepper_EndStopHandler+0x74>)
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	4916      	ldr	r1, [pc, #88]	; (8007380 <Stepper_EndStopHandler+0x74>)
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	3304      	adds	r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4619      	mov	r1, r3
 8007338:	f7fc fc14 	bl	8003b64 <HAL_TIM_PWM_Stop_IT>
	lista_silnikow[i].moving_f = 0;
 800733c:	4910      	ldr	r1, [pc, #64]	; (8007380 <Stepper_EndStopHandler+0x74>)
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	3328      	adds	r3, #40	; 0x28
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
	lista_silnikow[i].stepsCount = 0;
 8007350:	490b      	ldr	r1, [pc, #44]	; (8007380 <Stepper_EndStopHandler+0x74>)
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	332c      	adds	r3, #44	; 0x2c
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
	Stepper_Disable(&lista_silnikow[i]);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4a04      	ldr	r2, [pc, #16]	; (8007380 <Stepper_EndStopHandler+0x74>)
 8007370:	4413      	add	r3, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fef2 	bl	800715c <Stepper_Disable>
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000010 	.word	0x20000010

08007384 <HAL_TIM_PWM_PulseFinishedCallback>:


// Obsluga przerwan PWM krokowcow oraz serw
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM_H_X.Instance)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d103      	bne.n	80073a0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
	{
		Stepper_Update(0);
 8007398:	2000      	movs	r0, #0
 800739a:	f7ff fe57 	bl	800704c <Stepper_Update>
	}
	else if (htim->Instance == TIM_H_Z.Instance)
	{
		Stepper_Update(2);
	}
}
 800739e:	e012      	b.n	80073c6 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
	else if (htim->Instance == TIM_H_Y.Instance)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d103      	bne.n	80073b4 <HAL_TIM_PWM_PulseFinishedCallback+0x30>
		Stepper_Update(1);
 80073ac:	2001      	movs	r0, #1
 80073ae:	f7ff fe4d 	bl	800704c <Stepper_Update>
}
 80073b2:	e008      	b.n	80073c6 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
	else if (htim->Instance == TIM_H_Z.Instance)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d102      	bne.n	80073c6 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
		Stepper_Update(2);
 80073c0:	2002      	movs	r0, #2
 80073c2:	f7ff fe43 	bl	800704c <Stepper_Update>
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200016a0 	.word	0x200016a0
 80073d4:	200016e0 	.word	0x200016e0
 80073d8:	20001620 	.word	0x20001620

080073dc <__io_putchar>:

int ruch_robotem = 0;


int __io_putchar(int ch)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b0a      	cmp	r3, #10
 80073e8:	d109      	bne.n	80073fe <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80073ea:	230d      	movs	r3, #13
 80073ec:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80073ee:	f107 010f 	add.w	r1, r7, #15
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	2201      	movs	r2, #1
 80073f8:	4807      	ldr	r0, [pc, #28]	; (8007418 <__io_putchar+0x3c>)
 80073fa:	f7fd fa96 	bl	800492a <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80073fe:	1d39      	adds	r1, r7, #4
 8007400:	f04f 33ff 	mov.w	r3, #4294967295
 8007404:	2201      	movs	r2, #1
 8007406:	4804      	ldr	r0, [pc, #16]	; (8007418 <__io_putchar+0x3c>)
 8007408:	f7fd fa8f 	bl	800492a <HAL_UART_Transmit>
    return 1;
 800740c:	2301      	movs	r3, #1
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20001780 	.word	0x20001780

0800741c <odbior_danych_z_aplikacji>:



void odbior_danych_z_aplikacji(uint8_t value)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n')
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2b0d      	cmp	r3, #13
 800742a:	d002      	beq.n	8007432 <odbior_danych_z_aplikacji+0x16>
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b0a      	cmp	r3, #10
 8007430:	d123      	bne.n	800747a <odbior_danych_z_aplikacji+0x5e>
	{
		if (line_length > 0)
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d02f      	beq.n	800749a <odbior_danych_z_aplikacji+0x7e>
		{
			line_buffer[line_length] = '\0';
 800743a:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1a      	ldr	r2, [pc, #104]	; (80074a8 <odbior_danych_z_aplikacji+0x8c>)
 8007440:	2100      	movs	r1, #0
 8007442:	54d1      	strb	r1, [r2, r3]
			printf("Otrzymano: %s\n", line_buffer);
 8007444:	4918      	ldr	r1, [pc, #96]	; (80074a8 <odbior_danych_z_aplikacji+0x8c>)
 8007446:	4819      	ldr	r0, [pc, #100]	; (80074ac <odbior_danych_z_aplikacji+0x90>)
 8007448:	f000 ff36 	bl	80082b8 <iprintf>

			if (strcmp(line_buffer, "ruch_efektorem") == 0)
 800744c:	4918      	ldr	r1, [pc, #96]	; (80074b0 <odbior_danych_z_aplikacji+0x94>)
 800744e:	4816      	ldr	r0, [pc, #88]	; (80074a8 <odbior_danych_z_aplikacji+0x8c>)
 8007450:	f7f8 fec6 	bl	80001e0 <strcmp>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <odbior_danych_z_aplikacji+0x4c>
			{
				ruch_robotem = 1;
 800745a:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <odbior_danych_z_aplikacji+0x98>)
 800745c:	2201      	movs	r2, #1
 800745e:	601a      	str	r2, [r3, #0]
				printf("Robot uruchamia przejazd efektorem!\n");
 8007460:	4815      	ldr	r0, [pc, #84]	; (80074b8 <odbior_danych_z_aplikacji+0x9c>)
 8007462:	f000 ffaf 	bl	80083c4 <puts>
 8007466:	e004      	b.n	8007472 <odbior_danych_z_aplikacji+0x56>
			}
			else
			{
				point_code = line_buffer;
 8007468:	4b14      	ldr	r3, [pc, #80]	; (80074bc <odbior_danych_z_aplikacji+0xa0>)
 800746a:	4a0f      	ldr	r2, [pc, #60]	; (80074a8 <odbior_danych_z_aplikacji+0x8c>)
 800746c:	601a      	str	r2, [r3, #0]
				przypisanie_danych_do_zmiennych();
 800746e:	f000 f827 	bl	80074c0 <przypisanie_danych_do_zmiennych>
			}
			line_length = 0;
 8007472:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
		if (line_length > 0)
 8007478:	e00f      	b.n	800749a <odbior_danych_z_aplikacji+0x7e>
		}
	}
	else
	{
		if (line_length >= LINE_MAX_LENGTH)
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b4f      	cmp	r3, #79	; 0x4f
 8007480:	d902      	bls.n	8007488 <odbior_danych_z_aplikacji+0x6c>
		{
			line_length = 0;
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++] = value;
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	4905      	ldr	r1, [pc, #20]	; (80074a4 <odbior_danych_z_aplikacji+0x88>)
 8007490:	600a      	str	r2, [r1, #0]
 8007492:	4905      	ldr	r1, [pc, #20]	; (80074a8 <odbior_danych_z_aplikacji+0x8c>)
 8007494:	79fa      	ldrb	r2, [r7, #7]
 8007496:	54ca      	strb	r2, [r1, r3]
	}
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	200015f4 	.word	0x200015f4
 80074a8:	200015a0 	.word	0x200015a0
 80074ac:	0800e0f0 	.word	0x0800e0f0
 80074b0:	0800e100 	.word	0x0800e100
 80074b4:	20001610 	.word	0x20001610
 80074b8:	0800e110 	.word	0x0800e110
 80074bc:	200015f8 	.word	0x200015f8

080074c0 <przypisanie_danych_do_zmiennych>:



void przypisanie_danych_do_zmiennych(void)
{
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	b089      	sub	sp, #36	; 0x24
 80074c6:	af08      	add	r7, sp, #32
	sscanf(line_buffer, "%f:%d:%f:%f:%f", &rodzaj_interpolacji, &rozdzielczosc_interpolacji, &wspolrzedna_X, &wspolrzedna_Y, &wspolrzedna_Z);
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <przypisanie_danych_do_zmiennych+0x80>)
 80074ca:	9302      	str	r3, [sp, #8]
 80074cc:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <przypisanie_danych_do_zmiennych+0x84>)
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <przypisanie_danych_do_zmiennych+0x88>)
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <przypisanie_danych_do_zmiennych+0x8c>)
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <przypisanie_danych_do_zmiennych+0x90>)
 80074d8:	491e      	ldr	r1, [pc, #120]	; (8007554 <przypisanie_danych_do_zmiennych+0x94>)
 80074da:	481f      	ldr	r0, [pc, #124]	; (8007558 <przypisanie_danych_do_zmiennych+0x98>)
 80074dc:	f000 ffa0 	bl	8008420 <siscanf>
	printf("interpolacja: G%.0f   rozdzielczosc: %d   wspol_X: %.3f   wspol_Y: %.3f   wspol_Z: %.3f\n",
 80074e0:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <przypisanie_danych_do_zmiennych+0x90>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 f847 	bl	8000578 <__aeabi_f2d>
 80074ea:	4682      	mov	sl, r0
 80074ec:	468b      	mov	fp, r1
 80074ee:	4b17      	ldr	r3, [pc, #92]	; (800754c <przypisanie_danych_do_zmiennych+0x8c>)
 80074f0:	681e      	ldr	r6, [r3, #0]
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <przypisanie_danych_do_zmiennych+0x88>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7f9 f83e 	bl	8000578 <__aeabi_f2d>
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <przypisanie_danych_do_zmiennych+0x84>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f7f9 f837 	bl	8000578 <__aeabi_f2d>
 800750a:	4680      	mov	r8, r0
 800750c:	4689      	mov	r9, r1
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <przypisanie_danych_do_zmiennych+0x80>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f7f9 f830 	bl	8000578 <__aeabi_f2d>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007520:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007524:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007528:	9600      	str	r6, [sp, #0]
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	480b      	ldr	r0, [pc, #44]	; (800755c <przypisanie_danych_do_zmiennych+0x9c>)
 8007530:	f000 fec2 	bl	80082b8 <iprintf>
			rodzaj_interpolacji, rozdzielczosc_interpolacji, wspolrzedna_X, wspolrzedna_Y, wspolrzedna_Z);
}
 8007534:	bf00      	nop
 8007536:	3704      	adds	r7, #4
 8007538:	46bd      	mov	sp, r7
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	bf00      	nop
 8007540:	2000160c 	.word	0x2000160c
 8007544:	20001608 	.word	0x20001608
 8007548:	20001604 	.word	0x20001604
 800754c:	20001600 	.word	0x20001600
 8007550:	200015fc 	.word	0x200015fc
 8007554:	0800e134 	.word	0x0800e134
 8007558:	200015a0 	.word	0x200015a0
 800755c:	0800e144 	.word	0x0800e144

08007560 <__errno>:
 8007560:	4b01      	ldr	r3, [pc, #4]	; (8007568 <__errno+0x8>)
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	200000c4 	.word	0x200000c4

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4d0d      	ldr	r5, [pc, #52]	; (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	; (80075a8 <__libc_init_array+0x3c>)
 8007572:	1b64      	subs	r4, r4, r5
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2600      	movs	r6, #0
 8007578:	42a6      	cmp	r6, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4d0b      	ldr	r5, [pc, #44]	; (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	; (80075b0 <__libc_init_array+0x44>)
 8007580:	f006 fd64 	bl	800e04c <_init>
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2600      	movs	r6, #0
 800758a:	42a6      	cmp	r6, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f855 3b04 	ldr.w	r3, [r5], #4
 8007594:	4798      	blx	r3
 8007596:	3601      	adds	r6, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f855 3b04 	ldr.w	r3, [r5], #4
 800759e:	4798      	blx	r3
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	0800eac4 	.word	0x0800eac4
 80075a8:	0800eac4 	.word	0x0800eac4
 80075ac:	0800eac4 	.word	0x0800eac4
 80075b0:	0800eac8 	.word	0x0800eac8

080075b4 <memset>:
 80075b4:	4402      	add	r2, r0
 80075b6:	4603      	mov	r3, r0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d100      	bne.n	80075be <memset+0xa>
 80075bc:	4770      	bx	lr
 80075be:	f803 1b01 	strb.w	r1, [r3], #1
 80075c2:	e7f9      	b.n	80075b8 <memset+0x4>

080075c4 <__cvt>:
 80075c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	ec55 4b10 	vmov	r4, r5, d0
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	460e      	mov	r6, r1
 80075d0:	4619      	mov	r1, r3
 80075d2:	462b      	mov	r3, r5
 80075d4:	bfbb      	ittet	lt
 80075d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075da:	461d      	movlt	r5, r3
 80075dc:	2300      	movge	r3, #0
 80075de:	232d      	movlt	r3, #45	; 0x2d
 80075e0:	700b      	strb	r3, [r1, #0]
 80075e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075e8:	4691      	mov	r9, r2
 80075ea:	f023 0820 	bic.w	r8, r3, #32
 80075ee:	bfbc      	itt	lt
 80075f0:	4622      	movlt	r2, r4
 80075f2:	4614      	movlt	r4, r2
 80075f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075f8:	d005      	beq.n	8007606 <__cvt+0x42>
 80075fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075fe:	d100      	bne.n	8007602 <__cvt+0x3e>
 8007600:	3601      	adds	r6, #1
 8007602:	2102      	movs	r1, #2
 8007604:	e000      	b.n	8007608 <__cvt+0x44>
 8007606:	2103      	movs	r1, #3
 8007608:	ab03      	add	r3, sp, #12
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	ab02      	add	r3, sp, #8
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	ec45 4b10 	vmov	d0, r4, r5
 8007614:	4653      	mov	r3, sl
 8007616:	4632      	mov	r2, r6
 8007618:	f001 ff96 	bl	8009548 <_dtoa_r>
 800761c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007620:	4607      	mov	r7, r0
 8007622:	d102      	bne.n	800762a <__cvt+0x66>
 8007624:	f019 0f01 	tst.w	r9, #1
 8007628:	d022      	beq.n	8007670 <__cvt+0xac>
 800762a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800762e:	eb07 0906 	add.w	r9, r7, r6
 8007632:	d110      	bne.n	8007656 <__cvt+0x92>
 8007634:	783b      	ldrb	r3, [r7, #0]
 8007636:	2b30      	cmp	r3, #48	; 0x30
 8007638:	d10a      	bne.n	8007650 <__cvt+0x8c>
 800763a:	2200      	movs	r2, #0
 800763c:	2300      	movs	r3, #0
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fa59 	bl	8000af8 <__aeabi_dcmpeq>
 8007646:	b918      	cbnz	r0, 8007650 <__cvt+0x8c>
 8007648:	f1c6 0601 	rsb	r6, r6, #1
 800764c:	f8ca 6000 	str.w	r6, [sl]
 8007650:	f8da 3000 	ldr.w	r3, [sl]
 8007654:	4499      	add	r9, r3
 8007656:	2200      	movs	r2, #0
 8007658:	2300      	movs	r3, #0
 800765a:	4620      	mov	r0, r4
 800765c:	4629      	mov	r1, r5
 800765e:	f7f9 fa4b 	bl	8000af8 <__aeabi_dcmpeq>
 8007662:	b108      	cbz	r0, 8007668 <__cvt+0xa4>
 8007664:	f8cd 900c 	str.w	r9, [sp, #12]
 8007668:	2230      	movs	r2, #48	; 0x30
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	454b      	cmp	r3, r9
 800766e:	d307      	bcc.n	8007680 <__cvt+0xbc>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007674:	1bdb      	subs	r3, r3, r7
 8007676:	4638      	mov	r0, r7
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	b004      	add	sp, #16
 800767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007680:	1c59      	adds	r1, r3, #1
 8007682:	9103      	str	r1, [sp, #12]
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e7f0      	b.n	800766a <__cvt+0xa6>

08007688 <__exponent>:
 8007688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768a:	4603      	mov	r3, r0
 800768c:	2900      	cmp	r1, #0
 800768e:	bfb8      	it	lt
 8007690:	4249      	neglt	r1, r1
 8007692:	f803 2b02 	strb.w	r2, [r3], #2
 8007696:	bfb4      	ite	lt
 8007698:	222d      	movlt	r2, #45	; 0x2d
 800769a:	222b      	movge	r2, #43	; 0x2b
 800769c:	2909      	cmp	r1, #9
 800769e:	7042      	strb	r2, [r0, #1]
 80076a0:	dd2a      	ble.n	80076f8 <__exponent+0x70>
 80076a2:	f10d 0407 	add.w	r4, sp, #7
 80076a6:	46a4      	mov	ip, r4
 80076a8:	270a      	movs	r7, #10
 80076aa:	46a6      	mov	lr, r4
 80076ac:	460a      	mov	r2, r1
 80076ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80076b2:	fb07 1516 	mls	r5, r7, r6, r1
 80076b6:	3530      	adds	r5, #48	; 0x30
 80076b8:	2a63      	cmp	r2, #99	; 0x63
 80076ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80076be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076c2:	4631      	mov	r1, r6
 80076c4:	dcf1      	bgt.n	80076aa <__exponent+0x22>
 80076c6:	3130      	adds	r1, #48	; 0x30
 80076c8:	f1ae 0502 	sub.w	r5, lr, #2
 80076cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076d0:	1c44      	adds	r4, r0, #1
 80076d2:	4629      	mov	r1, r5
 80076d4:	4561      	cmp	r1, ip
 80076d6:	d30a      	bcc.n	80076ee <__exponent+0x66>
 80076d8:	f10d 0209 	add.w	r2, sp, #9
 80076dc:	eba2 020e 	sub.w	r2, r2, lr
 80076e0:	4565      	cmp	r5, ip
 80076e2:	bf88      	it	hi
 80076e4:	2200      	movhi	r2, #0
 80076e6:	4413      	add	r3, r2
 80076e8:	1a18      	subs	r0, r3, r0
 80076ea:	b003      	add	sp, #12
 80076ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076f6:	e7ed      	b.n	80076d4 <__exponent+0x4c>
 80076f8:	2330      	movs	r3, #48	; 0x30
 80076fa:	3130      	adds	r1, #48	; 0x30
 80076fc:	7083      	strb	r3, [r0, #2]
 80076fe:	70c1      	strb	r1, [r0, #3]
 8007700:	1d03      	adds	r3, r0, #4
 8007702:	e7f1      	b.n	80076e8 <__exponent+0x60>

08007704 <_printf_float>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	ed2d 8b02 	vpush	{d8}
 800770c:	b08d      	sub	sp, #52	; 0x34
 800770e:	460c      	mov	r4, r1
 8007710:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007714:	4616      	mov	r6, r2
 8007716:	461f      	mov	r7, r3
 8007718:	4605      	mov	r5, r0
 800771a:	f003 fa27 	bl	800ab6c <_localeconv_r>
 800771e:	f8d0 a000 	ldr.w	sl, [r0]
 8007722:	4650      	mov	r0, sl
 8007724:	f7f8 fd66 	bl	80001f4 <strlen>
 8007728:	2300      	movs	r3, #0
 800772a:	930a      	str	r3, [sp, #40]	; 0x28
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	f8d8 3000 	ldr.w	r3, [r8]
 8007734:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007738:	3307      	adds	r3, #7
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	f103 0208 	add.w	r2, r3, #8
 8007742:	f8c8 2000 	str.w	r2, [r8]
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800774e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007756:	9307      	str	r3, [sp, #28]
 8007758:	f8cd 8018 	str.w	r8, [sp, #24]
 800775c:	ee08 0a10 	vmov	s16, r0
 8007760:	4b9f      	ldr	r3, [pc, #636]	; (80079e0 <_printf_float+0x2dc>)
 8007762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007766:	f04f 32ff 	mov.w	r2, #4294967295
 800776a:	f7f9 f9f7 	bl	8000b5c <__aeabi_dcmpun>
 800776e:	bb88      	cbnz	r0, 80077d4 <_printf_float+0xd0>
 8007770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007774:	4b9a      	ldr	r3, [pc, #616]	; (80079e0 <_printf_float+0x2dc>)
 8007776:	f04f 32ff 	mov.w	r2, #4294967295
 800777a:	f7f9 f9d1 	bl	8000b20 <__aeabi_dcmple>
 800777e:	bb48      	cbnz	r0, 80077d4 <_printf_float+0xd0>
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f9 f9c0 	bl	8000b0c <__aeabi_dcmplt>
 800778c:	b110      	cbz	r0, 8007794 <_printf_float+0x90>
 800778e:	232d      	movs	r3, #45	; 0x2d
 8007790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007794:	4b93      	ldr	r3, [pc, #588]	; (80079e4 <_printf_float+0x2e0>)
 8007796:	4894      	ldr	r0, [pc, #592]	; (80079e8 <_printf_float+0x2e4>)
 8007798:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800779c:	bf94      	ite	ls
 800779e:	4698      	movls	r8, r3
 80077a0:	4680      	movhi	r8, r0
 80077a2:	2303      	movs	r3, #3
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	9b05      	ldr	r3, [sp, #20]
 80077a8:	f023 0204 	bic.w	r2, r3, #4
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	f04f 0900 	mov.w	r9, #0
 80077b2:	9700      	str	r7, [sp, #0]
 80077b4:	4633      	mov	r3, r6
 80077b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80077b8:	4621      	mov	r1, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	f000 f9d8 	bl	8007b70 <_printf_common>
 80077c0:	3001      	adds	r0, #1
 80077c2:	f040 8090 	bne.w	80078e6 <_printf_float+0x1e2>
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	b00d      	add	sp, #52	; 0x34
 80077cc:	ecbd 8b02 	vpop	{d8}
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f9 f9be 	bl	8000b5c <__aeabi_dcmpun>
 80077e0:	b140      	cbz	r0, 80077f4 <_printf_float+0xf0>
 80077e2:	464b      	mov	r3, r9
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfbc      	itt	lt
 80077e8:	232d      	movlt	r3, #45	; 0x2d
 80077ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077ee:	487f      	ldr	r0, [pc, #508]	; (80079ec <_printf_float+0x2e8>)
 80077f0:	4b7f      	ldr	r3, [pc, #508]	; (80079f0 <_printf_float+0x2ec>)
 80077f2:	e7d1      	b.n	8007798 <_printf_float+0x94>
 80077f4:	6863      	ldr	r3, [r4, #4]
 80077f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077fa:	9206      	str	r2, [sp, #24]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	d13f      	bne.n	8007880 <_printf_float+0x17c>
 8007800:	2306      	movs	r3, #6
 8007802:	6063      	str	r3, [r4, #4]
 8007804:	9b05      	ldr	r3, [sp, #20]
 8007806:	6861      	ldr	r1, [r4, #4]
 8007808:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800780c:	2300      	movs	r3, #0
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	ab0a      	add	r3, sp, #40	; 0x28
 8007812:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007816:	ab09      	add	r3, sp, #36	; 0x24
 8007818:	ec49 8b10 	vmov	d0, r8, r9
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	6022      	str	r2, [r4, #0]
 8007820:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007824:	4628      	mov	r0, r5
 8007826:	f7ff fecd 	bl	80075c4 <__cvt>
 800782a:	9b06      	ldr	r3, [sp, #24]
 800782c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800782e:	2b47      	cmp	r3, #71	; 0x47
 8007830:	4680      	mov	r8, r0
 8007832:	d108      	bne.n	8007846 <_printf_float+0x142>
 8007834:	1cc8      	adds	r0, r1, #3
 8007836:	db02      	blt.n	800783e <_printf_float+0x13a>
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	4299      	cmp	r1, r3
 800783c:	dd41      	ble.n	80078c2 <_printf_float+0x1be>
 800783e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007842:	fa5f fb8b 	uxtb.w	fp, fp
 8007846:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800784a:	d820      	bhi.n	800788e <_printf_float+0x18a>
 800784c:	3901      	subs	r1, #1
 800784e:	465a      	mov	r2, fp
 8007850:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007854:	9109      	str	r1, [sp, #36]	; 0x24
 8007856:	f7ff ff17 	bl	8007688 <__exponent>
 800785a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800785c:	1813      	adds	r3, r2, r0
 800785e:	2a01      	cmp	r2, #1
 8007860:	4681      	mov	r9, r0
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	dc02      	bgt.n	800786c <_printf_float+0x168>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	07d2      	lsls	r2, r2, #31
 800786a:	d501      	bpl.n	8007870 <_printf_float+0x16c>
 800786c:	3301      	adds	r3, #1
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007874:	2b00      	cmp	r3, #0
 8007876:	d09c      	beq.n	80077b2 <_printf_float+0xae>
 8007878:	232d      	movs	r3, #45	; 0x2d
 800787a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787e:	e798      	b.n	80077b2 <_printf_float+0xae>
 8007880:	9a06      	ldr	r2, [sp, #24]
 8007882:	2a47      	cmp	r2, #71	; 0x47
 8007884:	d1be      	bne.n	8007804 <_printf_float+0x100>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1bc      	bne.n	8007804 <_printf_float+0x100>
 800788a:	2301      	movs	r3, #1
 800788c:	e7b9      	b.n	8007802 <_printf_float+0xfe>
 800788e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007892:	d118      	bne.n	80078c6 <_printf_float+0x1c2>
 8007894:	2900      	cmp	r1, #0
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	dd0b      	ble.n	80078b2 <_printf_float+0x1ae>
 800789a:	6121      	str	r1, [r4, #16]
 800789c:	b913      	cbnz	r3, 80078a4 <_printf_float+0x1a0>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	07d0      	lsls	r0, r2, #31
 80078a2:	d502      	bpl.n	80078aa <_printf_float+0x1a6>
 80078a4:	3301      	adds	r3, #1
 80078a6:	440b      	add	r3, r1
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80078ac:	f04f 0900 	mov.w	r9, #0
 80078b0:	e7de      	b.n	8007870 <_printf_float+0x16c>
 80078b2:	b913      	cbnz	r3, 80078ba <_printf_float+0x1b6>
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	07d2      	lsls	r2, r2, #31
 80078b8:	d501      	bpl.n	80078be <_printf_float+0x1ba>
 80078ba:	3302      	adds	r3, #2
 80078bc:	e7f4      	b.n	80078a8 <_printf_float+0x1a4>
 80078be:	2301      	movs	r3, #1
 80078c0:	e7f2      	b.n	80078a8 <_printf_float+0x1a4>
 80078c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c8:	4299      	cmp	r1, r3
 80078ca:	db05      	blt.n	80078d8 <_printf_float+0x1d4>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	6121      	str	r1, [r4, #16]
 80078d0:	07d8      	lsls	r0, r3, #31
 80078d2:	d5ea      	bpl.n	80078aa <_printf_float+0x1a6>
 80078d4:	1c4b      	adds	r3, r1, #1
 80078d6:	e7e7      	b.n	80078a8 <_printf_float+0x1a4>
 80078d8:	2900      	cmp	r1, #0
 80078da:	bfd4      	ite	le
 80078dc:	f1c1 0202 	rsble	r2, r1, #2
 80078e0:	2201      	movgt	r2, #1
 80078e2:	4413      	add	r3, r2
 80078e4:	e7e0      	b.n	80078a8 <_printf_float+0x1a4>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	055a      	lsls	r2, r3, #21
 80078ea:	d407      	bmi.n	80078fc <_printf_float+0x1f8>
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	4642      	mov	r2, r8
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	d12c      	bne.n	8007954 <_printf_float+0x250>
 80078fa:	e764      	b.n	80077c6 <_printf_float+0xc2>
 80078fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007900:	f240 80e0 	bls.w	8007ac4 <_printf_float+0x3c0>
 8007904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007908:	2200      	movs	r2, #0
 800790a:	2300      	movs	r3, #0
 800790c:	f7f9 f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 8007910:	2800      	cmp	r0, #0
 8007912:	d034      	beq.n	800797e <_printf_float+0x27a>
 8007914:	4a37      	ldr	r2, [pc, #220]	; (80079f4 <_printf_float+0x2f0>)
 8007916:	2301      	movs	r3, #1
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	f43f af51 	beq.w	80077c6 <_printf_float+0xc2>
 8007924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007928:	429a      	cmp	r2, r3
 800792a:	db02      	blt.n	8007932 <_printf_float+0x22e>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	07d8      	lsls	r0, r3, #31
 8007930:	d510      	bpl.n	8007954 <_printf_float+0x250>
 8007932:	ee18 3a10 	vmov	r3, s16
 8007936:	4652      	mov	r2, sl
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f af41 	beq.w	80077c6 <_printf_float+0xc2>
 8007944:	f04f 0800 	mov.w	r8, #0
 8007948:	f104 091a 	add.w	r9, r4, #26
 800794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794e:	3b01      	subs	r3, #1
 8007950:	4543      	cmp	r3, r8
 8007952:	dc09      	bgt.n	8007968 <_printf_float+0x264>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	079b      	lsls	r3, r3, #30
 8007958:	f100 8105 	bmi.w	8007b66 <_printf_float+0x462>
 800795c:	68e0      	ldr	r0, [r4, #12]
 800795e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007960:	4298      	cmp	r0, r3
 8007962:	bfb8      	it	lt
 8007964:	4618      	movlt	r0, r3
 8007966:	e730      	b.n	80077ca <_printf_float+0xc6>
 8007968:	2301      	movs	r3, #1
 800796a:	464a      	mov	r2, r9
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f af27 	beq.w	80077c6 <_printf_float+0xc2>
 8007978:	f108 0801 	add.w	r8, r8, #1
 800797c:	e7e6      	b.n	800794c <_printf_float+0x248>
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	dc39      	bgt.n	80079f8 <_printf_float+0x2f4>
 8007984:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <_printf_float+0x2f0>)
 8007986:	2301      	movs	r3, #1
 8007988:	4631      	mov	r1, r6
 800798a:	4628      	mov	r0, r5
 800798c:	47b8      	blx	r7
 800798e:	3001      	adds	r0, #1
 8007990:	f43f af19 	beq.w	80077c6 <_printf_float+0xc2>
 8007994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007998:	4313      	orrs	r3, r2
 800799a:	d102      	bne.n	80079a2 <_printf_float+0x29e>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	07d9      	lsls	r1, r3, #31
 80079a0:	d5d8      	bpl.n	8007954 <_printf_float+0x250>
 80079a2:	ee18 3a10 	vmov	r3, s16
 80079a6:	4652      	mov	r2, sl
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b8      	blx	r7
 80079ae:	3001      	adds	r0, #1
 80079b0:	f43f af09 	beq.w	80077c6 <_printf_float+0xc2>
 80079b4:	f04f 0900 	mov.w	r9, #0
 80079b8:	f104 0a1a 	add.w	sl, r4, #26
 80079bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079be:	425b      	negs	r3, r3
 80079c0:	454b      	cmp	r3, r9
 80079c2:	dc01      	bgt.n	80079c8 <_printf_float+0x2c4>
 80079c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c6:	e792      	b.n	80078ee <_printf_float+0x1ea>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4652      	mov	r2, sl
 80079cc:	4631      	mov	r1, r6
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b8      	blx	r7
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f aef7 	beq.w	80077c6 <_printf_float+0xc2>
 80079d8:	f109 0901 	add.w	r9, r9, #1
 80079dc:	e7ee      	b.n	80079bc <_printf_float+0x2b8>
 80079de:	bf00      	nop
 80079e0:	7fefffff 	.word	0x7fefffff
 80079e4:	0800e1d0 	.word	0x0800e1d0
 80079e8:	0800e1d4 	.word	0x0800e1d4
 80079ec:	0800e1dc 	.word	0x0800e1dc
 80079f0:	0800e1d8 	.word	0x0800e1d8
 80079f4:	0800e641 	.word	0x0800e641
 80079f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079fc:	429a      	cmp	r2, r3
 80079fe:	bfa8      	it	ge
 8007a00:	461a      	movge	r2, r3
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	4691      	mov	r9, r2
 8007a06:	dc37      	bgt.n	8007a78 <_printf_float+0x374>
 8007a08:	f04f 0b00 	mov.w	fp, #0
 8007a0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a10:	f104 021a 	add.w	r2, r4, #26
 8007a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	eba3 0309 	sub.w	r3, r3, r9
 8007a1c:	455b      	cmp	r3, fp
 8007a1e:	dc33      	bgt.n	8007a88 <_printf_float+0x384>
 8007a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a24:	429a      	cmp	r2, r3
 8007a26:	db3b      	blt.n	8007aa0 <_printf_float+0x39c>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	07da      	lsls	r2, r3, #31
 8007a2c:	d438      	bmi.n	8007aa0 <_printf_float+0x39c>
 8007a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a30:	9b05      	ldr	r3, [sp, #20]
 8007a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	eba2 0901 	sub.w	r9, r2, r1
 8007a3a:	4599      	cmp	r9, r3
 8007a3c:	bfa8      	it	ge
 8007a3e:	4699      	movge	r9, r3
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	dc35      	bgt.n	8007ab2 <_printf_float+0x3ae>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a4e:	f104 0a1a 	add.w	sl, r4, #26
 8007a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	eba3 0309 	sub.w	r3, r3, r9
 8007a5c:	4543      	cmp	r3, r8
 8007a5e:	f77f af79 	ble.w	8007954 <_printf_float+0x250>
 8007a62:	2301      	movs	r3, #1
 8007a64:	4652      	mov	r2, sl
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f43f aeaa 	beq.w	80077c6 <_printf_float+0xc2>
 8007a72:	f108 0801 	add.w	r8, r8, #1
 8007a76:	e7ec      	b.n	8007a52 <_printf_float+0x34e>
 8007a78:	4613      	mov	r3, r2
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	d1c0      	bne.n	8007a08 <_printf_float+0x304>
 8007a86:	e69e      	b.n	80077c6 <_printf_float+0xc2>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	9205      	str	r2, [sp, #20]
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	f43f ae97 	beq.w	80077c6 <_printf_float+0xc2>
 8007a98:	9a05      	ldr	r2, [sp, #20]
 8007a9a:	f10b 0b01 	add.w	fp, fp, #1
 8007a9e:	e7b9      	b.n	8007a14 <_printf_float+0x310>
 8007aa0:	ee18 3a10 	vmov	r3, s16
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1be      	bne.n	8007a2e <_printf_float+0x32a>
 8007ab0:	e689      	b.n	80077c6 <_printf_float+0xc2>
 8007ab2:	9a05      	ldr	r2, [sp, #20]
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	4442      	add	r2, r8
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d1c1      	bne.n	8007a46 <_printf_float+0x342>
 8007ac2:	e680      	b.n	80077c6 <_printf_float+0xc2>
 8007ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ac6:	2a01      	cmp	r2, #1
 8007ac8:	dc01      	bgt.n	8007ace <_printf_float+0x3ca>
 8007aca:	07db      	lsls	r3, r3, #31
 8007acc:	d538      	bpl.n	8007b40 <_printf_float+0x43c>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f43f ae74 	beq.w	80077c6 <_printf_float+0xc2>
 8007ade:	ee18 3a10 	vmov	r3, s16
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	f43f ae6b 	beq.w	80077c6 <_printf_float+0xc2>
 8007af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	f7f8 fffe 	bl	8000af8 <__aeabi_dcmpeq>
 8007afc:	b9d8      	cbnz	r0, 8007b36 <_printf_float+0x432>
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	f108 0201 	add.w	r2, r8, #1
 8007b04:	3b01      	subs	r3, #1
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d10e      	bne.n	8007b2e <_printf_float+0x42a>
 8007b10:	e659      	b.n	80077c6 <_printf_float+0xc2>
 8007b12:	2301      	movs	r3, #1
 8007b14:	4652      	mov	r2, sl
 8007b16:	4631      	mov	r1, r6
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b8      	blx	r7
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	f43f ae52 	beq.w	80077c6 <_printf_float+0xc2>
 8007b22:	f108 0801 	add.w	r8, r8, #1
 8007b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4543      	cmp	r3, r8
 8007b2c:	dcf1      	bgt.n	8007b12 <_printf_float+0x40e>
 8007b2e:	464b      	mov	r3, r9
 8007b30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b34:	e6dc      	b.n	80078f0 <_printf_float+0x1ec>
 8007b36:	f04f 0800 	mov.w	r8, #0
 8007b3a:	f104 0a1a 	add.w	sl, r4, #26
 8007b3e:	e7f2      	b.n	8007b26 <_printf_float+0x422>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4642      	mov	r2, r8
 8007b44:	e7df      	b.n	8007b06 <_printf_float+0x402>
 8007b46:	2301      	movs	r3, #1
 8007b48:	464a      	mov	r2, r9
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f ae38 	beq.w	80077c6 <_printf_float+0xc2>
 8007b56:	f108 0801 	add.w	r8, r8, #1
 8007b5a:	68e3      	ldr	r3, [r4, #12]
 8007b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b5e:	1a5b      	subs	r3, r3, r1
 8007b60:	4543      	cmp	r3, r8
 8007b62:	dcf0      	bgt.n	8007b46 <_printf_float+0x442>
 8007b64:	e6fa      	b.n	800795c <_printf_float+0x258>
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	f104 0919 	add.w	r9, r4, #25
 8007b6e:	e7f4      	b.n	8007b5a <_printf_float+0x456>

08007b70 <_printf_common>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	4616      	mov	r6, r2
 8007b76:	4699      	mov	r9, r3
 8007b78:	688a      	ldr	r2, [r1, #8]
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	bfb8      	it	lt
 8007b84:	4613      	movlt	r3, r2
 8007b86:	6033      	str	r3, [r6, #0]
 8007b88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	b10a      	cbz	r2, 8007b96 <_printf_common+0x26>
 8007b92:	3301      	adds	r3, #1
 8007b94:	6033      	str	r3, [r6, #0]
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	0699      	lsls	r1, r3, #26
 8007b9a:	bf42      	ittt	mi
 8007b9c:	6833      	ldrmi	r3, [r6, #0]
 8007b9e:	3302      	addmi	r3, #2
 8007ba0:	6033      	strmi	r3, [r6, #0]
 8007ba2:	6825      	ldr	r5, [r4, #0]
 8007ba4:	f015 0506 	ands.w	r5, r5, #6
 8007ba8:	d106      	bne.n	8007bb8 <_printf_common+0x48>
 8007baa:	f104 0a19 	add.w	sl, r4, #25
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	6832      	ldr	r2, [r6, #0]
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	42ab      	cmp	r3, r5
 8007bb6:	dc26      	bgt.n	8007c06 <_printf_common+0x96>
 8007bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bbc:	1e13      	subs	r3, r2, #0
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	bf18      	it	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	0692      	lsls	r2, r2, #26
 8007bc6:	d42b      	bmi.n	8007c20 <_printf_common+0xb0>
 8007bc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bcc:	4649      	mov	r1, r9
 8007bce:	4638      	mov	r0, r7
 8007bd0:	47c0      	blx	r8
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d01e      	beq.n	8007c14 <_printf_common+0xa4>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	68e5      	ldr	r5, [r4, #12]
 8007bda:	6832      	ldr	r2, [r6, #0]
 8007bdc:	f003 0306 	and.w	r3, r3, #6
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	bf08      	it	eq
 8007be4:	1aad      	subeq	r5, r5, r2
 8007be6:	68a3      	ldr	r3, [r4, #8]
 8007be8:	6922      	ldr	r2, [r4, #16]
 8007bea:	bf0c      	ite	eq
 8007bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bf0:	2500      	movne	r5, #0
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	bfc4      	itt	gt
 8007bf6:	1a9b      	subgt	r3, r3, r2
 8007bf8:	18ed      	addgt	r5, r5, r3
 8007bfa:	2600      	movs	r6, #0
 8007bfc:	341a      	adds	r4, #26
 8007bfe:	42b5      	cmp	r5, r6
 8007c00:	d11a      	bne.n	8007c38 <_printf_common+0xc8>
 8007c02:	2000      	movs	r0, #0
 8007c04:	e008      	b.n	8007c18 <_printf_common+0xa8>
 8007c06:	2301      	movs	r3, #1
 8007c08:	4652      	mov	r2, sl
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	47c0      	blx	r8
 8007c10:	3001      	adds	r0, #1
 8007c12:	d103      	bne.n	8007c1c <_printf_common+0xac>
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	e7c6      	b.n	8007bae <_printf_common+0x3e>
 8007c20:	18e1      	adds	r1, r4, r3
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	2030      	movs	r0, #48	; 0x30
 8007c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c2a:	4422      	add	r2, r4
 8007c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c34:	3302      	adds	r3, #2
 8007c36:	e7c7      	b.n	8007bc8 <_printf_common+0x58>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	4638      	mov	r0, r7
 8007c40:	47c0      	blx	r8
 8007c42:	3001      	adds	r0, #1
 8007c44:	d0e6      	beq.n	8007c14 <_printf_common+0xa4>
 8007c46:	3601      	adds	r6, #1
 8007c48:	e7d9      	b.n	8007bfe <_printf_common+0x8e>
	...

08007c4c <_printf_i>:
 8007c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	460c      	mov	r4, r1
 8007c52:	4691      	mov	r9, r2
 8007c54:	7e27      	ldrb	r7, [r4, #24]
 8007c56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c58:	2f78      	cmp	r7, #120	; 0x78
 8007c5a:	4680      	mov	r8, r0
 8007c5c:	469a      	mov	sl, r3
 8007c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c62:	d807      	bhi.n	8007c74 <_printf_i+0x28>
 8007c64:	2f62      	cmp	r7, #98	; 0x62
 8007c66:	d80a      	bhi.n	8007c7e <_printf_i+0x32>
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	f000 80d8 	beq.w	8007e1e <_printf_i+0x1d2>
 8007c6e:	2f58      	cmp	r7, #88	; 0x58
 8007c70:	f000 80a3 	beq.w	8007dba <_printf_i+0x16e>
 8007c74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c7c:	e03a      	b.n	8007cf4 <_printf_i+0xa8>
 8007c7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c82:	2b15      	cmp	r3, #21
 8007c84:	d8f6      	bhi.n	8007c74 <_printf_i+0x28>
 8007c86:	a001      	add	r0, pc, #4	; (adr r0, 8007c8c <_printf_i+0x40>)
 8007c88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c8c:	08007ce5 	.word	0x08007ce5
 8007c90:	08007cf9 	.word	0x08007cf9
 8007c94:	08007c75 	.word	0x08007c75
 8007c98:	08007c75 	.word	0x08007c75
 8007c9c:	08007c75 	.word	0x08007c75
 8007ca0:	08007c75 	.word	0x08007c75
 8007ca4:	08007cf9 	.word	0x08007cf9
 8007ca8:	08007c75 	.word	0x08007c75
 8007cac:	08007c75 	.word	0x08007c75
 8007cb0:	08007c75 	.word	0x08007c75
 8007cb4:	08007c75 	.word	0x08007c75
 8007cb8:	08007e05 	.word	0x08007e05
 8007cbc:	08007d29 	.word	0x08007d29
 8007cc0:	08007de7 	.word	0x08007de7
 8007cc4:	08007c75 	.word	0x08007c75
 8007cc8:	08007c75 	.word	0x08007c75
 8007ccc:	08007e27 	.word	0x08007e27
 8007cd0:	08007c75 	.word	0x08007c75
 8007cd4:	08007d29 	.word	0x08007d29
 8007cd8:	08007c75 	.word	0x08007c75
 8007cdc:	08007c75 	.word	0x08007c75
 8007ce0:	08007def 	.word	0x08007def
 8007ce4:	680b      	ldr	r3, [r1, #0]
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	600a      	str	r2, [r1, #0]
 8007cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0a3      	b.n	8007e40 <_printf_i+0x1f4>
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	6808      	ldr	r0, [r1, #0]
 8007cfc:	062e      	lsls	r6, r5, #24
 8007cfe:	f100 0304 	add.w	r3, r0, #4
 8007d02:	d50a      	bpl.n	8007d1a <_printf_i+0xce>
 8007d04:	6805      	ldr	r5, [r0, #0]
 8007d06:	600b      	str	r3, [r1, #0]
 8007d08:	2d00      	cmp	r5, #0
 8007d0a:	da03      	bge.n	8007d14 <_printf_i+0xc8>
 8007d0c:	232d      	movs	r3, #45	; 0x2d
 8007d0e:	426d      	negs	r5, r5
 8007d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d14:	485e      	ldr	r0, [pc, #376]	; (8007e90 <_printf_i+0x244>)
 8007d16:	230a      	movs	r3, #10
 8007d18:	e019      	b.n	8007d4e <_printf_i+0x102>
 8007d1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d1e:	6805      	ldr	r5, [r0, #0]
 8007d20:	600b      	str	r3, [r1, #0]
 8007d22:	bf18      	it	ne
 8007d24:	b22d      	sxthne	r5, r5
 8007d26:	e7ef      	b.n	8007d08 <_printf_i+0xbc>
 8007d28:	680b      	ldr	r3, [r1, #0]
 8007d2a:	6825      	ldr	r5, [r4, #0]
 8007d2c:	1d18      	adds	r0, r3, #4
 8007d2e:	6008      	str	r0, [r1, #0]
 8007d30:	0628      	lsls	r0, r5, #24
 8007d32:	d501      	bpl.n	8007d38 <_printf_i+0xec>
 8007d34:	681d      	ldr	r5, [r3, #0]
 8007d36:	e002      	b.n	8007d3e <_printf_i+0xf2>
 8007d38:	0669      	lsls	r1, r5, #25
 8007d3a:	d5fb      	bpl.n	8007d34 <_printf_i+0xe8>
 8007d3c:	881d      	ldrh	r5, [r3, #0]
 8007d3e:	4854      	ldr	r0, [pc, #336]	; (8007e90 <_printf_i+0x244>)
 8007d40:	2f6f      	cmp	r7, #111	; 0x6f
 8007d42:	bf0c      	ite	eq
 8007d44:	2308      	moveq	r3, #8
 8007d46:	230a      	movne	r3, #10
 8007d48:	2100      	movs	r1, #0
 8007d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d4e:	6866      	ldr	r6, [r4, #4]
 8007d50:	60a6      	str	r6, [r4, #8]
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	bfa2      	ittt	ge
 8007d56:	6821      	ldrge	r1, [r4, #0]
 8007d58:	f021 0104 	bicge.w	r1, r1, #4
 8007d5c:	6021      	strge	r1, [r4, #0]
 8007d5e:	b90d      	cbnz	r5, 8007d64 <_printf_i+0x118>
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	d04d      	beq.n	8007e00 <_printf_i+0x1b4>
 8007d64:	4616      	mov	r6, r2
 8007d66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d6e:	5dc7      	ldrb	r7, [r0, r7]
 8007d70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d74:	462f      	mov	r7, r5
 8007d76:	42bb      	cmp	r3, r7
 8007d78:	460d      	mov	r5, r1
 8007d7a:	d9f4      	bls.n	8007d66 <_printf_i+0x11a>
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d10b      	bne.n	8007d98 <_printf_i+0x14c>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	07df      	lsls	r7, r3, #31
 8007d84:	d508      	bpl.n	8007d98 <_printf_i+0x14c>
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	6861      	ldr	r1, [r4, #4]
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	bfde      	ittt	le
 8007d8e:	2330      	movle	r3, #48	; 0x30
 8007d90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d98:	1b92      	subs	r2, r2, r6
 8007d9a:	6122      	str	r2, [r4, #16]
 8007d9c:	f8cd a000 	str.w	sl, [sp]
 8007da0:	464b      	mov	r3, r9
 8007da2:	aa03      	add	r2, sp, #12
 8007da4:	4621      	mov	r1, r4
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff fee2 	bl	8007b70 <_printf_common>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d14c      	bne.n	8007e4a <_printf_i+0x1fe>
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	b004      	add	sp, #16
 8007db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dba:	4835      	ldr	r0, [pc, #212]	; (8007e90 <_printf_i+0x244>)
 8007dbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	680e      	ldr	r6, [r1, #0]
 8007dc4:	061f      	lsls	r7, r3, #24
 8007dc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007dca:	600e      	str	r6, [r1, #0]
 8007dcc:	d514      	bpl.n	8007df8 <_printf_i+0x1ac>
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	bf44      	itt	mi
 8007dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd6:	6023      	strmi	r3, [r4, #0]
 8007dd8:	b91d      	cbnz	r5, 8007de2 <_printf_i+0x196>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f023 0320 	bic.w	r3, r3, #32
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	2310      	movs	r3, #16
 8007de4:	e7b0      	b.n	8007d48 <_printf_i+0xfc>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	f043 0320 	orr.w	r3, r3, #32
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	2378      	movs	r3, #120	; 0x78
 8007df0:	4828      	ldr	r0, [pc, #160]	; (8007e94 <_printf_i+0x248>)
 8007df2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007df6:	e7e3      	b.n	8007dc0 <_printf_i+0x174>
 8007df8:	065e      	lsls	r6, r3, #25
 8007dfa:	bf48      	it	mi
 8007dfc:	b2ad      	uxthmi	r5, r5
 8007dfe:	e7e6      	b.n	8007dce <_printf_i+0x182>
 8007e00:	4616      	mov	r6, r2
 8007e02:	e7bb      	b.n	8007d7c <_printf_i+0x130>
 8007e04:	680b      	ldr	r3, [r1, #0]
 8007e06:	6826      	ldr	r6, [r4, #0]
 8007e08:	6960      	ldr	r0, [r4, #20]
 8007e0a:	1d1d      	adds	r5, r3, #4
 8007e0c:	600d      	str	r5, [r1, #0]
 8007e0e:	0635      	lsls	r5, r6, #24
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	d501      	bpl.n	8007e18 <_printf_i+0x1cc>
 8007e14:	6018      	str	r0, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <_printf_i+0x1d2>
 8007e18:	0671      	lsls	r1, r6, #25
 8007e1a:	d5fb      	bpl.n	8007e14 <_printf_i+0x1c8>
 8007e1c:	8018      	strh	r0, [r3, #0]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	4616      	mov	r6, r2
 8007e24:	e7ba      	b.n	8007d9c <_printf_i+0x150>
 8007e26:	680b      	ldr	r3, [r1, #0]
 8007e28:	1d1a      	adds	r2, r3, #4
 8007e2a:	600a      	str	r2, [r1, #0]
 8007e2c:	681e      	ldr	r6, [r3, #0]
 8007e2e:	6862      	ldr	r2, [r4, #4]
 8007e30:	2100      	movs	r1, #0
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7f8 f9ec 	bl	8000210 <memchr>
 8007e38:	b108      	cbz	r0, 8007e3e <_printf_i+0x1f2>
 8007e3a:	1b80      	subs	r0, r0, r6
 8007e3c:	6060      	str	r0, [r4, #4]
 8007e3e:	6863      	ldr	r3, [r4, #4]
 8007e40:	6123      	str	r3, [r4, #16]
 8007e42:	2300      	movs	r3, #0
 8007e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e48:	e7a8      	b.n	8007d9c <_printf_i+0x150>
 8007e4a:	6923      	ldr	r3, [r4, #16]
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	47d0      	blx	sl
 8007e54:	3001      	adds	r0, #1
 8007e56:	d0ab      	beq.n	8007db0 <_printf_i+0x164>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	079b      	lsls	r3, r3, #30
 8007e5c:	d413      	bmi.n	8007e86 <_printf_i+0x23a>
 8007e5e:	68e0      	ldr	r0, [r4, #12]
 8007e60:	9b03      	ldr	r3, [sp, #12]
 8007e62:	4298      	cmp	r0, r3
 8007e64:	bfb8      	it	lt
 8007e66:	4618      	movlt	r0, r3
 8007e68:	e7a4      	b.n	8007db4 <_printf_i+0x168>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	4649      	mov	r1, r9
 8007e70:	4640      	mov	r0, r8
 8007e72:	47d0      	blx	sl
 8007e74:	3001      	adds	r0, #1
 8007e76:	d09b      	beq.n	8007db0 <_printf_i+0x164>
 8007e78:	3501      	adds	r5, #1
 8007e7a:	68e3      	ldr	r3, [r4, #12]
 8007e7c:	9903      	ldr	r1, [sp, #12]
 8007e7e:	1a5b      	subs	r3, r3, r1
 8007e80:	42ab      	cmp	r3, r5
 8007e82:	dcf2      	bgt.n	8007e6a <_printf_i+0x21e>
 8007e84:	e7eb      	b.n	8007e5e <_printf_i+0x212>
 8007e86:	2500      	movs	r5, #0
 8007e88:	f104 0619 	add.w	r6, r4, #25
 8007e8c:	e7f5      	b.n	8007e7a <_printf_i+0x22e>
 8007e8e:	bf00      	nop
 8007e90:	0800e1e0 	.word	0x0800e1e0
 8007e94:	0800e1f1 	.word	0x0800e1f1

08007e98 <_scanf_float>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	4617      	mov	r7, r2
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	688b      	ldr	r3, [r1, #8]
 8007ea4:	1e5a      	subs	r2, r3, #1
 8007ea6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007eaa:	bf83      	ittte	hi
 8007eac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007eb0:	195b      	addhi	r3, r3, r5
 8007eb2:	9302      	strhi	r3, [sp, #8]
 8007eb4:	2300      	movls	r3, #0
 8007eb6:	bf86      	itte	hi
 8007eb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ebc:	608b      	strhi	r3, [r1, #8]
 8007ebe:	9302      	strls	r3, [sp, #8]
 8007ec0:	680b      	ldr	r3, [r1, #0]
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007eca:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ece:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	465e      	mov	r6, fp
 8007ed8:	46aa      	mov	sl, r5
 8007eda:	46a9      	mov	r9, r5
 8007edc:	9501      	str	r5, [sp, #4]
 8007ede:	68a2      	ldr	r2, [r4, #8]
 8007ee0:	b152      	cbz	r2, 8007ef8 <_scanf_float+0x60>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b4e      	cmp	r3, #78	; 0x4e
 8007ee8:	d864      	bhi.n	8007fb4 <_scanf_float+0x11c>
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	d83c      	bhi.n	8007f68 <_scanf_float+0xd0>
 8007eee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ef2:	b2c8      	uxtb	r0, r1
 8007ef4:	280e      	cmp	r0, #14
 8007ef6:	d93a      	bls.n	8007f6e <_scanf_float+0xd6>
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	d003      	beq.n	8007f06 <_scanf_float+0x6e>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f0a:	f1ba 0f01 	cmp.w	sl, #1
 8007f0e:	f200 8113 	bhi.w	8008138 <_scanf_float+0x2a0>
 8007f12:	455e      	cmp	r6, fp
 8007f14:	f200 8105 	bhi.w	8008122 <_scanf_float+0x28a>
 8007f18:	2501      	movs	r5, #1
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	b007      	add	sp, #28
 8007f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f26:	2a0d      	cmp	r2, #13
 8007f28:	d8e6      	bhi.n	8007ef8 <_scanf_float+0x60>
 8007f2a:	a101      	add	r1, pc, #4	; (adr r1, 8007f30 <_scanf_float+0x98>)
 8007f2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f30:	0800806f 	.word	0x0800806f
 8007f34:	08007ef9 	.word	0x08007ef9
 8007f38:	08007ef9 	.word	0x08007ef9
 8007f3c:	08007ef9 	.word	0x08007ef9
 8007f40:	080080cf 	.word	0x080080cf
 8007f44:	080080a7 	.word	0x080080a7
 8007f48:	08007ef9 	.word	0x08007ef9
 8007f4c:	08007ef9 	.word	0x08007ef9
 8007f50:	0800807d 	.word	0x0800807d
 8007f54:	08007ef9 	.word	0x08007ef9
 8007f58:	08007ef9 	.word	0x08007ef9
 8007f5c:	08007ef9 	.word	0x08007ef9
 8007f60:	08007ef9 	.word	0x08007ef9
 8007f64:	08008035 	.word	0x08008035
 8007f68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007f6c:	e7db      	b.n	8007f26 <_scanf_float+0x8e>
 8007f6e:	290e      	cmp	r1, #14
 8007f70:	d8c2      	bhi.n	8007ef8 <_scanf_float+0x60>
 8007f72:	a001      	add	r0, pc, #4	; (adr r0, 8007f78 <_scanf_float+0xe0>)
 8007f74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f78:	08008027 	.word	0x08008027
 8007f7c:	08007ef9 	.word	0x08007ef9
 8007f80:	08008027 	.word	0x08008027
 8007f84:	080080bb 	.word	0x080080bb
 8007f88:	08007ef9 	.word	0x08007ef9
 8007f8c:	08007fd5 	.word	0x08007fd5
 8007f90:	08008011 	.word	0x08008011
 8007f94:	08008011 	.word	0x08008011
 8007f98:	08008011 	.word	0x08008011
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008011 	.word	0x08008011
 8007fa4:	08008011 	.word	0x08008011
 8007fa8:	08008011 	.word	0x08008011
 8007fac:	08008011 	.word	0x08008011
 8007fb0:	08008011 	.word	0x08008011
 8007fb4:	2b6e      	cmp	r3, #110	; 0x6e
 8007fb6:	d809      	bhi.n	8007fcc <_scanf_float+0x134>
 8007fb8:	2b60      	cmp	r3, #96	; 0x60
 8007fba:	d8b2      	bhi.n	8007f22 <_scanf_float+0x8a>
 8007fbc:	2b54      	cmp	r3, #84	; 0x54
 8007fbe:	d077      	beq.n	80080b0 <_scanf_float+0x218>
 8007fc0:	2b59      	cmp	r3, #89	; 0x59
 8007fc2:	d199      	bne.n	8007ef8 <_scanf_float+0x60>
 8007fc4:	2d07      	cmp	r5, #7
 8007fc6:	d197      	bne.n	8007ef8 <_scanf_float+0x60>
 8007fc8:	2508      	movs	r5, #8
 8007fca:	e029      	b.n	8008020 <_scanf_float+0x188>
 8007fcc:	2b74      	cmp	r3, #116	; 0x74
 8007fce:	d06f      	beq.n	80080b0 <_scanf_float+0x218>
 8007fd0:	2b79      	cmp	r3, #121	; 0x79
 8007fd2:	e7f6      	b.n	8007fc2 <_scanf_float+0x12a>
 8007fd4:	6821      	ldr	r1, [r4, #0]
 8007fd6:	05c8      	lsls	r0, r1, #23
 8007fd8:	d51a      	bpl.n	8008010 <_scanf_float+0x178>
 8007fda:	9b02      	ldr	r3, [sp, #8]
 8007fdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007fe0:	6021      	str	r1, [r4, #0]
 8007fe2:	f109 0901 	add.w	r9, r9, #1
 8007fe6:	b11b      	cbz	r3, 8007ff0 <_scanf_float+0x158>
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	3201      	adds	r2, #1
 8007fec:	9302      	str	r3, [sp, #8]
 8007fee:	60a2      	str	r2, [r4, #8]
 8007ff0:	68a3      	ldr	r3, [r4, #8]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	f340 8084 	ble.w	8008110 <_scanf_float+0x278>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	e766      	b.n	8007ede <_scanf_float+0x46>
 8008010:	eb1a 0f05 	cmn.w	sl, r5
 8008014:	f47f af70 	bne.w	8007ef8 <_scanf_float+0x60>
 8008018:	6822      	ldr	r2, [r4, #0]
 800801a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800801e:	6022      	str	r2, [r4, #0]
 8008020:	f806 3b01 	strb.w	r3, [r6], #1
 8008024:	e7e4      	b.n	8007ff0 <_scanf_float+0x158>
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	0610      	lsls	r0, r2, #24
 800802a:	f57f af65 	bpl.w	8007ef8 <_scanf_float+0x60>
 800802e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008032:	e7f4      	b.n	800801e <_scanf_float+0x186>
 8008034:	f1ba 0f00 	cmp.w	sl, #0
 8008038:	d10e      	bne.n	8008058 <_scanf_float+0x1c0>
 800803a:	f1b9 0f00 	cmp.w	r9, #0
 800803e:	d10e      	bne.n	800805e <_scanf_float+0x1c6>
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008046:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800804a:	d108      	bne.n	800805e <_scanf_float+0x1c6>
 800804c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	f04f 0a01 	mov.w	sl, #1
 8008056:	e7e3      	b.n	8008020 <_scanf_float+0x188>
 8008058:	f1ba 0f02 	cmp.w	sl, #2
 800805c:	d055      	beq.n	800810a <_scanf_float+0x272>
 800805e:	2d01      	cmp	r5, #1
 8008060:	d002      	beq.n	8008068 <_scanf_float+0x1d0>
 8008062:	2d04      	cmp	r5, #4
 8008064:	f47f af48 	bne.w	8007ef8 <_scanf_float+0x60>
 8008068:	3501      	adds	r5, #1
 800806a:	b2ed      	uxtb	r5, r5
 800806c:	e7d8      	b.n	8008020 <_scanf_float+0x188>
 800806e:	f1ba 0f01 	cmp.w	sl, #1
 8008072:	f47f af41 	bne.w	8007ef8 <_scanf_float+0x60>
 8008076:	f04f 0a02 	mov.w	sl, #2
 800807a:	e7d1      	b.n	8008020 <_scanf_float+0x188>
 800807c:	b97d      	cbnz	r5, 800809e <_scanf_float+0x206>
 800807e:	f1b9 0f00 	cmp.w	r9, #0
 8008082:	f47f af3c 	bne.w	8007efe <_scanf_float+0x66>
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800808c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008090:	f47f af39 	bne.w	8007f06 <_scanf_float+0x6e>
 8008094:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008098:	6022      	str	r2, [r4, #0]
 800809a:	2501      	movs	r5, #1
 800809c:	e7c0      	b.n	8008020 <_scanf_float+0x188>
 800809e:	2d03      	cmp	r5, #3
 80080a0:	d0e2      	beq.n	8008068 <_scanf_float+0x1d0>
 80080a2:	2d05      	cmp	r5, #5
 80080a4:	e7de      	b.n	8008064 <_scanf_float+0x1cc>
 80080a6:	2d02      	cmp	r5, #2
 80080a8:	f47f af26 	bne.w	8007ef8 <_scanf_float+0x60>
 80080ac:	2503      	movs	r5, #3
 80080ae:	e7b7      	b.n	8008020 <_scanf_float+0x188>
 80080b0:	2d06      	cmp	r5, #6
 80080b2:	f47f af21 	bne.w	8007ef8 <_scanf_float+0x60>
 80080b6:	2507      	movs	r5, #7
 80080b8:	e7b2      	b.n	8008020 <_scanf_float+0x188>
 80080ba:	6822      	ldr	r2, [r4, #0]
 80080bc:	0591      	lsls	r1, r2, #22
 80080be:	f57f af1b 	bpl.w	8007ef8 <_scanf_float+0x60>
 80080c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80080cc:	e7a8      	b.n	8008020 <_scanf_float+0x188>
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80080d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80080d8:	d006      	beq.n	80080e8 <_scanf_float+0x250>
 80080da:	0550      	lsls	r0, r2, #21
 80080dc:	f57f af0c 	bpl.w	8007ef8 <_scanf_float+0x60>
 80080e0:	f1b9 0f00 	cmp.w	r9, #0
 80080e4:	f43f af0f 	beq.w	8007f06 <_scanf_float+0x6e>
 80080e8:	0591      	lsls	r1, r2, #22
 80080ea:	bf58      	it	pl
 80080ec:	9901      	ldrpl	r1, [sp, #4]
 80080ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080f2:	bf58      	it	pl
 80080f4:	eba9 0101 	subpl.w	r1, r9, r1
 80080f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80080fc:	bf58      	it	pl
 80080fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008102:	6022      	str	r2, [r4, #0]
 8008104:	f04f 0900 	mov.w	r9, #0
 8008108:	e78a      	b.n	8008020 <_scanf_float+0x188>
 800810a:	f04f 0a03 	mov.w	sl, #3
 800810e:	e787      	b.n	8008020 <_scanf_float+0x188>
 8008110:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008114:	4639      	mov	r1, r7
 8008116:	4640      	mov	r0, r8
 8008118:	4798      	blx	r3
 800811a:	2800      	cmp	r0, #0
 800811c:	f43f aedf 	beq.w	8007ede <_scanf_float+0x46>
 8008120:	e6ea      	b.n	8007ef8 <_scanf_float+0x60>
 8008122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800812a:	463a      	mov	r2, r7
 800812c:	4640      	mov	r0, r8
 800812e:	4798      	blx	r3
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	3b01      	subs	r3, #1
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	e6ec      	b.n	8007f12 <_scanf_float+0x7a>
 8008138:	1e6b      	subs	r3, r5, #1
 800813a:	2b06      	cmp	r3, #6
 800813c:	d825      	bhi.n	800818a <_scanf_float+0x2f2>
 800813e:	2d02      	cmp	r5, #2
 8008140:	d836      	bhi.n	80081b0 <_scanf_float+0x318>
 8008142:	455e      	cmp	r6, fp
 8008144:	f67f aee8 	bls.w	8007f18 <_scanf_float+0x80>
 8008148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800814c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008150:	463a      	mov	r2, r7
 8008152:	4640      	mov	r0, r8
 8008154:	4798      	blx	r3
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	3b01      	subs	r3, #1
 800815a:	6123      	str	r3, [r4, #16]
 800815c:	e7f1      	b.n	8008142 <_scanf_float+0x2aa>
 800815e:	9802      	ldr	r0, [sp, #8]
 8008160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008164:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008168:	9002      	str	r0, [sp, #8]
 800816a:	463a      	mov	r2, r7
 800816c:	4640      	mov	r0, r8
 800816e:	4798      	blx	r3
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	3b01      	subs	r3, #1
 8008174:	6123      	str	r3, [r4, #16]
 8008176:	f10a 3aff 	add.w	sl, sl, #4294967295
 800817a:	fa5f fa8a 	uxtb.w	sl, sl
 800817e:	f1ba 0f02 	cmp.w	sl, #2
 8008182:	d1ec      	bne.n	800815e <_scanf_float+0x2c6>
 8008184:	3d03      	subs	r5, #3
 8008186:	b2ed      	uxtb	r5, r5
 8008188:	1b76      	subs	r6, r6, r5
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	05da      	lsls	r2, r3, #23
 800818e:	d52f      	bpl.n	80081f0 <_scanf_float+0x358>
 8008190:	055b      	lsls	r3, r3, #21
 8008192:	d510      	bpl.n	80081b6 <_scanf_float+0x31e>
 8008194:	455e      	cmp	r6, fp
 8008196:	f67f aebf 	bls.w	8007f18 <_scanf_float+0x80>
 800819a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800819e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081a2:	463a      	mov	r2, r7
 80081a4:	4640      	mov	r0, r8
 80081a6:	4798      	blx	r3
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	e7f1      	b.n	8008194 <_scanf_float+0x2fc>
 80081b0:	46aa      	mov	sl, r5
 80081b2:	9602      	str	r6, [sp, #8]
 80081b4:	e7df      	b.n	8008176 <_scanf_float+0x2de>
 80081b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	2965      	cmp	r1, #101	; 0x65
 80081be:	f103 33ff 	add.w	r3, r3, #4294967295
 80081c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	d00c      	beq.n	80081e4 <_scanf_float+0x34c>
 80081ca:	2945      	cmp	r1, #69	; 0x45
 80081cc:	d00a      	beq.n	80081e4 <_scanf_float+0x34c>
 80081ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081d2:	463a      	mov	r2, r7
 80081d4:	4640      	mov	r0, r8
 80081d6:	4798      	blx	r3
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081de:	3b01      	subs	r3, #1
 80081e0:	1eb5      	subs	r5, r6, #2
 80081e2:	6123      	str	r3, [r4, #16]
 80081e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081e8:	463a      	mov	r2, r7
 80081ea:	4640      	mov	r0, r8
 80081ec:	4798      	blx	r3
 80081ee:	462e      	mov	r6, r5
 80081f0:	6825      	ldr	r5, [r4, #0]
 80081f2:	f015 0510 	ands.w	r5, r5, #16
 80081f6:	d158      	bne.n	80082aa <_scanf_float+0x412>
 80081f8:	7035      	strb	r5, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008204:	d11c      	bne.n	8008240 <_scanf_float+0x3a8>
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	454b      	cmp	r3, r9
 800820a:	eba3 0209 	sub.w	r2, r3, r9
 800820e:	d124      	bne.n	800825a <_scanf_float+0x3c2>
 8008210:	2200      	movs	r2, #0
 8008212:	4659      	mov	r1, fp
 8008214:	4640      	mov	r0, r8
 8008216:	f000 ff9d 	bl	8009154 <_strtod_r>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	6821      	ldr	r1, [r4, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f011 0f02 	tst.w	r1, #2
 8008224:	ec57 6b10 	vmov	r6, r7, d0
 8008228:	f103 0204 	add.w	r2, r3, #4
 800822c:	d020      	beq.n	8008270 <_scanf_float+0x3d8>
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	600a      	str	r2, [r1, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	e9c3 6700 	strd	r6, r7, [r3]
 8008238:	68e3      	ldr	r3, [r4, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60e3      	str	r3, [r4, #12]
 800823e:	e66c      	b.n	8007f1a <_scanf_float+0x82>
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0e4      	beq.n	8008210 <_scanf_float+0x378>
 8008246:	9905      	ldr	r1, [sp, #20]
 8008248:	230a      	movs	r3, #10
 800824a:	462a      	mov	r2, r5
 800824c:	3101      	adds	r1, #1
 800824e:	4640      	mov	r0, r8
 8008250:	f001 f80a 	bl	8009268 <_strtol_r>
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	9e05      	ldr	r6, [sp, #20]
 8008258:	1ac2      	subs	r2, r0, r3
 800825a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800825e:	429e      	cmp	r6, r3
 8008260:	bf28      	it	cs
 8008262:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008266:	4912      	ldr	r1, [pc, #72]	; (80082b0 <_scanf_float+0x418>)
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f8b9 	bl	80083e0 <siprintf>
 800826e:	e7cf      	b.n	8008210 <_scanf_float+0x378>
 8008270:	f011 0f04 	tst.w	r1, #4
 8008274:	9903      	ldr	r1, [sp, #12]
 8008276:	600a      	str	r2, [r1, #0]
 8008278:	d1db      	bne.n	8008232 <_scanf_float+0x39a>
 800827a:	f8d3 8000 	ldr.w	r8, [r3]
 800827e:	ee10 2a10 	vmov	r2, s0
 8008282:	ee10 0a10 	vmov	r0, s0
 8008286:	463b      	mov	r3, r7
 8008288:	4639      	mov	r1, r7
 800828a:	f7f8 fc67 	bl	8000b5c <__aeabi_dcmpun>
 800828e:	b128      	cbz	r0, 800829c <_scanf_float+0x404>
 8008290:	4808      	ldr	r0, [pc, #32]	; (80082b4 <_scanf_float+0x41c>)
 8008292:	f000 f89f 	bl	80083d4 <nanf>
 8008296:	ed88 0a00 	vstr	s0, [r8]
 800829a:	e7cd      	b.n	8008238 <_scanf_float+0x3a0>
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f8 fcba 	bl	8000c18 <__aeabi_d2f>
 80082a4:	f8c8 0000 	str.w	r0, [r8]
 80082a8:	e7c6      	b.n	8008238 <_scanf_float+0x3a0>
 80082aa:	2500      	movs	r5, #0
 80082ac:	e635      	b.n	8007f1a <_scanf_float+0x82>
 80082ae:	bf00      	nop
 80082b0:	0800e202 	.word	0x0800e202
 80082b4:	0800e693 	.word	0x0800e693

080082b8 <iprintf>:
 80082b8:	b40f      	push	{r0, r1, r2, r3}
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <iprintf+0x2c>)
 80082bc:	b513      	push	{r0, r1, r4, lr}
 80082be:	681c      	ldr	r4, [r3, #0]
 80082c0:	b124      	cbz	r4, 80082cc <iprintf+0x14>
 80082c2:	69a3      	ldr	r3, [r4, #24]
 80082c4:	b913      	cbnz	r3, 80082cc <iprintf+0x14>
 80082c6:	4620      	mov	r0, r4
 80082c8:	f002 f844 	bl	800a354 <__sinit>
 80082cc:	ab05      	add	r3, sp, #20
 80082ce:	9a04      	ldr	r2, [sp, #16]
 80082d0:	68a1      	ldr	r1, [r4, #8]
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	4620      	mov	r0, r4
 80082d6:	f003 fdbb 	bl	800be50 <_vfiprintf_r>
 80082da:	b002      	add	sp, #8
 80082dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e0:	b004      	add	sp, #16
 80082e2:	4770      	bx	lr
 80082e4:	200000c4 	.word	0x200000c4

080082e8 <_puts_r>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	460e      	mov	r6, r1
 80082ec:	4605      	mov	r5, r0
 80082ee:	b118      	cbz	r0, 80082f8 <_puts_r+0x10>
 80082f0:	6983      	ldr	r3, [r0, #24]
 80082f2:	b90b      	cbnz	r3, 80082f8 <_puts_r+0x10>
 80082f4:	f002 f82e 	bl	800a354 <__sinit>
 80082f8:	69ab      	ldr	r3, [r5, #24]
 80082fa:	68ac      	ldr	r4, [r5, #8]
 80082fc:	b913      	cbnz	r3, 8008304 <_puts_r+0x1c>
 80082fe:	4628      	mov	r0, r5
 8008300:	f002 f828 	bl	800a354 <__sinit>
 8008304:	4b2c      	ldr	r3, [pc, #176]	; (80083b8 <_puts_r+0xd0>)
 8008306:	429c      	cmp	r4, r3
 8008308:	d120      	bne.n	800834c <_puts_r+0x64>
 800830a:	686c      	ldr	r4, [r5, #4]
 800830c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800830e:	07db      	lsls	r3, r3, #31
 8008310:	d405      	bmi.n	800831e <_puts_r+0x36>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	0598      	lsls	r0, r3, #22
 8008316:	d402      	bmi.n	800831e <_puts_r+0x36>
 8008318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800831a:	f002 fc2c 	bl	800ab76 <__retarget_lock_acquire_recursive>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	0719      	lsls	r1, r3, #28
 8008322:	d51d      	bpl.n	8008360 <_puts_r+0x78>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	b1db      	cbz	r3, 8008360 <_puts_r+0x78>
 8008328:	3e01      	subs	r6, #1
 800832a:	68a3      	ldr	r3, [r4, #8]
 800832c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008330:	3b01      	subs	r3, #1
 8008332:	60a3      	str	r3, [r4, #8]
 8008334:	bb39      	cbnz	r1, 8008386 <_puts_r+0x9e>
 8008336:	2b00      	cmp	r3, #0
 8008338:	da38      	bge.n	80083ac <_puts_r+0xc4>
 800833a:	4622      	mov	r2, r4
 800833c:	210a      	movs	r1, #10
 800833e:	4628      	mov	r0, r5
 8008340:	f000 ff94 	bl	800926c <__swbuf_r>
 8008344:	3001      	adds	r0, #1
 8008346:	d011      	beq.n	800836c <_puts_r+0x84>
 8008348:	250a      	movs	r5, #10
 800834a:	e011      	b.n	8008370 <_puts_r+0x88>
 800834c:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <_puts_r+0xd4>)
 800834e:	429c      	cmp	r4, r3
 8008350:	d101      	bne.n	8008356 <_puts_r+0x6e>
 8008352:	68ac      	ldr	r4, [r5, #8]
 8008354:	e7da      	b.n	800830c <_puts_r+0x24>
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <_puts_r+0xd8>)
 8008358:	429c      	cmp	r4, r3
 800835a:	bf08      	it	eq
 800835c:	68ec      	ldreq	r4, [r5, #12]
 800835e:	e7d5      	b.n	800830c <_puts_r+0x24>
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	f000 ffe6 	bl	8009334 <__swsetup_r>
 8008368:	2800      	cmp	r0, #0
 800836a:	d0dd      	beq.n	8008328 <_puts_r+0x40>
 800836c:	f04f 35ff 	mov.w	r5, #4294967295
 8008370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008372:	07da      	lsls	r2, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x9a>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	059b      	lsls	r3, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x9a>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f002 fbfb 	bl	800ab78 <__retarget_lock_release_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	2b00      	cmp	r3, #0
 8008388:	da04      	bge.n	8008394 <_puts_r+0xac>
 800838a:	69a2      	ldr	r2, [r4, #24]
 800838c:	429a      	cmp	r2, r3
 800838e:	dc06      	bgt.n	800839e <_puts_r+0xb6>
 8008390:	290a      	cmp	r1, #10
 8008392:	d004      	beq.n	800839e <_puts_r+0xb6>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	7019      	strb	r1, [r3, #0]
 800839c:	e7c5      	b.n	800832a <_puts_r+0x42>
 800839e:	4622      	mov	r2, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 ff63 	bl	800926c <__swbuf_r>
 80083a6:	3001      	adds	r0, #1
 80083a8:	d1bf      	bne.n	800832a <_puts_r+0x42>
 80083aa:	e7df      	b.n	800836c <_puts_r+0x84>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	250a      	movs	r5, #10
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	701d      	strb	r5, [r3, #0]
 80083b6:	e7db      	b.n	8008370 <_puts_r+0x88>
 80083b8:	0800e410 	.word	0x0800e410
 80083bc:	0800e430 	.word	0x0800e430
 80083c0:	0800e3f0 	.word	0x0800e3f0

080083c4 <puts>:
 80083c4:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <puts+0xc>)
 80083c6:	4601      	mov	r1, r0
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f7ff bf8d 	b.w	80082e8 <_puts_r>
 80083ce:	bf00      	nop
 80083d0:	200000c4 	.word	0x200000c4

080083d4 <nanf>:
 80083d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083dc <nanf+0x8>
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	7fc00000 	.word	0x7fc00000

080083e0 <siprintf>:
 80083e0:	b40e      	push	{r1, r2, r3}
 80083e2:	b500      	push	{lr}
 80083e4:	b09c      	sub	sp, #112	; 0x70
 80083e6:	ab1d      	add	r3, sp, #116	; 0x74
 80083e8:	9002      	str	r0, [sp, #8]
 80083ea:	9006      	str	r0, [sp, #24]
 80083ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083f0:	4809      	ldr	r0, [pc, #36]	; (8008418 <siprintf+0x38>)
 80083f2:	9107      	str	r1, [sp, #28]
 80083f4:	9104      	str	r1, [sp, #16]
 80083f6:	4909      	ldr	r1, [pc, #36]	; (800841c <siprintf+0x3c>)
 80083f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fc:	9105      	str	r1, [sp, #20]
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	a902      	add	r1, sp, #8
 8008404:	f003 fa28 	bl	800b858 <_svfiprintf_r>
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	b01c      	add	sp, #112	; 0x70
 8008410:	f85d eb04 	ldr.w	lr, [sp], #4
 8008414:	b003      	add	sp, #12
 8008416:	4770      	bx	lr
 8008418:	200000c4 	.word	0x200000c4
 800841c:	ffff0208 	.word	0xffff0208

08008420 <siscanf>:
 8008420:	b40e      	push	{r1, r2, r3}
 8008422:	b510      	push	{r4, lr}
 8008424:	b09f      	sub	sp, #124	; 0x7c
 8008426:	ac21      	add	r4, sp, #132	; 0x84
 8008428:	f44f 7101 	mov.w	r1, #516	; 0x204
 800842c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008430:	9201      	str	r2, [sp, #4]
 8008432:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008436:	9004      	str	r0, [sp, #16]
 8008438:	9008      	str	r0, [sp, #32]
 800843a:	f7f7 fedb 	bl	80001f4 <strlen>
 800843e:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <siscanf+0x50>)
 8008440:	9005      	str	r0, [sp, #20]
 8008442:	9009      	str	r0, [sp, #36]	; 0x24
 8008444:	930d      	str	r3, [sp, #52]	; 0x34
 8008446:	480b      	ldr	r0, [pc, #44]	; (8008474 <siscanf+0x54>)
 8008448:	9a01      	ldr	r2, [sp, #4]
 800844a:	6800      	ldr	r0, [r0, #0]
 800844c:	9403      	str	r4, [sp, #12]
 800844e:	2300      	movs	r3, #0
 8008450:	9311      	str	r3, [sp, #68]	; 0x44
 8008452:	9316      	str	r3, [sp, #88]	; 0x58
 8008454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008458:	f8ad 301e 	strh.w	r3, [sp, #30]
 800845c:	a904      	add	r1, sp, #16
 800845e:	4623      	mov	r3, r4
 8008460:	f003 fb54 	bl	800bb0c <__ssvfiscanf_r>
 8008464:	b01f      	add	sp, #124	; 0x7c
 8008466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846a:	b003      	add	sp, #12
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	0800849b 	.word	0x0800849b
 8008474:	200000c4 	.word	0x200000c4

08008478 <__sread>:
 8008478:	b510      	push	{r4, lr}
 800847a:	460c      	mov	r4, r1
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	f003 ff62 	bl	800c348 <_read_r>
 8008484:	2800      	cmp	r0, #0
 8008486:	bfab      	itete	ge
 8008488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800848a:	89a3      	ldrhlt	r3, [r4, #12]
 800848c:	181b      	addge	r3, r3, r0
 800848e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008492:	bfac      	ite	ge
 8008494:	6563      	strge	r3, [r4, #84]	; 0x54
 8008496:	81a3      	strhlt	r3, [r4, #12]
 8008498:	bd10      	pop	{r4, pc}

0800849a <__seofread>:
 800849a:	2000      	movs	r0, #0
 800849c:	4770      	bx	lr

0800849e <__swrite>:
 800849e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a2:	461f      	mov	r7, r3
 80084a4:	898b      	ldrh	r3, [r1, #12]
 80084a6:	05db      	lsls	r3, r3, #23
 80084a8:	4605      	mov	r5, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	4616      	mov	r6, r2
 80084ae:	d505      	bpl.n	80084bc <__swrite+0x1e>
 80084b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b4:	2302      	movs	r3, #2
 80084b6:	2200      	movs	r2, #0
 80084b8:	f002 fb60 	bl	800ab7c <_lseek_r>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	4632      	mov	r2, r6
 80084ca:	463b      	mov	r3, r7
 80084cc:	4628      	mov	r0, r5
 80084ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	f000 bf1d 	b.w	8009310 <_write_r>

080084d6 <__sseek>:
 80084d6:	b510      	push	{r4, lr}
 80084d8:	460c      	mov	r4, r1
 80084da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084de:	f002 fb4d 	bl	800ab7c <_lseek_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	bf15      	itete	ne
 80084e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084f2:	81a3      	strheq	r3, [r4, #12]
 80084f4:	bf18      	it	ne
 80084f6:	81a3      	strhne	r3, [r4, #12]
 80084f8:	bd10      	pop	{r4, pc}

080084fa <__sclose>:
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	f000 bf87 	b.w	8009410 <_close_r>

08008502 <sulp>:
 8008502:	b570      	push	{r4, r5, r6, lr}
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	ec45 4b10 	vmov	d0, r4, r5
 800850c:	4616      	mov	r6, r2
 800850e:	f002 ff3f 	bl	800b390 <__ulp>
 8008512:	ec51 0b10 	vmov	r0, r1, d0
 8008516:	b17e      	cbz	r6, 8008538 <sulp+0x36>
 8008518:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800851c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008520:	2b00      	cmp	r3, #0
 8008522:	dd09      	ble.n	8008538 <sulp+0x36>
 8008524:	051b      	lsls	r3, r3, #20
 8008526:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800852a:	2400      	movs	r4, #0
 800852c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008530:	4622      	mov	r2, r4
 8008532:	462b      	mov	r3, r5
 8008534:	f7f8 f878 	bl	8000628 <__aeabi_dmul>
 8008538:	bd70      	pop	{r4, r5, r6, pc}
 800853a:	0000      	movs	r0, r0
 800853c:	0000      	movs	r0, r0
	...

08008540 <_strtod_l>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	b0a3      	sub	sp, #140	; 0x8c
 8008546:	461f      	mov	r7, r3
 8008548:	2300      	movs	r3, #0
 800854a:	931e      	str	r3, [sp, #120]	; 0x78
 800854c:	4ba4      	ldr	r3, [pc, #656]	; (80087e0 <_strtod_l+0x2a0>)
 800854e:	9219      	str	r2, [sp, #100]	; 0x64
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	9307      	str	r3, [sp, #28]
 8008554:	4604      	mov	r4, r0
 8008556:	4618      	mov	r0, r3
 8008558:	4688      	mov	r8, r1
 800855a:	f7f7 fe4b 	bl	80001f4 <strlen>
 800855e:	f04f 0a00 	mov.w	sl, #0
 8008562:	4605      	mov	r5, r0
 8008564:	f04f 0b00 	mov.w	fp, #0
 8008568:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800856c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800856e:	781a      	ldrb	r2, [r3, #0]
 8008570:	2a2b      	cmp	r2, #43	; 0x2b
 8008572:	d04c      	beq.n	800860e <_strtod_l+0xce>
 8008574:	d839      	bhi.n	80085ea <_strtod_l+0xaa>
 8008576:	2a0d      	cmp	r2, #13
 8008578:	d832      	bhi.n	80085e0 <_strtod_l+0xa0>
 800857a:	2a08      	cmp	r2, #8
 800857c:	d832      	bhi.n	80085e4 <_strtod_l+0xa4>
 800857e:	2a00      	cmp	r2, #0
 8008580:	d03c      	beq.n	80085fc <_strtod_l+0xbc>
 8008582:	2300      	movs	r3, #0
 8008584:	930e      	str	r3, [sp, #56]	; 0x38
 8008586:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008588:	7833      	ldrb	r3, [r6, #0]
 800858a:	2b30      	cmp	r3, #48	; 0x30
 800858c:	f040 80b4 	bne.w	80086f8 <_strtod_l+0x1b8>
 8008590:	7873      	ldrb	r3, [r6, #1]
 8008592:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008596:	2b58      	cmp	r3, #88	; 0x58
 8008598:	d16c      	bne.n	8008674 <_strtod_l+0x134>
 800859a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	ab1e      	add	r3, sp, #120	; 0x78
 80085a0:	9702      	str	r7, [sp, #8]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4a8f      	ldr	r2, [pc, #572]	; (80087e4 <_strtod_l+0x2a4>)
 80085a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80085a8:	a91d      	add	r1, sp, #116	; 0x74
 80085aa:	4620      	mov	r0, r4
 80085ac:	f001 ffd6 	bl	800a55c <__gethex>
 80085b0:	f010 0707 	ands.w	r7, r0, #7
 80085b4:	4605      	mov	r5, r0
 80085b6:	d005      	beq.n	80085c4 <_strtod_l+0x84>
 80085b8:	2f06      	cmp	r7, #6
 80085ba:	d12a      	bne.n	8008612 <_strtod_l+0xd2>
 80085bc:	3601      	adds	r6, #1
 80085be:	2300      	movs	r3, #0
 80085c0:	961d      	str	r6, [sp, #116]	; 0x74
 80085c2:	930e      	str	r3, [sp, #56]	; 0x38
 80085c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 8596 	bne.w	80090f8 <_strtod_l+0xbb8>
 80085cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ce:	b1db      	cbz	r3, 8008608 <_strtod_l+0xc8>
 80085d0:	4652      	mov	r2, sl
 80085d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085d6:	ec43 2b10 	vmov	d0, r2, r3
 80085da:	b023      	add	sp, #140	; 0x8c
 80085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e0:	2a20      	cmp	r2, #32
 80085e2:	d1ce      	bne.n	8008582 <_strtod_l+0x42>
 80085e4:	3301      	adds	r3, #1
 80085e6:	931d      	str	r3, [sp, #116]	; 0x74
 80085e8:	e7c0      	b.n	800856c <_strtod_l+0x2c>
 80085ea:	2a2d      	cmp	r2, #45	; 0x2d
 80085ec:	d1c9      	bne.n	8008582 <_strtod_l+0x42>
 80085ee:	2201      	movs	r2, #1
 80085f0:	920e      	str	r2, [sp, #56]	; 0x38
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	921d      	str	r2, [sp, #116]	; 0x74
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1c4      	bne.n	8008586 <_strtod_l+0x46>
 80085fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 8576 	bne.w	80090f4 <_strtod_l+0xbb4>
 8008608:	4652      	mov	r2, sl
 800860a:	465b      	mov	r3, fp
 800860c:	e7e3      	b.n	80085d6 <_strtod_l+0x96>
 800860e:	2200      	movs	r2, #0
 8008610:	e7ee      	b.n	80085f0 <_strtod_l+0xb0>
 8008612:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008614:	b13a      	cbz	r2, 8008626 <_strtod_l+0xe6>
 8008616:	2135      	movs	r1, #53	; 0x35
 8008618:	a820      	add	r0, sp, #128	; 0x80
 800861a:	f002 ffc4 	bl	800b5a6 <__copybits>
 800861e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008620:	4620      	mov	r0, r4
 8008622:	f002 fb89 	bl	800ad38 <_Bfree>
 8008626:	3f01      	subs	r7, #1
 8008628:	2f05      	cmp	r7, #5
 800862a:	d807      	bhi.n	800863c <_strtod_l+0xfc>
 800862c:	e8df f007 	tbb	[pc, r7]
 8008630:	1d180b0e 	.word	0x1d180b0e
 8008634:	030e      	.short	0x030e
 8008636:	f04f 0b00 	mov.w	fp, #0
 800863a:	46da      	mov	sl, fp
 800863c:	0728      	lsls	r0, r5, #28
 800863e:	d5c1      	bpl.n	80085c4 <_strtod_l+0x84>
 8008640:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008644:	e7be      	b.n	80085c4 <_strtod_l+0x84>
 8008646:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800864a:	e7f7      	b.n	800863c <_strtod_l+0xfc>
 800864c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008650:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008656:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800865a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800865e:	e7ed      	b.n	800863c <_strtod_l+0xfc>
 8008660:	f8df b184 	ldr.w	fp, [pc, #388]	; 80087e8 <_strtod_l+0x2a8>
 8008664:	f04f 0a00 	mov.w	sl, #0
 8008668:	e7e8      	b.n	800863c <_strtod_l+0xfc>
 800866a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800866e:	f04f 3aff 	mov.w	sl, #4294967295
 8008672:	e7e3      	b.n	800863c <_strtod_l+0xfc>
 8008674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	921d      	str	r2, [sp, #116]	; 0x74
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d0f9      	beq.n	8008674 <_strtod_l+0x134>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d09f      	beq.n	80085c4 <_strtod_l+0x84>
 8008684:	2301      	movs	r3, #1
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800868e:	930a      	str	r3, [sp, #40]	; 0x28
 8008690:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008694:	464f      	mov	r7, r9
 8008696:	220a      	movs	r2, #10
 8008698:	981d      	ldr	r0, [sp, #116]	; 0x74
 800869a:	7806      	ldrb	r6, [r0, #0]
 800869c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80086a0:	b2d9      	uxtb	r1, r3
 80086a2:	2909      	cmp	r1, #9
 80086a4:	d92a      	bls.n	80086fc <_strtod_l+0x1bc>
 80086a6:	9907      	ldr	r1, [sp, #28]
 80086a8:	462a      	mov	r2, r5
 80086aa:	f003 feb3 	bl	800c414 <strncmp>
 80086ae:	b398      	cbz	r0, 8008718 <_strtod_l+0x1d8>
 80086b0:	2000      	movs	r0, #0
 80086b2:	4633      	mov	r3, r6
 80086b4:	463d      	mov	r5, r7
 80086b6:	9007      	str	r0, [sp, #28]
 80086b8:	4602      	mov	r2, r0
 80086ba:	2b65      	cmp	r3, #101	; 0x65
 80086bc:	d001      	beq.n	80086c2 <_strtod_l+0x182>
 80086be:	2b45      	cmp	r3, #69	; 0x45
 80086c0:	d118      	bne.n	80086f4 <_strtod_l+0x1b4>
 80086c2:	b91d      	cbnz	r5, 80086cc <_strtod_l+0x18c>
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	4303      	orrs	r3, r0
 80086c8:	d098      	beq.n	80085fc <_strtod_l+0xbc>
 80086ca:	2500      	movs	r5, #0
 80086cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80086d0:	f108 0301 	add.w	r3, r8, #1
 80086d4:	931d      	str	r3, [sp, #116]	; 0x74
 80086d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80086da:	2b2b      	cmp	r3, #43	; 0x2b
 80086dc:	d075      	beq.n	80087ca <_strtod_l+0x28a>
 80086de:	2b2d      	cmp	r3, #45	; 0x2d
 80086e0:	d07b      	beq.n	80087da <_strtod_l+0x29a>
 80086e2:	f04f 0c00 	mov.w	ip, #0
 80086e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80086ea:	2909      	cmp	r1, #9
 80086ec:	f240 8082 	bls.w	80087f4 <_strtod_l+0x2b4>
 80086f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80086f4:	2600      	movs	r6, #0
 80086f6:	e09d      	b.n	8008834 <_strtod_l+0x2f4>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e7c4      	b.n	8008686 <_strtod_l+0x146>
 80086fc:	2f08      	cmp	r7, #8
 80086fe:	bfd8      	it	le
 8008700:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008702:	f100 0001 	add.w	r0, r0, #1
 8008706:	bfda      	itte	le
 8008708:	fb02 3301 	mlale	r3, r2, r1, r3
 800870c:	9309      	strle	r3, [sp, #36]	; 0x24
 800870e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008712:	3701      	adds	r7, #1
 8008714:	901d      	str	r0, [sp, #116]	; 0x74
 8008716:	e7bf      	b.n	8008698 <_strtod_l+0x158>
 8008718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800871a:	195a      	adds	r2, r3, r5
 800871c:	921d      	str	r2, [sp, #116]	; 0x74
 800871e:	5d5b      	ldrb	r3, [r3, r5]
 8008720:	2f00      	cmp	r7, #0
 8008722:	d037      	beq.n	8008794 <_strtod_l+0x254>
 8008724:	9007      	str	r0, [sp, #28]
 8008726:	463d      	mov	r5, r7
 8008728:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800872c:	2a09      	cmp	r2, #9
 800872e:	d912      	bls.n	8008756 <_strtod_l+0x216>
 8008730:	2201      	movs	r2, #1
 8008732:	e7c2      	b.n	80086ba <_strtod_l+0x17a>
 8008734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	921d      	str	r2, [sp, #116]	; 0x74
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	3001      	adds	r0, #1
 800873e:	2b30      	cmp	r3, #48	; 0x30
 8008740:	d0f8      	beq.n	8008734 <_strtod_l+0x1f4>
 8008742:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008746:	2a08      	cmp	r2, #8
 8008748:	f200 84db 	bhi.w	8009102 <_strtod_l+0xbc2>
 800874c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800874e:	9007      	str	r0, [sp, #28]
 8008750:	2000      	movs	r0, #0
 8008752:	920a      	str	r2, [sp, #40]	; 0x28
 8008754:	4605      	mov	r5, r0
 8008756:	3b30      	subs	r3, #48	; 0x30
 8008758:	f100 0201 	add.w	r2, r0, #1
 800875c:	d014      	beq.n	8008788 <_strtod_l+0x248>
 800875e:	9907      	ldr	r1, [sp, #28]
 8008760:	4411      	add	r1, r2
 8008762:	9107      	str	r1, [sp, #28]
 8008764:	462a      	mov	r2, r5
 8008766:	eb00 0e05 	add.w	lr, r0, r5
 800876a:	210a      	movs	r1, #10
 800876c:	4572      	cmp	r2, lr
 800876e:	d113      	bne.n	8008798 <_strtod_l+0x258>
 8008770:	182a      	adds	r2, r5, r0
 8008772:	2a08      	cmp	r2, #8
 8008774:	f105 0501 	add.w	r5, r5, #1
 8008778:	4405      	add	r5, r0
 800877a:	dc1c      	bgt.n	80087b6 <_strtod_l+0x276>
 800877c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800877e:	220a      	movs	r2, #10
 8008780:	fb02 3301 	mla	r3, r2, r1, r3
 8008784:	9309      	str	r3, [sp, #36]	; 0x24
 8008786:	2200      	movs	r2, #0
 8008788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800878a:	1c59      	adds	r1, r3, #1
 800878c:	911d      	str	r1, [sp, #116]	; 0x74
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	4610      	mov	r0, r2
 8008792:	e7c9      	b.n	8008728 <_strtod_l+0x1e8>
 8008794:	4638      	mov	r0, r7
 8008796:	e7d2      	b.n	800873e <_strtod_l+0x1fe>
 8008798:	2a08      	cmp	r2, #8
 800879a:	dc04      	bgt.n	80087a6 <_strtod_l+0x266>
 800879c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800879e:	434e      	muls	r6, r1
 80087a0:	9609      	str	r6, [sp, #36]	; 0x24
 80087a2:	3201      	adds	r2, #1
 80087a4:	e7e2      	b.n	800876c <_strtod_l+0x22c>
 80087a6:	f102 0c01 	add.w	ip, r2, #1
 80087aa:	f1bc 0f10 	cmp.w	ip, #16
 80087ae:	bfd8      	it	le
 80087b0:	fb01 f909 	mulle.w	r9, r1, r9
 80087b4:	e7f5      	b.n	80087a2 <_strtod_l+0x262>
 80087b6:	2d10      	cmp	r5, #16
 80087b8:	bfdc      	itt	le
 80087ba:	220a      	movle	r2, #10
 80087bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80087c0:	e7e1      	b.n	8008786 <_strtod_l+0x246>
 80087c2:	2300      	movs	r3, #0
 80087c4:	9307      	str	r3, [sp, #28]
 80087c6:	2201      	movs	r2, #1
 80087c8:	e77c      	b.n	80086c4 <_strtod_l+0x184>
 80087ca:	f04f 0c00 	mov.w	ip, #0
 80087ce:	f108 0302 	add.w	r3, r8, #2
 80087d2:	931d      	str	r3, [sp, #116]	; 0x74
 80087d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80087d8:	e785      	b.n	80086e6 <_strtod_l+0x1a6>
 80087da:	f04f 0c01 	mov.w	ip, #1
 80087de:	e7f6      	b.n	80087ce <_strtod_l+0x28e>
 80087e0:	0800e4bc 	.word	0x0800e4bc
 80087e4:	0800e208 	.word	0x0800e208
 80087e8:	7ff00000 	.word	0x7ff00000
 80087ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087ee:	1c59      	adds	r1, r3, #1
 80087f0:	911d      	str	r1, [sp, #116]	; 0x74
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	2b30      	cmp	r3, #48	; 0x30
 80087f6:	d0f9      	beq.n	80087ec <_strtod_l+0x2ac>
 80087f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80087fc:	2908      	cmp	r1, #8
 80087fe:	f63f af79 	bhi.w	80086f4 <_strtod_l+0x1b4>
 8008802:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008808:	9308      	str	r3, [sp, #32]
 800880a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800880c:	1c59      	adds	r1, r3, #1
 800880e:	911d      	str	r1, [sp, #116]	; 0x74
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008816:	2e09      	cmp	r6, #9
 8008818:	d937      	bls.n	800888a <_strtod_l+0x34a>
 800881a:	9e08      	ldr	r6, [sp, #32]
 800881c:	1b89      	subs	r1, r1, r6
 800881e:	2908      	cmp	r1, #8
 8008820:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008824:	dc02      	bgt.n	800882c <_strtod_l+0x2ec>
 8008826:	4576      	cmp	r6, lr
 8008828:	bfa8      	it	ge
 800882a:	4676      	movge	r6, lr
 800882c:	f1bc 0f00 	cmp.w	ip, #0
 8008830:	d000      	beq.n	8008834 <_strtod_l+0x2f4>
 8008832:	4276      	negs	r6, r6
 8008834:	2d00      	cmp	r5, #0
 8008836:	d14f      	bne.n	80088d8 <_strtod_l+0x398>
 8008838:	9904      	ldr	r1, [sp, #16]
 800883a:	4301      	orrs	r1, r0
 800883c:	f47f aec2 	bne.w	80085c4 <_strtod_l+0x84>
 8008840:	2a00      	cmp	r2, #0
 8008842:	f47f aedb 	bne.w	80085fc <_strtod_l+0xbc>
 8008846:	2b69      	cmp	r3, #105	; 0x69
 8008848:	d027      	beq.n	800889a <_strtod_l+0x35a>
 800884a:	dc24      	bgt.n	8008896 <_strtod_l+0x356>
 800884c:	2b49      	cmp	r3, #73	; 0x49
 800884e:	d024      	beq.n	800889a <_strtod_l+0x35a>
 8008850:	2b4e      	cmp	r3, #78	; 0x4e
 8008852:	f47f aed3 	bne.w	80085fc <_strtod_l+0xbc>
 8008856:	499e      	ldr	r1, [pc, #632]	; (8008ad0 <_strtod_l+0x590>)
 8008858:	a81d      	add	r0, sp, #116	; 0x74
 800885a:	f002 f8d7 	bl	800aa0c <__match>
 800885e:	2800      	cmp	r0, #0
 8008860:	f43f aecc 	beq.w	80085fc <_strtod_l+0xbc>
 8008864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b28      	cmp	r3, #40	; 0x28
 800886a:	d12d      	bne.n	80088c8 <_strtod_l+0x388>
 800886c:	4999      	ldr	r1, [pc, #612]	; (8008ad4 <_strtod_l+0x594>)
 800886e:	aa20      	add	r2, sp, #128	; 0x80
 8008870:	a81d      	add	r0, sp, #116	; 0x74
 8008872:	f002 f8df 	bl	800aa34 <__hexnan>
 8008876:	2805      	cmp	r0, #5
 8008878:	d126      	bne.n	80088c8 <_strtod_l+0x388>
 800887a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800887c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008880:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008884:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008888:	e69c      	b.n	80085c4 <_strtod_l+0x84>
 800888a:	210a      	movs	r1, #10
 800888c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008890:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008894:	e7b9      	b.n	800880a <_strtod_l+0x2ca>
 8008896:	2b6e      	cmp	r3, #110	; 0x6e
 8008898:	e7db      	b.n	8008852 <_strtod_l+0x312>
 800889a:	498f      	ldr	r1, [pc, #572]	; (8008ad8 <_strtod_l+0x598>)
 800889c:	a81d      	add	r0, sp, #116	; 0x74
 800889e:	f002 f8b5 	bl	800aa0c <__match>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f43f aeaa 	beq.w	80085fc <_strtod_l+0xbc>
 80088a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088aa:	498c      	ldr	r1, [pc, #560]	; (8008adc <_strtod_l+0x59c>)
 80088ac:	3b01      	subs	r3, #1
 80088ae:	a81d      	add	r0, sp, #116	; 0x74
 80088b0:	931d      	str	r3, [sp, #116]	; 0x74
 80088b2:	f002 f8ab 	bl	800aa0c <__match>
 80088b6:	b910      	cbnz	r0, 80088be <_strtod_l+0x37e>
 80088b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088ba:	3301      	adds	r3, #1
 80088bc:	931d      	str	r3, [sp, #116]	; 0x74
 80088be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008aec <_strtod_l+0x5ac>
 80088c2:	f04f 0a00 	mov.w	sl, #0
 80088c6:	e67d      	b.n	80085c4 <_strtod_l+0x84>
 80088c8:	4885      	ldr	r0, [pc, #532]	; (8008ae0 <_strtod_l+0x5a0>)
 80088ca:	f003 fd51 	bl	800c370 <nan>
 80088ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80088d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80088d6:	e675      	b.n	80085c4 <_strtod_l+0x84>
 80088d8:	9b07      	ldr	r3, [sp, #28]
 80088da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088dc:	1af3      	subs	r3, r6, r3
 80088de:	2f00      	cmp	r7, #0
 80088e0:	bf08      	it	eq
 80088e2:	462f      	moveq	r7, r5
 80088e4:	2d10      	cmp	r5, #16
 80088e6:	9308      	str	r3, [sp, #32]
 80088e8:	46a8      	mov	r8, r5
 80088ea:	bfa8      	it	ge
 80088ec:	f04f 0810 	movge.w	r8, #16
 80088f0:	f7f7 fe20 	bl	8000534 <__aeabi_ui2d>
 80088f4:	2d09      	cmp	r5, #9
 80088f6:	4682      	mov	sl, r0
 80088f8:	468b      	mov	fp, r1
 80088fa:	dd13      	ble.n	8008924 <_strtod_l+0x3e4>
 80088fc:	4b79      	ldr	r3, [pc, #484]	; (8008ae4 <_strtod_l+0x5a4>)
 80088fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008902:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008906:	f7f7 fe8f 	bl	8000628 <__aeabi_dmul>
 800890a:	4682      	mov	sl, r0
 800890c:	4648      	mov	r0, r9
 800890e:	468b      	mov	fp, r1
 8008910:	f7f7 fe10 	bl	8000534 <__aeabi_ui2d>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4650      	mov	r0, sl
 800891a:	4659      	mov	r1, fp
 800891c:	f7f7 fcce 	bl	80002bc <__adddf3>
 8008920:	4682      	mov	sl, r0
 8008922:	468b      	mov	fp, r1
 8008924:	2d0f      	cmp	r5, #15
 8008926:	dc38      	bgt.n	800899a <_strtod_l+0x45a>
 8008928:	9b08      	ldr	r3, [sp, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f43f ae4a 	beq.w	80085c4 <_strtod_l+0x84>
 8008930:	dd24      	ble.n	800897c <_strtod_l+0x43c>
 8008932:	2b16      	cmp	r3, #22
 8008934:	dc0b      	bgt.n	800894e <_strtod_l+0x40e>
 8008936:	4d6b      	ldr	r5, [pc, #428]	; (8008ae4 <_strtod_l+0x5a4>)
 8008938:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800893c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008940:	4652      	mov	r2, sl
 8008942:	465b      	mov	r3, fp
 8008944:	f7f7 fe70 	bl	8000628 <__aeabi_dmul>
 8008948:	4682      	mov	sl, r0
 800894a:	468b      	mov	fp, r1
 800894c:	e63a      	b.n	80085c4 <_strtod_l+0x84>
 800894e:	9a08      	ldr	r2, [sp, #32]
 8008950:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008954:	4293      	cmp	r3, r2
 8008956:	db20      	blt.n	800899a <_strtod_l+0x45a>
 8008958:	4c62      	ldr	r4, [pc, #392]	; (8008ae4 <_strtod_l+0x5a4>)
 800895a:	f1c5 050f 	rsb	r5, r5, #15
 800895e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008962:	4652      	mov	r2, sl
 8008964:	465b      	mov	r3, fp
 8008966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800896a:	f7f7 fe5d 	bl	8000628 <__aeabi_dmul>
 800896e:	9b08      	ldr	r3, [sp, #32]
 8008970:	1b5d      	subs	r5, r3, r5
 8008972:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008976:	e9d4 2300 	ldrd	r2, r3, [r4]
 800897a:	e7e3      	b.n	8008944 <_strtod_l+0x404>
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	3316      	adds	r3, #22
 8008980:	db0b      	blt.n	800899a <_strtod_l+0x45a>
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	4a57      	ldr	r2, [pc, #348]	; (8008ae4 <_strtod_l+0x5a4>)
 8008986:	1b9e      	subs	r6, r3, r6
 8008988:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800898c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008990:	4650      	mov	r0, sl
 8008992:	4659      	mov	r1, fp
 8008994:	f7f7 ff72 	bl	800087c <__aeabi_ddiv>
 8008998:	e7d6      	b.n	8008948 <_strtod_l+0x408>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	eba5 0808 	sub.w	r8, r5, r8
 80089a0:	4498      	add	r8, r3
 80089a2:	f1b8 0f00 	cmp.w	r8, #0
 80089a6:	dd71      	ble.n	8008a8c <_strtod_l+0x54c>
 80089a8:	f018 030f 	ands.w	r3, r8, #15
 80089ac:	d00a      	beq.n	80089c4 <_strtod_l+0x484>
 80089ae:	494d      	ldr	r1, [pc, #308]	; (8008ae4 <_strtod_l+0x5a4>)
 80089b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089b4:	4652      	mov	r2, sl
 80089b6:	465b      	mov	r3, fp
 80089b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089bc:	f7f7 fe34 	bl	8000628 <__aeabi_dmul>
 80089c0:	4682      	mov	sl, r0
 80089c2:	468b      	mov	fp, r1
 80089c4:	f038 080f 	bics.w	r8, r8, #15
 80089c8:	d04d      	beq.n	8008a66 <_strtod_l+0x526>
 80089ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80089ce:	dd22      	ble.n	8008a16 <_strtod_l+0x4d6>
 80089d0:	2500      	movs	r5, #0
 80089d2:	462e      	mov	r6, r5
 80089d4:	9509      	str	r5, [sp, #36]	; 0x24
 80089d6:	9507      	str	r5, [sp, #28]
 80089d8:	2322      	movs	r3, #34	; 0x22
 80089da:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008aec <_strtod_l+0x5ac>
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	f04f 0a00 	mov.w	sl, #0
 80089e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f43f adec 	beq.w	80085c4 <_strtod_l+0x84>
 80089ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80089ee:	4620      	mov	r0, r4
 80089f0:	f002 f9a2 	bl	800ad38 <_Bfree>
 80089f4:	9907      	ldr	r1, [sp, #28]
 80089f6:	4620      	mov	r0, r4
 80089f8:	f002 f99e 	bl	800ad38 <_Bfree>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4620      	mov	r0, r4
 8008a00:	f002 f99a 	bl	800ad38 <_Bfree>
 8008a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a06:	4620      	mov	r0, r4
 8008a08:	f002 f996 	bl	800ad38 <_Bfree>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f002 f992 	bl	800ad38 <_Bfree>
 8008a14:	e5d6      	b.n	80085c4 <_strtod_l+0x84>
 8008a16:	2300      	movs	r3, #0
 8008a18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	4659      	mov	r1, fp
 8008a20:	4699      	mov	r9, r3
 8008a22:	f1b8 0f01 	cmp.w	r8, #1
 8008a26:	dc21      	bgt.n	8008a6c <_strtod_l+0x52c>
 8008a28:	b10b      	cbz	r3, 8008a2e <_strtod_l+0x4ee>
 8008a2a:	4682      	mov	sl, r0
 8008a2c:	468b      	mov	fp, r1
 8008a2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ae8 <_strtod_l+0x5a8>)
 8008a30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a34:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008a38:	4652      	mov	r2, sl
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a40:	f7f7 fdf2 	bl	8000628 <__aeabi_dmul>
 8008a44:	4b29      	ldr	r3, [pc, #164]	; (8008aec <_strtod_l+0x5ac>)
 8008a46:	460a      	mov	r2, r1
 8008a48:	400b      	ands	r3, r1
 8008a4a:	4929      	ldr	r1, [pc, #164]	; (8008af0 <_strtod_l+0x5b0>)
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	4682      	mov	sl, r0
 8008a50:	d8be      	bhi.n	80089d0 <_strtod_l+0x490>
 8008a52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a56:	428b      	cmp	r3, r1
 8008a58:	bf86      	itte	hi
 8008a5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008af4 <_strtod_l+0x5b4>
 8008a5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008a66:	2300      	movs	r3, #0
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	e081      	b.n	8008b70 <_strtod_l+0x630>
 8008a6c:	f018 0f01 	tst.w	r8, #1
 8008a70:	d007      	beq.n	8008a82 <_strtod_l+0x542>
 8008a72:	4b1d      	ldr	r3, [pc, #116]	; (8008ae8 <_strtod_l+0x5a8>)
 8008a74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f7f7 fdd4 	bl	8000628 <__aeabi_dmul>
 8008a80:	2301      	movs	r3, #1
 8008a82:	f109 0901 	add.w	r9, r9, #1
 8008a86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a8a:	e7ca      	b.n	8008a22 <_strtod_l+0x4e2>
 8008a8c:	d0eb      	beq.n	8008a66 <_strtod_l+0x526>
 8008a8e:	f1c8 0800 	rsb	r8, r8, #0
 8008a92:	f018 020f 	ands.w	r2, r8, #15
 8008a96:	d00a      	beq.n	8008aae <_strtod_l+0x56e>
 8008a98:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <_strtod_l+0x5a4>)
 8008a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fee9 	bl	800087c <__aeabi_ddiv>
 8008aaa:	4682      	mov	sl, r0
 8008aac:	468b      	mov	fp, r1
 8008aae:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ab2:	d0d8      	beq.n	8008a66 <_strtod_l+0x526>
 8008ab4:	f1b8 0f1f 	cmp.w	r8, #31
 8008ab8:	dd1e      	ble.n	8008af8 <_strtod_l+0x5b8>
 8008aba:	2500      	movs	r5, #0
 8008abc:	462e      	mov	r6, r5
 8008abe:	9509      	str	r5, [sp, #36]	; 0x24
 8008ac0:	9507      	str	r5, [sp, #28]
 8008ac2:	2322      	movs	r3, #34	; 0x22
 8008ac4:	f04f 0a00 	mov.w	sl, #0
 8008ac8:	f04f 0b00 	mov.w	fp, #0
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	e789      	b.n	80089e4 <_strtod_l+0x4a4>
 8008ad0:	0800e1dd 	.word	0x0800e1dd
 8008ad4:	0800e21c 	.word	0x0800e21c
 8008ad8:	0800e1d5 	.word	0x0800e1d5
 8008adc:	0800e35c 	.word	0x0800e35c
 8008ae0:	0800e693 	.word	0x0800e693
 8008ae4:	0800e558 	.word	0x0800e558
 8008ae8:	0800e530 	.word	0x0800e530
 8008aec:	7ff00000 	.word	0x7ff00000
 8008af0:	7ca00000 	.word	0x7ca00000
 8008af4:	7fefffff 	.word	0x7fefffff
 8008af8:	f018 0310 	ands.w	r3, r8, #16
 8008afc:	bf18      	it	ne
 8008afe:	236a      	movne	r3, #106	; 0x6a
 8008b00:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008eb8 <_strtod_l+0x978>
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	4650      	mov	r0, sl
 8008b08:	4659      	mov	r1, fp
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f018 0f01 	tst.w	r8, #1
 8008b10:	d004      	beq.n	8008b1c <_strtod_l+0x5dc>
 8008b12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b16:	f7f7 fd87 	bl	8000628 <__aeabi_dmul>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008b20:	f109 0908 	add.w	r9, r9, #8
 8008b24:	d1f2      	bne.n	8008b0c <_strtod_l+0x5cc>
 8008b26:	b10b      	cbz	r3, 8008b2c <_strtod_l+0x5ec>
 8008b28:	4682      	mov	sl, r0
 8008b2a:	468b      	mov	fp, r1
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	b1bb      	cbz	r3, 8008b60 <_strtod_l+0x620>
 8008b30:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008b34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	4659      	mov	r1, fp
 8008b3c:	dd10      	ble.n	8008b60 <_strtod_l+0x620>
 8008b3e:	2b1f      	cmp	r3, #31
 8008b40:	f340 8128 	ble.w	8008d94 <_strtod_l+0x854>
 8008b44:	2b34      	cmp	r3, #52	; 0x34
 8008b46:	bfde      	ittt	le
 8008b48:	3b20      	suble	r3, #32
 8008b4a:	f04f 32ff 	movle.w	r2, #4294967295
 8008b4e:	fa02 f303 	lslle.w	r3, r2, r3
 8008b52:	f04f 0a00 	mov.w	sl, #0
 8008b56:	bfcc      	ite	gt
 8008b58:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008b5c:	ea03 0b01 	andle.w	fp, r3, r1
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	4650      	mov	r0, sl
 8008b66:	4659      	mov	r1, fp
 8008b68:	f7f7 ffc6 	bl	8000af8 <__aeabi_dcmpeq>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1a4      	bne.n	8008aba <_strtod_l+0x57a>
 8008b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b76:	462b      	mov	r3, r5
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f002 f948 	bl	800ae10 <__s2b>
 8008b80:	9009      	str	r0, [sp, #36]	; 0x24
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f43f af24 	beq.w	80089d0 <_strtod_l+0x490>
 8008b88:	9b07      	ldr	r3, [sp, #28]
 8008b8a:	1b9e      	subs	r6, r3, r6
 8008b8c:	9b08      	ldr	r3, [sp, #32]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfb4      	ite	lt
 8008b92:	4633      	movlt	r3, r6
 8008b94:	2300      	movge	r3, #0
 8008b96:	9310      	str	r3, [sp, #64]	; 0x40
 8008b98:	9b08      	ldr	r3, [sp, #32]
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ba0:	9318      	str	r3, [sp, #96]	; 0x60
 8008ba2:	462e      	mov	r6, r5
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	6859      	ldr	r1, [r3, #4]
 8008baa:	f002 f885 	bl	800acb8 <_Balloc>
 8008bae:	9007      	str	r0, [sp, #28]
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f43f af11 	beq.w	80089d8 <_strtod_l+0x498>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb8:	691a      	ldr	r2, [r3, #16]
 8008bba:	3202      	adds	r2, #2
 8008bbc:	f103 010c 	add.w	r1, r3, #12
 8008bc0:	0092      	lsls	r2, r2, #2
 8008bc2:	300c      	adds	r0, #12
 8008bc4:	f002 f86a 	bl	800ac9c <memcpy>
 8008bc8:	ec4b ab10 	vmov	d0, sl, fp
 8008bcc:	aa20      	add	r2, sp, #128	; 0x80
 8008bce:	a91f      	add	r1, sp, #124	; 0x7c
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008bd6:	f002 fc57 	bl	800b488 <__d2b>
 8008bda:	901e      	str	r0, [sp, #120]	; 0x78
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f43f aefb 	beq.w	80089d8 <_strtod_l+0x498>
 8008be2:	2101      	movs	r1, #1
 8008be4:	4620      	mov	r0, r4
 8008be6:	f002 f9ad 	bl	800af44 <__i2b>
 8008bea:	4606      	mov	r6, r0
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f43f aef3 	beq.w	80089d8 <_strtod_l+0x498>
 8008bf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bf4:	9904      	ldr	r1, [sp, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	bfab      	itete	ge
 8008bfa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008bfc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008bfe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008c00:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008c04:	bfac      	ite	ge
 8008c06:	eb03 0902 	addge.w	r9, r3, r2
 8008c0a:	1ad7      	sublt	r7, r2, r3
 8008c0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c0e:	eba3 0801 	sub.w	r8, r3, r1
 8008c12:	4490      	add	r8, r2
 8008c14:	4ba3      	ldr	r3, [pc, #652]	; (8008ea4 <_strtod_l+0x964>)
 8008c16:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c1a:	4598      	cmp	r8, r3
 8008c1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c20:	f280 80cc 	bge.w	8008dbc <_strtod_l+0x87c>
 8008c24:	eba3 0308 	sub.w	r3, r3, r8
 8008c28:	2b1f      	cmp	r3, #31
 8008c2a:	eba2 0203 	sub.w	r2, r2, r3
 8008c2e:	f04f 0101 	mov.w	r1, #1
 8008c32:	f300 80b6 	bgt.w	8008da2 <_strtod_l+0x862>
 8008c36:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c40:	eb09 0802 	add.w	r8, r9, r2
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	45c1      	cmp	r9, r8
 8008c48:	4417      	add	r7, r2
 8008c4a:	441f      	add	r7, r3
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	bfa8      	it	ge
 8008c50:	4643      	movge	r3, r8
 8008c52:	42bb      	cmp	r3, r7
 8008c54:	bfa8      	it	ge
 8008c56:	463b      	movge	r3, r7
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfc2      	ittt	gt
 8008c5c:	eba8 0803 	subgt.w	r8, r8, r3
 8008c60:	1aff      	subgt	r7, r7, r3
 8008c62:	eba9 0903 	subgt.w	r9, r9, r3
 8008c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dd17      	ble.n	8008c9c <_strtod_l+0x75c>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4620      	mov	r0, r4
 8008c72:	f002 fa23 	bl	800b0bc <__pow5mult>
 8008c76:	4606      	mov	r6, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	f43f aead 	beq.w	80089d8 <_strtod_l+0x498>
 8008c7e:	4601      	mov	r1, r0
 8008c80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c82:	4620      	mov	r0, r4
 8008c84:	f002 f974 	bl	800af70 <__multiply>
 8008c88:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aea4 	beq.w	80089d8 <_strtod_l+0x498>
 8008c90:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c92:	4620      	mov	r0, r4
 8008c94:	f002 f850 	bl	800ad38 <_Bfree>
 8008c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c9a:	931e      	str	r3, [sp, #120]	; 0x78
 8008c9c:	f1b8 0f00 	cmp.w	r8, #0
 8008ca0:	f300 8091 	bgt.w	8008dc6 <_strtod_l+0x886>
 8008ca4:	9b08      	ldr	r3, [sp, #32]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dd08      	ble.n	8008cbc <_strtod_l+0x77c>
 8008caa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cac:	9907      	ldr	r1, [sp, #28]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f002 fa04 	bl	800b0bc <__pow5mult>
 8008cb4:	9007      	str	r0, [sp, #28]
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f43f ae8e 	beq.w	80089d8 <_strtod_l+0x498>
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	dd08      	ble.n	8008cd2 <_strtod_l+0x792>
 8008cc0:	9907      	ldr	r1, [sp, #28]
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f002 fa53 	bl	800b170 <__lshift>
 8008cca:	9007      	str	r0, [sp, #28]
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	f43f ae83 	beq.w	80089d8 <_strtod_l+0x498>
 8008cd2:	f1b9 0f00 	cmp.w	r9, #0
 8008cd6:	dd08      	ble.n	8008cea <_strtod_l+0x7aa>
 8008cd8:	4631      	mov	r1, r6
 8008cda:	464a      	mov	r2, r9
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f002 fa47 	bl	800b170 <__lshift>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f43f ae77 	beq.w	80089d8 <_strtod_l+0x498>
 8008cea:	9a07      	ldr	r2, [sp, #28]
 8008cec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f002 fac6 	bl	800b280 <__mdiff>
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f43f ae6e 	beq.w	80089d8 <_strtod_l+0x498>
 8008cfc:	68c3      	ldr	r3, [r0, #12]
 8008cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d00:	2300      	movs	r3, #0
 8008d02:	60c3      	str	r3, [r0, #12]
 8008d04:	4631      	mov	r1, r6
 8008d06:	f002 fa9f 	bl	800b248 <__mcmp>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	da65      	bge.n	8008dda <_strtod_l+0x89a>
 8008d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d10:	ea53 030a 	orrs.w	r3, r3, sl
 8008d14:	f040 8087 	bne.w	8008e26 <_strtod_l+0x8e6>
 8008d18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 8082 	bne.w	8008e26 <_strtod_l+0x8e6>
 8008d22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d26:	0d1b      	lsrs	r3, r3, #20
 8008d28:	051b      	lsls	r3, r3, #20
 8008d2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d2e:	d97a      	bls.n	8008e26 <_strtod_l+0x8e6>
 8008d30:	696b      	ldr	r3, [r5, #20]
 8008d32:	b913      	cbnz	r3, 8008d3a <_strtod_l+0x7fa>
 8008d34:	692b      	ldr	r3, [r5, #16]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	dd75      	ble.n	8008e26 <_strtod_l+0x8e6>
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f002 fa16 	bl	800b170 <__lshift>
 8008d44:	4631      	mov	r1, r6
 8008d46:	4605      	mov	r5, r0
 8008d48:	f002 fa7e 	bl	800b248 <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	dd6a      	ble.n	8008e26 <_strtod_l+0x8e6>
 8008d50:	9904      	ldr	r1, [sp, #16]
 8008d52:	4a55      	ldr	r2, [pc, #340]	; (8008ea8 <_strtod_l+0x968>)
 8008d54:	465b      	mov	r3, fp
 8008d56:	2900      	cmp	r1, #0
 8008d58:	f000 8085 	beq.w	8008e66 <_strtod_l+0x926>
 8008d5c:	ea02 010b 	and.w	r1, r2, fp
 8008d60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d64:	dc7f      	bgt.n	8008e66 <_strtod_l+0x926>
 8008d66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d6a:	f77f aeaa 	ble.w	8008ac2 <_strtod_l+0x582>
 8008d6e:	4a4f      	ldr	r2, [pc, #316]	; (8008eac <_strtod_l+0x96c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008d76:	4650      	mov	r0, sl
 8008d78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	f7f7 fc53 	bl	8000628 <__aeabi_dmul>
 8008d82:	460b      	mov	r3, r1
 8008d84:	4303      	orrs	r3, r0
 8008d86:	bf08      	it	eq
 8008d88:	2322      	moveq	r3, #34	; 0x22
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	bf08      	it	eq
 8008d90:	6023      	streq	r3, [r4, #0]
 8008d92:	e62b      	b.n	80089ec <_strtod_l+0x4ac>
 8008d94:	f04f 32ff 	mov.w	r2, #4294967295
 8008d98:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9c:	ea03 0a0a 	and.w	sl, r3, sl
 8008da0:	e6de      	b.n	8008b60 <_strtod_l+0x620>
 8008da2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008da6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008daa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008dae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008db2:	fa01 f308 	lsl.w	r3, r1, r8
 8008db6:	930c      	str	r3, [sp, #48]	; 0x30
 8008db8:	9111      	str	r1, [sp, #68]	; 0x44
 8008dba:	e741      	b.n	8008c40 <_strtod_l+0x700>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	9311      	str	r3, [sp, #68]	; 0x44
 8008dc4:	e73c      	b.n	8008c40 <_strtod_l+0x700>
 8008dc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008dc8:	4642      	mov	r2, r8
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f002 f9d0 	bl	800b170 <__lshift>
 8008dd0:	901e      	str	r0, [sp, #120]	; 0x78
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f47f af66 	bne.w	8008ca4 <_strtod_l+0x764>
 8008dd8:	e5fe      	b.n	80089d8 <_strtod_l+0x498>
 8008dda:	465f      	mov	r7, fp
 8008ddc:	d16e      	bne.n	8008ebc <_strtod_l+0x97c>
 8008dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008de0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008de4:	b342      	cbz	r2, 8008e38 <_strtod_l+0x8f8>
 8008de6:	4a32      	ldr	r2, [pc, #200]	; (8008eb0 <_strtod_l+0x970>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d128      	bne.n	8008e3e <_strtod_l+0x8fe>
 8008dec:	9b04      	ldr	r3, [sp, #16]
 8008dee:	4650      	mov	r0, sl
 8008df0:	b1eb      	cbz	r3, 8008e2e <_strtod_l+0x8ee>
 8008df2:	4a2d      	ldr	r2, [pc, #180]	; (8008ea8 <_strtod_l+0x968>)
 8008df4:	403a      	ands	r2, r7
 8008df6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8008dfe:	d819      	bhi.n	8008e34 <_strtod_l+0x8f4>
 8008e00:	0d12      	lsrs	r2, r2, #20
 8008e02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008e06:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0a:	4298      	cmp	r0, r3
 8008e0c:	d117      	bne.n	8008e3e <_strtod_l+0x8fe>
 8008e0e:	4b29      	ldr	r3, [pc, #164]	; (8008eb4 <_strtod_l+0x974>)
 8008e10:	429f      	cmp	r7, r3
 8008e12:	d102      	bne.n	8008e1a <_strtod_l+0x8da>
 8008e14:	3001      	adds	r0, #1
 8008e16:	f43f addf 	beq.w	80089d8 <_strtod_l+0x498>
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <_strtod_l+0x968>)
 8008e1c:	403b      	ands	r3, r7
 8008e1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008e22:	f04f 0a00 	mov.w	sl, #0
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1a0      	bne.n	8008d6e <_strtod_l+0x82e>
 8008e2c:	e5de      	b.n	80089ec <_strtod_l+0x4ac>
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e32:	e7ea      	b.n	8008e0a <_strtod_l+0x8ca>
 8008e34:	460b      	mov	r3, r1
 8008e36:	e7e8      	b.n	8008e0a <_strtod_l+0x8ca>
 8008e38:	ea53 030a 	orrs.w	r3, r3, sl
 8008e3c:	d088      	beq.n	8008d50 <_strtod_l+0x810>
 8008e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e40:	b1db      	cbz	r3, 8008e7a <_strtod_l+0x93a>
 8008e42:	423b      	tst	r3, r7
 8008e44:	d0ef      	beq.n	8008e26 <_strtod_l+0x8e6>
 8008e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e48:	9a04      	ldr	r2, [sp, #16]
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	b1c3      	cbz	r3, 8008e82 <_strtod_l+0x942>
 8008e50:	f7ff fb57 	bl	8008502 <sulp>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e5c:	f7f7 fa2e 	bl	80002bc <__adddf3>
 8008e60:	4682      	mov	sl, r0
 8008e62:	468b      	mov	fp, r1
 8008e64:	e7df      	b.n	8008e26 <_strtod_l+0x8e6>
 8008e66:	4013      	ands	r3, r2
 8008e68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e74:	f04f 3aff 	mov.w	sl, #4294967295
 8008e78:	e7d5      	b.n	8008e26 <_strtod_l+0x8e6>
 8008e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e7c:	ea13 0f0a 	tst.w	r3, sl
 8008e80:	e7e0      	b.n	8008e44 <_strtod_l+0x904>
 8008e82:	f7ff fb3e 	bl	8008502 <sulp>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e8e:	f7f7 fa13 	bl	80002b8 <__aeabi_dsub>
 8008e92:	2200      	movs	r2, #0
 8008e94:	2300      	movs	r3, #0
 8008e96:	4682      	mov	sl, r0
 8008e98:	468b      	mov	fp, r1
 8008e9a:	f7f7 fe2d 	bl	8000af8 <__aeabi_dcmpeq>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d0c1      	beq.n	8008e26 <_strtod_l+0x8e6>
 8008ea2:	e60e      	b.n	8008ac2 <_strtod_l+0x582>
 8008ea4:	fffffc02 	.word	0xfffffc02
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	39500000 	.word	0x39500000
 8008eb0:	000fffff 	.word	0x000fffff
 8008eb4:	7fefffff 	.word	0x7fefffff
 8008eb8:	0800e230 	.word	0x0800e230
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f002 fb3e 	bl	800b540 <__ratio>
 8008ec4:	ec59 8b10 	vmov	r8, r9, d0
 8008ec8:	ee10 0a10 	vmov	r0, s0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	f7f7 fe24 	bl	8000b20 <__aeabi_dcmple>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d07c      	beq.n	8008fd6 <_strtod_l+0xa96>
 8008edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d04c      	beq.n	8008f7c <_strtod_l+0xa3c>
 8008ee2:	4b95      	ldr	r3, [pc, #596]	; (8009138 <_strtod_l+0xbf8>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008eea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009138 <_strtod_l+0xbf8>
 8008eee:	f04f 0800 	mov.w	r8, #0
 8008ef2:	4b92      	ldr	r3, [pc, #584]	; (800913c <_strtod_l+0xbfc>)
 8008ef4:	403b      	ands	r3, r7
 8008ef6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008efa:	4b91      	ldr	r3, [pc, #580]	; (8009140 <_strtod_l+0xc00>)
 8008efc:	429a      	cmp	r2, r3
 8008efe:	f040 80b2 	bne.w	8009066 <_strtod_l+0xb26>
 8008f02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008f0e:	ec4b ab10 	vmov	d0, sl, fp
 8008f12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008f16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f1a:	f002 fa39 	bl	800b390 <__ulp>
 8008f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f22:	ec53 2b10 	vmov	r2, r3, d0
 8008f26:	f7f7 fb7f 	bl	8000628 <__aeabi_dmul>
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	465b      	mov	r3, fp
 8008f2e:	f7f7 f9c5 	bl	80002bc <__adddf3>
 8008f32:	460b      	mov	r3, r1
 8008f34:	4981      	ldr	r1, [pc, #516]	; (800913c <_strtod_l+0xbfc>)
 8008f36:	4a83      	ldr	r2, [pc, #524]	; (8009144 <_strtod_l+0xc04>)
 8008f38:	4019      	ands	r1, r3
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	4682      	mov	sl, r0
 8008f3e:	d95e      	bls.n	8008ffe <_strtod_l+0xabe>
 8008f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d103      	bne.n	8008f52 <_strtod_l+0xa12>
 8008f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f43f ad43 	beq.w	80089d8 <_strtod_l+0x498>
 8008f52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009150 <_strtod_l+0xc10>
 8008f56:	f04f 3aff 	mov.w	sl, #4294967295
 8008f5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f001 feeb 	bl	800ad38 <_Bfree>
 8008f62:	9907      	ldr	r1, [sp, #28]
 8008f64:	4620      	mov	r0, r4
 8008f66:	f001 fee7 	bl	800ad38 <_Bfree>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f001 fee3 	bl	800ad38 <_Bfree>
 8008f72:	4629      	mov	r1, r5
 8008f74:	4620      	mov	r0, r4
 8008f76:	f001 fedf 	bl	800ad38 <_Bfree>
 8008f7a:	e613      	b.n	8008ba4 <_strtod_l+0x664>
 8008f7c:	f1ba 0f00 	cmp.w	sl, #0
 8008f80:	d11b      	bne.n	8008fba <_strtod_l+0xa7a>
 8008f82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f86:	b9f3      	cbnz	r3, 8008fc6 <_strtod_l+0xa86>
 8008f88:	4b6b      	ldr	r3, [pc, #428]	; (8009138 <_strtod_l+0xbf8>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	4649      	mov	r1, r9
 8008f90:	f7f7 fdbc 	bl	8000b0c <__aeabi_dcmplt>
 8008f94:	b9d0      	cbnz	r0, 8008fcc <_strtod_l+0xa8c>
 8008f96:	4640      	mov	r0, r8
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4b6b      	ldr	r3, [pc, #428]	; (8009148 <_strtod_l+0xc08>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f7f7 fb43 	bl	8000628 <__aeabi_dmul>
 8008fa2:	4680      	mov	r8, r0
 8008fa4:	4689      	mov	r9, r1
 8008fa6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008faa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008fae:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fb0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008fb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008fb8:	e79b      	b.n	8008ef2 <_strtod_l+0x9b2>
 8008fba:	f1ba 0f01 	cmp.w	sl, #1
 8008fbe:	d102      	bne.n	8008fc6 <_strtod_l+0xa86>
 8008fc0:	2f00      	cmp	r7, #0
 8008fc2:	f43f ad7e 	beq.w	8008ac2 <_strtod_l+0x582>
 8008fc6:	4b61      	ldr	r3, [pc, #388]	; (800914c <_strtod_l+0xc0c>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	e78c      	b.n	8008ee6 <_strtod_l+0x9a6>
 8008fcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009148 <_strtod_l+0xc08>
 8008fd0:	f04f 0800 	mov.w	r8, #0
 8008fd4:	e7e7      	b.n	8008fa6 <_strtod_l+0xa66>
 8008fd6:	4b5c      	ldr	r3, [pc, #368]	; (8009148 <_strtod_l+0xc08>)
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f7f7 fb23 	bl	8000628 <__aeabi_dmul>
 8008fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	b933      	cbnz	r3, 8008ff8 <_strtod_l+0xab8>
 8008fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fee:	9012      	str	r0, [sp, #72]	; 0x48
 8008ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ff2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008ff6:	e7dd      	b.n	8008fb4 <_strtod_l+0xa74>
 8008ff8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008ffc:	e7f9      	b.n	8008ff2 <_strtod_l+0xab2>
 8008ffe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1a8      	bne.n	8008f5a <_strtod_l+0xa1a>
 8009008:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800900c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800900e:	0d1b      	lsrs	r3, r3, #20
 8009010:	051b      	lsls	r3, r3, #20
 8009012:	429a      	cmp	r2, r3
 8009014:	d1a1      	bne.n	8008f5a <_strtod_l+0xa1a>
 8009016:	4640      	mov	r0, r8
 8009018:	4649      	mov	r1, r9
 800901a:	f7f7 fe65 	bl	8000ce8 <__aeabi_d2lz>
 800901e:	f7f7 fad5 	bl	80005cc <__aeabi_l2d>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 f945 	bl	80002b8 <__aeabi_dsub>
 800902e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009034:	ea43 030a 	orr.w	r3, r3, sl
 8009038:	4313      	orrs	r3, r2
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	d053      	beq.n	80090e8 <_strtod_l+0xba8>
 8009040:	a335      	add	r3, pc, #212	; (adr r3, 8009118 <_strtod_l+0xbd8>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 fd61 	bl	8000b0c <__aeabi_dcmplt>
 800904a:	2800      	cmp	r0, #0
 800904c:	f47f acce 	bne.w	80089ec <_strtod_l+0x4ac>
 8009050:	a333      	add	r3, pc, #204	; (adr r3, 8009120 <_strtod_l+0xbe0>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 fd75 	bl	8000b48 <__aeabi_dcmpgt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f af7b 	beq.w	8008f5a <_strtod_l+0xa1a>
 8009064:	e4c2      	b.n	80089ec <_strtod_l+0x4ac>
 8009066:	9b04      	ldr	r3, [sp, #16]
 8009068:	b333      	cbz	r3, 80090b8 <_strtod_l+0xb78>
 800906a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800906c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009070:	d822      	bhi.n	80090b8 <_strtod_l+0xb78>
 8009072:	a32d      	add	r3, pc, #180	; (adr r3, 8009128 <_strtod_l+0xbe8>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 fd50 	bl	8000b20 <__aeabi_dcmple>
 8009080:	b1a0      	cbz	r0, 80090ac <_strtod_l+0xb6c>
 8009082:	4649      	mov	r1, r9
 8009084:	4640      	mov	r0, r8
 8009086:	f7f7 fda7 	bl	8000bd8 <__aeabi_d2uiz>
 800908a:	2801      	cmp	r0, #1
 800908c:	bf38      	it	cc
 800908e:	2001      	movcc	r0, #1
 8009090:	f7f7 fa50 	bl	8000534 <__aeabi_ui2d>
 8009094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009096:	4680      	mov	r8, r0
 8009098:	4689      	mov	r9, r1
 800909a:	bb13      	cbnz	r3, 80090e2 <_strtod_l+0xba2>
 800909c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a0:	9014      	str	r0, [sp, #80]	; 0x50
 80090a2:	9315      	str	r3, [sp, #84]	; 0x54
 80090a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80090a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80090ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	930d      	str	r3, [sp, #52]	; 0x34
 80090b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80090c4:	f002 f964 	bl	800b390 <__ulp>
 80090c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090cc:	ec53 2b10 	vmov	r2, r3, d0
 80090d0:	f7f7 faaa 	bl	8000628 <__aeabi_dmul>
 80090d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090d8:	f7f7 f8f0 	bl	80002bc <__adddf3>
 80090dc:	4682      	mov	sl, r0
 80090de:	468b      	mov	fp, r1
 80090e0:	e78f      	b.n	8009002 <_strtod_l+0xac2>
 80090e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80090e6:	e7dd      	b.n	80090a4 <_strtod_l+0xb64>
 80090e8:	a311      	add	r3, pc, #68	; (adr r3, 8009130 <_strtod_l+0xbf0>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 fd0d 	bl	8000b0c <__aeabi_dcmplt>
 80090f2:	e7b4      	b.n	800905e <_strtod_l+0xb1e>
 80090f4:	2300      	movs	r3, #0
 80090f6:	930e      	str	r3, [sp, #56]	; 0x38
 80090f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	f7ff ba65 	b.w	80085cc <_strtod_l+0x8c>
 8009102:	2b65      	cmp	r3, #101	; 0x65
 8009104:	f43f ab5d 	beq.w	80087c2 <_strtod_l+0x282>
 8009108:	2b45      	cmp	r3, #69	; 0x45
 800910a:	f43f ab5a 	beq.w	80087c2 <_strtod_l+0x282>
 800910e:	2201      	movs	r2, #1
 8009110:	f7ff bb92 	b.w	8008838 <_strtod_l+0x2f8>
 8009114:	f3af 8000 	nop.w
 8009118:	94a03595 	.word	0x94a03595
 800911c:	3fdfffff 	.word	0x3fdfffff
 8009120:	35afe535 	.word	0x35afe535
 8009124:	3fe00000 	.word	0x3fe00000
 8009128:	ffc00000 	.word	0xffc00000
 800912c:	41dfffff 	.word	0x41dfffff
 8009130:	94a03595 	.word	0x94a03595
 8009134:	3fcfffff 	.word	0x3fcfffff
 8009138:	3ff00000 	.word	0x3ff00000
 800913c:	7ff00000 	.word	0x7ff00000
 8009140:	7fe00000 	.word	0x7fe00000
 8009144:	7c9fffff 	.word	0x7c9fffff
 8009148:	3fe00000 	.word	0x3fe00000
 800914c:	bff00000 	.word	0xbff00000
 8009150:	7fefffff 	.word	0x7fefffff

08009154 <_strtod_r>:
 8009154:	4b01      	ldr	r3, [pc, #4]	; (800915c <_strtod_r+0x8>)
 8009156:	f7ff b9f3 	b.w	8008540 <_strtod_l>
 800915a:	bf00      	nop
 800915c:	2000012c 	.word	0x2000012c

08009160 <_strtol_l.isra.0>:
 8009160:	2b01      	cmp	r3, #1
 8009162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009166:	d001      	beq.n	800916c <_strtol_l.isra.0+0xc>
 8009168:	2b24      	cmp	r3, #36	; 0x24
 800916a:	d906      	bls.n	800917a <_strtol_l.isra.0+0x1a>
 800916c:	f7fe f9f8 	bl	8007560 <__errno>
 8009170:	2316      	movs	r3, #22
 8009172:	6003      	str	r3, [r0, #0]
 8009174:	2000      	movs	r0, #0
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	4f3a      	ldr	r7, [pc, #232]	; (8009264 <_strtol_l.isra.0+0x104>)
 800917c:	468e      	mov	lr, r1
 800917e:	4676      	mov	r6, lr
 8009180:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009184:	5de5      	ldrb	r5, [r4, r7]
 8009186:	f015 0508 	ands.w	r5, r5, #8
 800918a:	d1f8      	bne.n	800917e <_strtol_l.isra.0+0x1e>
 800918c:	2c2d      	cmp	r4, #45	; 0x2d
 800918e:	d134      	bne.n	80091fa <_strtol_l.isra.0+0x9a>
 8009190:	f89e 4000 	ldrb.w	r4, [lr]
 8009194:	f04f 0801 	mov.w	r8, #1
 8009198:	f106 0e02 	add.w	lr, r6, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d05c      	beq.n	800925a <_strtol_l.isra.0+0xfa>
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	d10c      	bne.n	80091be <_strtol_l.isra.0+0x5e>
 80091a4:	2c30      	cmp	r4, #48	; 0x30
 80091a6:	d10a      	bne.n	80091be <_strtol_l.isra.0+0x5e>
 80091a8:	f89e 4000 	ldrb.w	r4, [lr]
 80091ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80091b0:	2c58      	cmp	r4, #88	; 0x58
 80091b2:	d14d      	bne.n	8009250 <_strtol_l.isra.0+0xf0>
 80091b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80091b8:	2310      	movs	r3, #16
 80091ba:	f10e 0e02 	add.w	lr, lr, #2
 80091be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80091c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091c6:	2600      	movs	r6, #0
 80091c8:	fbbc f9f3 	udiv	r9, ip, r3
 80091cc:	4635      	mov	r5, r6
 80091ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80091d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091d6:	2f09      	cmp	r7, #9
 80091d8:	d818      	bhi.n	800920c <_strtol_l.isra.0+0xac>
 80091da:	463c      	mov	r4, r7
 80091dc:	42a3      	cmp	r3, r4
 80091de:	dd24      	ble.n	800922a <_strtol_l.isra.0+0xca>
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	db1f      	blt.n	8009224 <_strtol_l.isra.0+0xc4>
 80091e4:	45a9      	cmp	r9, r5
 80091e6:	d31d      	bcc.n	8009224 <_strtol_l.isra.0+0xc4>
 80091e8:	d101      	bne.n	80091ee <_strtol_l.isra.0+0x8e>
 80091ea:	45a2      	cmp	sl, r4
 80091ec:	db1a      	blt.n	8009224 <_strtol_l.isra.0+0xc4>
 80091ee:	fb05 4503 	mla	r5, r5, r3, r4
 80091f2:	2601      	movs	r6, #1
 80091f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80091f8:	e7eb      	b.n	80091d2 <_strtol_l.isra.0+0x72>
 80091fa:	2c2b      	cmp	r4, #43	; 0x2b
 80091fc:	bf08      	it	eq
 80091fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009202:	46a8      	mov	r8, r5
 8009204:	bf08      	it	eq
 8009206:	f106 0e02 	addeq.w	lr, r6, #2
 800920a:	e7c7      	b.n	800919c <_strtol_l.isra.0+0x3c>
 800920c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009210:	2f19      	cmp	r7, #25
 8009212:	d801      	bhi.n	8009218 <_strtol_l.isra.0+0xb8>
 8009214:	3c37      	subs	r4, #55	; 0x37
 8009216:	e7e1      	b.n	80091dc <_strtol_l.isra.0+0x7c>
 8009218:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800921c:	2f19      	cmp	r7, #25
 800921e:	d804      	bhi.n	800922a <_strtol_l.isra.0+0xca>
 8009220:	3c57      	subs	r4, #87	; 0x57
 8009222:	e7db      	b.n	80091dc <_strtol_l.isra.0+0x7c>
 8009224:	f04f 36ff 	mov.w	r6, #4294967295
 8009228:	e7e4      	b.n	80091f4 <_strtol_l.isra.0+0x94>
 800922a:	2e00      	cmp	r6, #0
 800922c:	da05      	bge.n	800923a <_strtol_l.isra.0+0xda>
 800922e:	2322      	movs	r3, #34	; 0x22
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	4665      	mov	r5, ip
 8009234:	b942      	cbnz	r2, 8009248 <_strtol_l.isra.0+0xe8>
 8009236:	4628      	mov	r0, r5
 8009238:	e79d      	b.n	8009176 <_strtol_l.isra.0+0x16>
 800923a:	f1b8 0f00 	cmp.w	r8, #0
 800923e:	d000      	beq.n	8009242 <_strtol_l.isra.0+0xe2>
 8009240:	426d      	negs	r5, r5
 8009242:	2a00      	cmp	r2, #0
 8009244:	d0f7      	beq.n	8009236 <_strtol_l.isra.0+0xd6>
 8009246:	b10e      	cbz	r6, 800924c <_strtol_l.isra.0+0xec>
 8009248:	f10e 31ff 	add.w	r1, lr, #4294967295
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	e7f2      	b.n	8009236 <_strtol_l.isra.0+0xd6>
 8009250:	2430      	movs	r4, #48	; 0x30
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1b3      	bne.n	80091be <_strtol_l.isra.0+0x5e>
 8009256:	2308      	movs	r3, #8
 8009258:	e7b1      	b.n	80091be <_strtol_l.isra.0+0x5e>
 800925a:	2c30      	cmp	r4, #48	; 0x30
 800925c:	d0a4      	beq.n	80091a8 <_strtol_l.isra.0+0x48>
 800925e:	230a      	movs	r3, #10
 8009260:	e7ad      	b.n	80091be <_strtol_l.isra.0+0x5e>
 8009262:	bf00      	nop
 8009264:	0800e259 	.word	0x0800e259

08009268 <_strtol_r>:
 8009268:	f7ff bf7a 	b.w	8009160 <_strtol_l.isra.0>

0800926c <__swbuf_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	4614      	mov	r4, r2
 8009272:	4605      	mov	r5, r0
 8009274:	b118      	cbz	r0, 800927e <__swbuf_r+0x12>
 8009276:	6983      	ldr	r3, [r0, #24]
 8009278:	b90b      	cbnz	r3, 800927e <__swbuf_r+0x12>
 800927a:	f001 f86b 	bl	800a354 <__sinit>
 800927e:	4b21      	ldr	r3, [pc, #132]	; (8009304 <__swbuf_r+0x98>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d12b      	bne.n	80092dc <__swbuf_r+0x70>
 8009284:	686c      	ldr	r4, [r5, #4]
 8009286:	69a3      	ldr	r3, [r4, #24]
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	071a      	lsls	r2, r3, #28
 800928e:	d52f      	bpl.n	80092f0 <__swbuf_r+0x84>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	b36b      	cbz	r3, 80092f0 <__swbuf_r+0x84>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	1ac0      	subs	r0, r0, r3
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	b2f6      	uxtb	r6, r6
 800929e:	4283      	cmp	r3, r0
 80092a0:	4637      	mov	r7, r6
 80092a2:	dc04      	bgt.n	80092ae <__swbuf_r+0x42>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 ffc0 	bl	800a22c <_fflush_r>
 80092ac:	bb30      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	60a3      	str	r3, [r4, #8]
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	701e      	strb	r6, [r3, #0]
 80092bc:	6963      	ldr	r3, [r4, #20]
 80092be:	3001      	adds	r0, #1
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d004      	beq.n	80092ce <__swbuf_r+0x62>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	07db      	lsls	r3, r3, #31
 80092c8:	d506      	bpl.n	80092d8 <__swbuf_r+0x6c>
 80092ca:	2e0a      	cmp	r6, #10
 80092cc:	d104      	bne.n	80092d8 <__swbuf_r+0x6c>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f000 ffab 	bl	800a22c <_fflush_r>
 80092d6:	b988      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092d8:	4638      	mov	r0, r7
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <__swbuf_r+0x9c>)
 80092de:	429c      	cmp	r4, r3
 80092e0:	d101      	bne.n	80092e6 <__swbuf_r+0x7a>
 80092e2:	68ac      	ldr	r4, [r5, #8]
 80092e4:	e7cf      	b.n	8009286 <__swbuf_r+0x1a>
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <__swbuf_r+0xa0>)
 80092e8:	429c      	cmp	r4, r3
 80092ea:	bf08      	it	eq
 80092ec:	68ec      	ldreq	r4, [r5, #12]
 80092ee:	e7ca      	b.n	8009286 <__swbuf_r+0x1a>
 80092f0:	4621      	mov	r1, r4
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 f81e 	bl	8009334 <__swsetup_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d0cb      	beq.n	8009294 <__swbuf_r+0x28>
 80092fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009300:	e7ea      	b.n	80092d8 <__swbuf_r+0x6c>
 8009302:	bf00      	nop
 8009304:	0800e410 	.word	0x0800e410
 8009308:	0800e430 	.word	0x0800e430
 800930c:	0800e3f0 	.word	0x0800e3f0

08009310 <_write_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d07      	ldr	r5, [pc, #28]	; (8009330 <_write_r+0x20>)
 8009314:	4604      	mov	r4, r0
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	2200      	movs	r2, #0
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f8 fc87 	bl	8001c32 <_write>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_write_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_write_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200017d0 	.word	0x200017d0

08009334 <__swsetup_r>:
 8009334:	4b32      	ldr	r3, [pc, #200]	; (8009400 <__swsetup_r+0xcc>)
 8009336:	b570      	push	{r4, r5, r6, lr}
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	4606      	mov	r6, r0
 800933c:	460c      	mov	r4, r1
 800933e:	b125      	cbz	r5, 800934a <__swsetup_r+0x16>
 8009340:	69ab      	ldr	r3, [r5, #24]
 8009342:	b913      	cbnz	r3, 800934a <__swsetup_r+0x16>
 8009344:	4628      	mov	r0, r5
 8009346:	f001 f805 	bl	800a354 <__sinit>
 800934a:	4b2e      	ldr	r3, [pc, #184]	; (8009404 <__swsetup_r+0xd0>)
 800934c:	429c      	cmp	r4, r3
 800934e:	d10f      	bne.n	8009370 <__swsetup_r+0x3c>
 8009350:	686c      	ldr	r4, [r5, #4]
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009358:	0719      	lsls	r1, r3, #28
 800935a:	d42c      	bmi.n	80093b6 <__swsetup_r+0x82>
 800935c:	06dd      	lsls	r5, r3, #27
 800935e:	d411      	bmi.n	8009384 <__swsetup_r+0x50>
 8009360:	2309      	movs	r3, #9
 8009362:	6033      	str	r3, [r6, #0]
 8009364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	f04f 30ff 	mov.w	r0, #4294967295
 800936e:	e03e      	b.n	80093ee <__swsetup_r+0xba>
 8009370:	4b25      	ldr	r3, [pc, #148]	; (8009408 <__swsetup_r+0xd4>)
 8009372:	429c      	cmp	r4, r3
 8009374:	d101      	bne.n	800937a <__swsetup_r+0x46>
 8009376:	68ac      	ldr	r4, [r5, #8]
 8009378:	e7eb      	b.n	8009352 <__swsetup_r+0x1e>
 800937a:	4b24      	ldr	r3, [pc, #144]	; (800940c <__swsetup_r+0xd8>)
 800937c:	429c      	cmp	r4, r3
 800937e:	bf08      	it	eq
 8009380:	68ec      	ldreq	r4, [r5, #12]
 8009382:	e7e6      	b.n	8009352 <__swsetup_r+0x1e>
 8009384:	0758      	lsls	r0, r3, #29
 8009386:	d512      	bpl.n	80093ae <__swsetup_r+0x7a>
 8009388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800938a:	b141      	cbz	r1, 800939e <__swsetup_r+0x6a>
 800938c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009390:	4299      	cmp	r1, r3
 8009392:	d002      	beq.n	800939a <__swsetup_r+0x66>
 8009394:	4630      	mov	r0, r6
 8009396:	f002 f959 	bl	800b64c <_free_r>
 800939a:	2300      	movs	r3, #0
 800939c:	6363      	str	r3, [r4, #52]	; 0x34
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	2300      	movs	r3, #0
 80093a8:	6063      	str	r3, [r4, #4]
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f043 0308 	orr.w	r3, r3, #8
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	b94b      	cbnz	r3, 80093ce <__swsetup_r+0x9a>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093c4:	d003      	beq.n	80093ce <__swsetup_r+0x9a>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4630      	mov	r0, r6
 80093ca:	f001 fc0d 	bl	800abe8 <__smakebuf_r>
 80093ce:	89a0      	ldrh	r0, [r4, #12]
 80093d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093d4:	f010 0301 	ands.w	r3, r0, #1
 80093d8:	d00a      	beq.n	80093f0 <__swsetup_r+0xbc>
 80093da:	2300      	movs	r3, #0
 80093dc:	60a3      	str	r3, [r4, #8]
 80093de:	6963      	ldr	r3, [r4, #20]
 80093e0:	425b      	negs	r3, r3
 80093e2:	61a3      	str	r3, [r4, #24]
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	b943      	cbnz	r3, 80093fa <__swsetup_r+0xc6>
 80093e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093ec:	d1ba      	bne.n	8009364 <__swsetup_r+0x30>
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	0781      	lsls	r1, r0, #30
 80093f2:	bf58      	it	pl
 80093f4:	6963      	ldrpl	r3, [r4, #20]
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	e7f4      	b.n	80093e4 <__swsetup_r+0xb0>
 80093fa:	2000      	movs	r0, #0
 80093fc:	e7f7      	b.n	80093ee <__swsetup_r+0xba>
 80093fe:	bf00      	nop
 8009400:	200000c4 	.word	0x200000c4
 8009404:	0800e410 	.word	0x0800e410
 8009408:	0800e430 	.word	0x0800e430
 800940c:	0800e3f0 	.word	0x0800e3f0

08009410 <_close_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_close_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f8 fc25 	bl	8001c6a <_close>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_close_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_close_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	200017d0 	.word	0x200017d0

08009430 <quorem>:
 8009430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	6903      	ldr	r3, [r0, #16]
 8009436:	690c      	ldr	r4, [r1, #16]
 8009438:	42a3      	cmp	r3, r4
 800943a:	4607      	mov	r7, r0
 800943c:	f2c0 8081 	blt.w	8009542 <quorem+0x112>
 8009440:	3c01      	subs	r4, #1
 8009442:	f101 0814 	add.w	r8, r1, #20
 8009446:	f100 0514 	add.w	r5, r0, #20
 800944a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009458:	3301      	adds	r3, #1
 800945a:	429a      	cmp	r2, r3
 800945c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009464:	fbb2 f6f3 	udiv	r6, r2, r3
 8009468:	d331      	bcc.n	80094ce <quorem+0x9e>
 800946a:	f04f 0e00 	mov.w	lr, #0
 800946e:	4640      	mov	r0, r8
 8009470:	46ac      	mov	ip, r5
 8009472:	46f2      	mov	sl, lr
 8009474:	f850 2b04 	ldr.w	r2, [r0], #4
 8009478:	b293      	uxth	r3, r2
 800947a:	fb06 e303 	mla	r3, r6, r3, lr
 800947e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009482:	b29b      	uxth	r3, r3
 8009484:	ebaa 0303 	sub.w	r3, sl, r3
 8009488:	0c12      	lsrs	r2, r2, #16
 800948a:	f8dc a000 	ldr.w	sl, [ip]
 800948e:	fb06 e202 	mla	r2, r6, r2, lr
 8009492:	fa13 f38a 	uxtah	r3, r3, sl
 8009496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800949a:	fa1f fa82 	uxth.w	sl, r2
 800949e:	f8dc 2000 	ldr.w	r2, [ip]
 80094a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80094a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094b0:	4581      	cmp	r9, r0
 80094b2:	f84c 3b04 	str.w	r3, [ip], #4
 80094b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094ba:	d2db      	bcs.n	8009474 <quorem+0x44>
 80094bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80094c0:	b92b      	cbnz	r3, 80094ce <quorem+0x9e>
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	429d      	cmp	r5, r3
 80094c8:	461a      	mov	r2, r3
 80094ca:	d32e      	bcc.n	800952a <quorem+0xfa>
 80094cc:	613c      	str	r4, [r7, #16]
 80094ce:	4638      	mov	r0, r7
 80094d0:	f001 feba 	bl	800b248 <__mcmp>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	db24      	blt.n	8009522 <quorem+0xf2>
 80094d8:	3601      	adds	r6, #1
 80094da:	4628      	mov	r0, r5
 80094dc:	f04f 0c00 	mov.w	ip, #0
 80094e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80094e4:	f8d0 e000 	ldr.w	lr, [r0]
 80094e8:	b293      	uxth	r3, r2
 80094ea:	ebac 0303 	sub.w	r3, ip, r3
 80094ee:	0c12      	lsrs	r2, r2, #16
 80094f0:	fa13 f38e 	uxtah	r3, r3, lr
 80094f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009502:	45c1      	cmp	r9, r8
 8009504:	f840 3b04 	str.w	r3, [r0], #4
 8009508:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800950c:	d2e8      	bcs.n	80094e0 <quorem+0xb0>
 800950e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009516:	b922      	cbnz	r2, 8009522 <quorem+0xf2>
 8009518:	3b04      	subs	r3, #4
 800951a:	429d      	cmp	r5, r3
 800951c:	461a      	mov	r2, r3
 800951e:	d30a      	bcc.n	8009536 <quorem+0x106>
 8009520:	613c      	str	r4, [r7, #16]
 8009522:	4630      	mov	r0, r6
 8009524:	b003      	add	sp, #12
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952a:	6812      	ldr	r2, [r2, #0]
 800952c:	3b04      	subs	r3, #4
 800952e:	2a00      	cmp	r2, #0
 8009530:	d1cc      	bne.n	80094cc <quorem+0x9c>
 8009532:	3c01      	subs	r4, #1
 8009534:	e7c7      	b.n	80094c6 <quorem+0x96>
 8009536:	6812      	ldr	r2, [r2, #0]
 8009538:	3b04      	subs	r3, #4
 800953a:	2a00      	cmp	r2, #0
 800953c:	d1f0      	bne.n	8009520 <quorem+0xf0>
 800953e:	3c01      	subs	r4, #1
 8009540:	e7eb      	b.n	800951a <quorem+0xea>
 8009542:	2000      	movs	r0, #0
 8009544:	e7ee      	b.n	8009524 <quorem+0xf4>
	...

08009548 <_dtoa_r>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	ed2d 8b02 	vpush	{d8}
 8009550:	ec57 6b10 	vmov	r6, r7, d0
 8009554:	b095      	sub	sp, #84	; 0x54
 8009556:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009558:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009562:	4604      	mov	r4, r0
 8009564:	9209      	str	r2, [sp, #36]	; 0x24
 8009566:	930f      	str	r3, [sp, #60]	; 0x3c
 8009568:	b975      	cbnz	r5, 8009588 <_dtoa_r+0x40>
 800956a:	2010      	movs	r0, #16
 800956c:	f001 fb7c 	bl	800ac68 <malloc>
 8009570:	4602      	mov	r2, r0
 8009572:	6260      	str	r0, [r4, #36]	; 0x24
 8009574:	b920      	cbnz	r0, 8009580 <_dtoa_r+0x38>
 8009576:	4bb2      	ldr	r3, [pc, #712]	; (8009840 <_dtoa_r+0x2f8>)
 8009578:	21ea      	movs	r1, #234	; 0xea
 800957a:	48b2      	ldr	r0, [pc, #712]	; (8009844 <_dtoa_r+0x2fc>)
 800957c:	f003 f822 	bl	800c5c4 <__assert_func>
 8009580:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009584:	6005      	str	r5, [r0, #0]
 8009586:	60c5      	str	r5, [r0, #12]
 8009588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800958a:	6819      	ldr	r1, [r3, #0]
 800958c:	b151      	cbz	r1, 80095a4 <_dtoa_r+0x5c>
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	604a      	str	r2, [r1, #4]
 8009592:	2301      	movs	r3, #1
 8009594:	4093      	lsls	r3, r2
 8009596:	608b      	str	r3, [r1, #8]
 8009598:	4620      	mov	r0, r4
 800959a:	f001 fbcd 	bl	800ad38 <_Bfree>
 800959e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	1e3b      	subs	r3, r7, #0
 80095a6:	bfb9      	ittee	lt
 80095a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	9303      	strlt	r3, [sp, #12]
 80095ae:	2300      	movge	r3, #0
 80095b0:	f8c8 3000 	strge.w	r3, [r8]
 80095b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80095b8:	4ba3      	ldr	r3, [pc, #652]	; (8009848 <_dtoa_r+0x300>)
 80095ba:	bfbc      	itt	lt
 80095bc:	2201      	movlt	r2, #1
 80095be:	f8c8 2000 	strlt.w	r2, [r8]
 80095c2:	ea33 0309 	bics.w	r3, r3, r9
 80095c6:	d11b      	bne.n	8009600 <_dtoa_r+0xb8>
 80095c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095d4:	4333      	orrs	r3, r6
 80095d6:	f000 857a 	beq.w	800a0ce <_dtoa_r+0xb86>
 80095da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095dc:	b963      	cbnz	r3, 80095f8 <_dtoa_r+0xb0>
 80095de:	4b9b      	ldr	r3, [pc, #620]	; (800984c <_dtoa_r+0x304>)
 80095e0:	e024      	b.n	800962c <_dtoa_r+0xe4>
 80095e2:	4b9b      	ldr	r3, [pc, #620]	; (8009850 <_dtoa_r+0x308>)
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	9800      	ldr	r0, [sp, #0]
 80095ee:	b015      	add	sp, #84	; 0x54
 80095f0:	ecbd 8b02 	vpop	{d8}
 80095f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f8:	4b94      	ldr	r3, [pc, #592]	; (800984c <_dtoa_r+0x304>)
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	3303      	adds	r3, #3
 80095fe:	e7f3      	b.n	80095e8 <_dtoa_r+0xa0>
 8009600:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009604:	2200      	movs	r2, #0
 8009606:	ec51 0b17 	vmov	r0, r1, d7
 800960a:	2300      	movs	r3, #0
 800960c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009610:	f7f7 fa72 	bl	8000af8 <__aeabi_dcmpeq>
 8009614:	4680      	mov	r8, r0
 8009616:	b158      	cbz	r0, 8009630 <_dtoa_r+0xe8>
 8009618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800961a:	2301      	movs	r3, #1
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8551 	beq.w	800a0c8 <_dtoa_r+0xb80>
 8009626:	488b      	ldr	r0, [pc, #556]	; (8009854 <_dtoa_r+0x30c>)
 8009628:	6018      	str	r0, [r3, #0]
 800962a:	1e43      	subs	r3, r0, #1
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	e7dd      	b.n	80095ec <_dtoa_r+0xa4>
 8009630:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009634:	aa12      	add	r2, sp, #72	; 0x48
 8009636:	a913      	add	r1, sp, #76	; 0x4c
 8009638:	4620      	mov	r0, r4
 800963a:	f001 ff25 	bl	800b488 <__d2b>
 800963e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009642:	4683      	mov	fp, r0
 8009644:	2d00      	cmp	r5, #0
 8009646:	d07c      	beq.n	8009742 <_dtoa_r+0x1fa>
 8009648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800964e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009652:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009656:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800965a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800965e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009662:	4b7d      	ldr	r3, [pc, #500]	; (8009858 <_dtoa_r+0x310>)
 8009664:	2200      	movs	r2, #0
 8009666:	4630      	mov	r0, r6
 8009668:	4639      	mov	r1, r7
 800966a:	f7f6 fe25 	bl	80002b8 <__aeabi_dsub>
 800966e:	a36e      	add	r3, pc, #440	; (adr r3, 8009828 <_dtoa_r+0x2e0>)
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f7f6 ffd8 	bl	8000628 <__aeabi_dmul>
 8009678:	a36d      	add	r3, pc, #436	; (adr r3, 8009830 <_dtoa_r+0x2e8>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 fe1d 	bl	80002bc <__adddf3>
 8009682:	4606      	mov	r6, r0
 8009684:	4628      	mov	r0, r5
 8009686:	460f      	mov	r7, r1
 8009688:	f7f6 ff64 	bl	8000554 <__aeabi_i2d>
 800968c:	a36a      	add	r3, pc, #424	; (adr r3, 8009838 <_dtoa_r+0x2f0>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f7f6 ffc9 	bl	8000628 <__aeabi_dmul>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4630      	mov	r0, r6
 800969c:	4639      	mov	r1, r7
 800969e:	f7f6 fe0d 	bl	80002bc <__adddf3>
 80096a2:	4606      	mov	r6, r0
 80096a4:	460f      	mov	r7, r1
 80096a6:	f7f7 fa6f 	bl	8000b88 <__aeabi_d2iz>
 80096aa:	2200      	movs	r2, #0
 80096ac:	4682      	mov	sl, r0
 80096ae:	2300      	movs	r3, #0
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f7 fa2a 	bl	8000b0c <__aeabi_dcmplt>
 80096b8:	b148      	cbz	r0, 80096ce <_dtoa_r+0x186>
 80096ba:	4650      	mov	r0, sl
 80096bc:	f7f6 ff4a 	bl	8000554 <__aeabi_i2d>
 80096c0:	4632      	mov	r2, r6
 80096c2:	463b      	mov	r3, r7
 80096c4:	f7f7 fa18 	bl	8000af8 <__aeabi_dcmpeq>
 80096c8:	b908      	cbnz	r0, 80096ce <_dtoa_r+0x186>
 80096ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ce:	f1ba 0f16 	cmp.w	sl, #22
 80096d2:	d854      	bhi.n	800977e <_dtoa_r+0x236>
 80096d4:	4b61      	ldr	r3, [pc, #388]	; (800985c <_dtoa_r+0x314>)
 80096d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096e2:	f7f7 fa13 	bl	8000b0c <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d04b      	beq.n	8009782 <_dtoa_r+0x23a>
 80096ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ee:	2300      	movs	r3, #0
 80096f0:	930e      	str	r3, [sp, #56]	; 0x38
 80096f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096f4:	1b5d      	subs	r5, r3, r5
 80096f6:	1e6b      	subs	r3, r5, #1
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	bf43      	ittte	mi
 80096fc:	2300      	movmi	r3, #0
 80096fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8009702:	9304      	strmi	r3, [sp, #16]
 8009704:	f04f 0800 	movpl.w	r8, #0
 8009708:	f1ba 0f00 	cmp.w	sl, #0
 800970c:	db3b      	blt.n	8009786 <_dtoa_r+0x23e>
 800970e:	9b04      	ldr	r3, [sp, #16]
 8009710:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009714:	4453      	add	r3, sl
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	2300      	movs	r3, #0
 800971a:	9306      	str	r3, [sp, #24]
 800971c:	9b05      	ldr	r3, [sp, #20]
 800971e:	2b09      	cmp	r3, #9
 8009720:	d869      	bhi.n	80097f6 <_dtoa_r+0x2ae>
 8009722:	2b05      	cmp	r3, #5
 8009724:	bfc4      	itt	gt
 8009726:	3b04      	subgt	r3, #4
 8009728:	9305      	strgt	r3, [sp, #20]
 800972a:	9b05      	ldr	r3, [sp, #20]
 800972c:	f1a3 0302 	sub.w	r3, r3, #2
 8009730:	bfcc      	ite	gt
 8009732:	2500      	movgt	r5, #0
 8009734:	2501      	movle	r5, #1
 8009736:	2b03      	cmp	r3, #3
 8009738:	d869      	bhi.n	800980e <_dtoa_r+0x2c6>
 800973a:	e8df f003 	tbb	[pc, r3]
 800973e:	4e2c      	.short	0x4e2c
 8009740:	5a4c      	.short	0x5a4c
 8009742:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009746:	441d      	add	r5, r3
 8009748:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800974c:	2b20      	cmp	r3, #32
 800974e:	bfc1      	itttt	gt
 8009750:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009754:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009758:	fa09 f303 	lslgt.w	r3, r9, r3
 800975c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009760:	bfda      	itte	le
 8009762:	f1c3 0320 	rsble	r3, r3, #32
 8009766:	fa06 f003 	lslle.w	r0, r6, r3
 800976a:	4318      	orrgt	r0, r3
 800976c:	f7f6 fee2 	bl	8000534 <__aeabi_ui2d>
 8009770:	2301      	movs	r3, #1
 8009772:	4606      	mov	r6, r0
 8009774:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009778:	3d01      	subs	r5, #1
 800977a:	9310      	str	r3, [sp, #64]	; 0x40
 800977c:	e771      	b.n	8009662 <_dtoa_r+0x11a>
 800977e:	2301      	movs	r3, #1
 8009780:	e7b6      	b.n	80096f0 <_dtoa_r+0x1a8>
 8009782:	900e      	str	r0, [sp, #56]	; 0x38
 8009784:	e7b5      	b.n	80096f2 <_dtoa_r+0x1aa>
 8009786:	f1ca 0300 	rsb	r3, sl, #0
 800978a:	9306      	str	r3, [sp, #24]
 800978c:	2300      	movs	r3, #0
 800978e:	eba8 080a 	sub.w	r8, r8, sl
 8009792:	930d      	str	r3, [sp, #52]	; 0x34
 8009794:	e7c2      	b.n	800971c <_dtoa_r+0x1d4>
 8009796:	2300      	movs	r3, #0
 8009798:	9308      	str	r3, [sp, #32]
 800979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	dc39      	bgt.n	8009814 <_dtoa_r+0x2cc>
 80097a0:	f04f 0901 	mov.w	r9, #1
 80097a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097a8:	464b      	mov	r3, r9
 80097aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80097ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097b0:	2200      	movs	r2, #0
 80097b2:	6042      	str	r2, [r0, #4]
 80097b4:	2204      	movs	r2, #4
 80097b6:	f102 0614 	add.w	r6, r2, #20
 80097ba:	429e      	cmp	r6, r3
 80097bc:	6841      	ldr	r1, [r0, #4]
 80097be:	d92f      	bls.n	8009820 <_dtoa_r+0x2d8>
 80097c0:	4620      	mov	r0, r4
 80097c2:	f001 fa79 	bl	800acb8 <_Balloc>
 80097c6:	9000      	str	r0, [sp, #0]
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d14b      	bne.n	8009864 <_dtoa_r+0x31c>
 80097cc:	4b24      	ldr	r3, [pc, #144]	; (8009860 <_dtoa_r+0x318>)
 80097ce:	4602      	mov	r2, r0
 80097d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80097d4:	e6d1      	b.n	800957a <_dtoa_r+0x32>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e7de      	b.n	8009798 <_dtoa_r+0x250>
 80097da:	2300      	movs	r3, #0
 80097dc:	9308      	str	r3, [sp, #32]
 80097de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e0:	eb0a 0903 	add.w	r9, sl, r3
 80097e4:	f109 0301 	add.w	r3, r9, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	bfb8      	it	lt
 80097ee:	2301      	movlt	r3, #1
 80097f0:	e7dd      	b.n	80097ae <_dtoa_r+0x266>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7f2      	b.n	80097dc <_dtoa_r+0x294>
 80097f6:	2501      	movs	r5, #1
 80097f8:	2300      	movs	r3, #0
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	9508      	str	r5, [sp, #32]
 80097fe:	f04f 39ff 	mov.w	r9, #4294967295
 8009802:	2200      	movs	r2, #0
 8009804:	f8cd 9004 	str.w	r9, [sp, #4]
 8009808:	2312      	movs	r3, #18
 800980a:	9209      	str	r2, [sp, #36]	; 0x24
 800980c:	e7cf      	b.n	80097ae <_dtoa_r+0x266>
 800980e:	2301      	movs	r3, #1
 8009810:	9308      	str	r3, [sp, #32]
 8009812:	e7f4      	b.n	80097fe <_dtoa_r+0x2b6>
 8009814:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009818:	f8cd 9004 	str.w	r9, [sp, #4]
 800981c:	464b      	mov	r3, r9
 800981e:	e7c6      	b.n	80097ae <_dtoa_r+0x266>
 8009820:	3101      	adds	r1, #1
 8009822:	6041      	str	r1, [r0, #4]
 8009824:	0052      	lsls	r2, r2, #1
 8009826:	e7c6      	b.n	80097b6 <_dtoa_r+0x26e>
 8009828:	636f4361 	.word	0x636f4361
 800982c:	3fd287a7 	.word	0x3fd287a7
 8009830:	8b60c8b3 	.word	0x8b60c8b3
 8009834:	3fc68a28 	.word	0x3fc68a28
 8009838:	509f79fb 	.word	0x509f79fb
 800983c:	3fd34413 	.word	0x3fd34413
 8009840:	0800e366 	.word	0x0800e366
 8009844:	0800e37d 	.word	0x0800e37d
 8009848:	7ff00000 	.word	0x7ff00000
 800984c:	0800e362 	.word	0x0800e362
 8009850:	0800e359 	.word	0x0800e359
 8009854:	0800e642 	.word	0x0800e642
 8009858:	3ff80000 	.word	0x3ff80000
 800985c:	0800e558 	.word	0x0800e558
 8009860:	0800e3dc 	.word	0x0800e3dc
 8009864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009866:	9a00      	ldr	r2, [sp, #0]
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	9b01      	ldr	r3, [sp, #4]
 800986c:	2b0e      	cmp	r3, #14
 800986e:	f200 80ad 	bhi.w	80099cc <_dtoa_r+0x484>
 8009872:	2d00      	cmp	r5, #0
 8009874:	f000 80aa 	beq.w	80099cc <_dtoa_r+0x484>
 8009878:	f1ba 0f00 	cmp.w	sl, #0
 800987c:	dd36      	ble.n	80098ec <_dtoa_r+0x3a4>
 800987e:	4ac3      	ldr	r2, [pc, #780]	; (8009b8c <_dtoa_r+0x644>)
 8009880:	f00a 030f 	and.w	r3, sl, #15
 8009884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009888:	ed93 7b00 	vldr	d7, [r3]
 800988c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009890:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009894:	eeb0 8a47 	vmov.f32	s16, s14
 8009898:	eef0 8a67 	vmov.f32	s17, s15
 800989c:	d016      	beq.n	80098cc <_dtoa_r+0x384>
 800989e:	4bbc      	ldr	r3, [pc, #752]	; (8009b90 <_dtoa_r+0x648>)
 80098a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098a8:	f7f6 ffe8 	bl	800087c <__aeabi_ddiv>
 80098ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b0:	f007 070f 	and.w	r7, r7, #15
 80098b4:	2503      	movs	r5, #3
 80098b6:	4eb6      	ldr	r6, [pc, #728]	; (8009b90 <_dtoa_r+0x648>)
 80098b8:	b957      	cbnz	r7, 80098d0 <_dtoa_r+0x388>
 80098ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098be:	ec53 2b18 	vmov	r2, r3, d8
 80098c2:	f7f6 ffdb 	bl	800087c <__aeabi_ddiv>
 80098c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ca:	e029      	b.n	8009920 <_dtoa_r+0x3d8>
 80098cc:	2502      	movs	r5, #2
 80098ce:	e7f2      	b.n	80098b6 <_dtoa_r+0x36e>
 80098d0:	07f9      	lsls	r1, r7, #31
 80098d2:	d508      	bpl.n	80098e6 <_dtoa_r+0x39e>
 80098d4:	ec51 0b18 	vmov	r0, r1, d8
 80098d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098dc:	f7f6 fea4 	bl	8000628 <__aeabi_dmul>
 80098e0:	ec41 0b18 	vmov	d8, r0, r1
 80098e4:	3501      	adds	r5, #1
 80098e6:	107f      	asrs	r7, r7, #1
 80098e8:	3608      	adds	r6, #8
 80098ea:	e7e5      	b.n	80098b8 <_dtoa_r+0x370>
 80098ec:	f000 80a6 	beq.w	8009a3c <_dtoa_r+0x4f4>
 80098f0:	f1ca 0600 	rsb	r6, sl, #0
 80098f4:	4ba5      	ldr	r3, [pc, #660]	; (8009b8c <_dtoa_r+0x644>)
 80098f6:	4fa6      	ldr	r7, [pc, #664]	; (8009b90 <_dtoa_r+0x648>)
 80098f8:	f006 020f 	and.w	r2, r6, #15
 80098fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009908:	f7f6 fe8e 	bl	8000628 <__aeabi_dmul>
 800990c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009910:	1136      	asrs	r6, r6, #4
 8009912:	2300      	movs	r3, #0
 8009914:	2502      	movs	r5, #2
 8009916:	2e00      	cmp	r6, #0
 8009918:	f040 8085 	bne.w	8009a26 <_dtoa_r+0x4de>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1d2      	bne.n	80098c6 <_dtoa_r+0x37e>
 8009920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 808c 	beq.w	8009a40 <_dtoa_r+0x4f8>
 8009928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800992c:	4b99      	ldr	r3, [pc, #612]	; (8009b94 <_dtoa_r+0x64c>)
 800992e:	2200      	movs	r2, #0
 8009930:	4630      	mov	r0, r6
 8009932:	4639      	mov	r1, r7
 8009934:	f7f7 f8ea 	bl	8000b0c <__aeabi_dcmplt>
 8009938:	2800      	cmp	r0, #0
 800993a:	f000 8081 	beq.w	8009a40 <_dtoa_r+0x4f8>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d07d      	beq.n	8009a40 <_dtoa_r+0x4f8>
 8009944:	f1b9 0f00 	cmp.w	r9, #0
 8009948:	dd3c      	ble.n	80099c4 <_dtoa_r+0x47c>
 800994a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	2200      	movs	r2, #0
 8009952:	4b91      	ldr	r3, [pc, #580]	; (8009b98 <_dtoa_r+0x650>)
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f6 fe66 	bl	8000628 <__aeabi_dmul>
 800995c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009960:	3501      	adds	r5, #1
 8009962:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009966:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800996a:	4628      	mov	r0, r5
 800996c:	f7f6 fdf2 	bl	8000554 <__aeabi_i2d>
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	f7f6 fe58 	bl	8000628 <__aeabi_dmul>
 8009978:	4b88      	ldr	r3, [pc, #544]	; (8009b9c <_dtoa_r+0x654>)
 800997a:	2200      	movs	r2, #0
 800997c:	f7f6 fc9e 	bl	80002bc <__adddf3>
 8009980:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009988:	9303      	str	r3, [sp, #12]
 800998a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800998c:	2b00      	cmp	r3, #0
 800998e:	d15c      	bne.n	8009a4a <_dtoa_r+0x502>
 8009990:	4b83      	ldr	r3, [pc, #524]	; (8009ba0 <_dtoa_r+0x658>)
 8009992:	2200      	movs	r2, #0
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f6 fc8e 	bl	80002b8 <__aeabi_dsub>
 800999c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a0:	4606      	mov	r6, r0
 80099a2:	460f      	mov	r7, r1
 80099a4:	f7f7 f8d0 	bl	8000b48 <__aeabi_dcmpgt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f040 8296 	bne.w	8009eda <_dtoa_r+0x992>
 80099ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80099b2:	4630      	mov	r0, r6
 80099b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099b8:	4639      	mov	r1, r7
 80099ba:	f7f7 f8a7 	bl	8000b0c <__aeabi_dcmplt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	f040 8288 	bne.w	8009ed4 <_dtoa_r+0x98c>
 80099c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f2c0 8158 	blt.w	8009c84 <_dtoa_r+0x73c>
 80099d4:	f1ba 0f0e 	cmp.w	sl, #14
 80099d8:	f300 8154 	bgt.w	8009c84 <_dtoa_r+0x73c>
 80099dc:	4b6b      	ldr	r3, [pc, #428]	; (8009b8c <_dtoa_r+0x644>)
 80099de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f280 80e3 	bge.w	8009bb4 <_dtoa_r+0x66c>
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f300 80df 	bgt.w	8009bb4 <_dtoa_r+0x66c>
 80099f6:	f040 826d 	bne.w	8009ed4 <_dtoa_r+0x98c>
 80099fa:	4b69      	ldr	r3, [pc, #420]	; (8009ba0 <_dtoa_r+0x658>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	4640      	mov	r0, r8
 8009a00:	4649      	mov	r1, r9
 8009a02:	f7f6 fe11 	bl	8000628 <__aeabi_dmul>
 8009a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a0a:	f7f7 f893 	bl	8000b34 <__aeabi_dcmpge>
 8009a0e:	9e01      	ldr	r6, [sp, #4]
 8009a10:	4637      	mov	r7, r6
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f040 8243 	bne.w	8009e9e <_dtoa_r+0x956>
 8009a18:	9d00      	ldr	r5, [sp, #0]
 8009a1a:	2331      	movs	r3, #49	; 0x31
 8009a1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009a20:	f10a 0a01 	add.w	sl, sl, #1
 8009a24:	e23f      	b.n	8009ea6 <_dtoa_r+0x95e>
 8009a26:	07f2      	lsls	r2, r6, #31
 8009a28:	d505      	bpl.n	8009a36 <_dtoa_r+0x4ee>
 8009a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a2e:	f7f6 fdfb 	bl	8000628 <__aeabi_dmul>
 8009a32:	3501      	adds	r5, #1
 8009a34:	2301      	movs	r3, #1
 8009a36:	1076      	asrs	r6, r6, #1
 8009a38:	3708      	adds	r7, #8
 8009a3a:	e76c      	b.n	8009916 <_dtoa_r+0x3ce>
 8009a3c:	2502      	movs	r5, #2
 8009a3e:	e76f      	b.n	8009920 <_dtoa_r+0x3d8>
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a46:	930c      	str	r3, [sp, #48]	; 0x30
 8009a48:	e78d      	b.n	8009966 <_dtoa_r+0x41e>
 8009a4a:	9900      	ldr	r1, [sp, #0]
 8009a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a50:	4b4e      	ldr	r3, [pc, #312]	; (8009b8c <_dtoa_r+0x644>)
 8009a52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a56:	4401      	add	r1, r0
 8009a58:	9102      	str	r1, [sp, #8]
 8009a5a:	9908      	ldr	r1, [sp, #32]
 8009a5c:	eeb0 8a47 	vmov.f32	s16, s14
 8009a60:	eef0 8a67 	vmov.f32	s17, s15
 8009a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d045      	beq.n	8009afc <_dtoa_r+0x5b4>
 8009a70:	494c      	ldr	r1, [pc, #304]	; (8009ba4 <_dtoa_r+0x65c>)
 8009a72:	2000      	movs	r0, #0
 8009a74:	f7f6 ff02 	bl	800087c <__aeabi_ddiv>
 8009a78:	ec53 2b18 	vmov	r2, r3, d8
 8009a7c:	f7f6 fc1c 	bl	80002b8 <__aeabi_dsub>
 8009a80:	9d00      	ldr	r5, [sp, #0]
 8009a82:	ec41 0b18 	vmov	d8, r0, r1
 8009a86:	4639      	mov	r1, r7
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7f7 f87d 	bl	8000b88 <__aeabi_d2iz>
 8009a8e:	900c      	str	r0, [sp, #48]	; 0x30
 8009a90:	f7f6 fd60 	bl	8000554 <__aeabi_i2d>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 fc0c 	bl	80002b8 <__aeabi_dsub>
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa2:	3330      	adds	r3, #48	; 0x30
 8009aa4:	f805 3b01 	strb.w	r3, [r5], #1
 8009aa8:	ec53 2b18 	vmov	r2, r3, d8
 8009aac:	4606      	mov	r6, r0
 8009aae:	460f      	mov	r7, r1
 8009ab0:	f7f7 f82c 	bl	8000b0c <__aeabi_dcmplt>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d165      	bne.n	8009b84 <_dtoa_r+0x63c>
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	4935      	ldr	r1, [pc, #212]	; (8009b94 <_dtoa_r+0x64c>)
 8009abe:	2000      	movs	r0, #0
 8009ac0:	f7f6 fbfa 	bl	80002b8 <__aeabi_dsub>
 8009ac4:	ec53 2b18 	vmov	r2, r3, d8
 8009ac8:	f7f7 f820 	bl	8000b0c <__aeabi_dcmplt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f040 80b9 	bne.w	8009c44 <_dtoa_r+0x6fc>
 8009ad2:	9b02      	ldr	r3, [sp, #8]
 8009ad4:	429d      	cmp	r5, r3
 8009ad6:	f43f af75 	beq.w	80099c4 <_dtoa_r+0x47c>
 8009ada:	4b2f      	ldr	r3, [pc, #188]	; (8009b98 <_dtoa_r+0x650>)
 8009adc:	ec51 0b18 	vmov	r0, r1, d8
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f7f6 fda1 	bl	8000628 <__aeabi_dmul>
 8009ae6:	4b2c      	ldr	r3, [pc, #176]	; (8009b98 <_dtoa_r+0x650>)
 8009ae8:	ec41 0b18 	vmov	d8, r0, r1
 8009aec:	2200      	movs	r2, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f6 fd99 	bl	8000628 <__aeabi_dmul>
 8009af6:	4606      	mov	r6, r0
 8009af8:	460f      	mov	r7, r1
 8009afa:	e7c4      	b.n	8009a86 <_dtoa_r+0x53e>
 8009afc:	ec51 0b17 	vmov	r0, r1, d7
 8009b00:	f7f6 fd92 	bl	8000628 <__aeabi_dmul>
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	9d00      	ldr	r5, [sp, #0]
 8009b08:	930c      	str	r3, [sp, #48]	; 0x30
 8009b0a:	ec41 0b18 	vmov	d8, r0, r1
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7f7 f839 	bl	8000b88 <__aeabi_d2iz>
 8009b16:	9011      	str	r0, [sp, #68]	; 0x44
 8009b18:	f7f6 fd1c 	bl	8000554 <__aeabi_i2d>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f6 fbc8 	bl	80002b8 <__aeabi_dsub>
 8009b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b2a:	3330      	adds	r3, #48	; 0x30
 8009b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	429d      	cmp	r5, r3
 8009b34:	4606      	mov	r6, r0
 8009b36:	460f      	mov	r7, r1
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	d134      	bne.n	8009ba8 <_dtoa_r+0x660>
 8009b3e:	4b19      	ldr	r3, [pc, #100]	; (8009ba4 <_dtoa_r+0x65c>)
 8009b40:	ec51 0b18 	vmov	r0, r1, d8
 8009b44:	f7f6 fbba 	bl	80002bc <__adddf3>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f7f6 fffa 	bl	8000b48 <__aeabi_dcmpgt>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d175      	bne.n	8009c44 <_dtoa_r+0x6fc>
 8009b58:	ec53 2b18 	vmov	r2, r3, d8
 8009b5c:	4911      	ldr	r1, [pc, #68]	; (8009ba4 <_dtoa_r+0x65c>)
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f7f6 fbaa 	bl	80002b8 <__aeabi_dsub>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 ffce 	bl	8000b0c <__aeabi_dcmplt>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	f43f af27 	beq.w	80099c4 <_dtoa_r+0x47c>
 8009b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b78:	1e6b      	subs	r3, r5, #1
 8009b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b80:	2b30      	cmp	r3, #48	; 0x30
 8009b82:	d0f8      	beq.n	8009b76 <_dtoa_r+0x62e>
 8009b84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b88:	e04a      	b.n	8009c20 <_dtoa_r+0x6d8>
 8009b8a:	bf00      	nop
 8009b8c:	0800e558 	.word	0x0800e558
 8009b90:	0800e530 	.word	0x0800e530
 8009b94:	3ff00000 	.word	0x3ff00000
 8009b98:	40240000 	.word	0x40240000
 8009b9c:	401c0000 	.word	0x401c0000
 8009ba0:	40140000 	.word	0x40140000
 8009ba4:	3fe00000 	.word	0x3fe00000
 8009ba8:	4baf      	ldr	r3, [pc, #700]	; (8009e68 <_dtoa_r+0x920>)
 8009baa:	f7f6 fd3d 	bl	8000628 <__aeabi_dmul>
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460f      	mov	r7, r1
 8009bb2:	e7ac      	b.n	8009b0e <_dtoa_r+0x5c6>
 8009bb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bb8:	9d00      	ldr	r5, [sp, #0]
 8009bba:	4642      	mov	r2, r8
 8009bbc:	464b      	mov	r3, r9
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	f7f6 fe5b 	bl	800087c <__aeabi_ddiv>
 8009bc6:	f7f6 ffdf 	bl	8000b88 <__aeabi_d2iz>
 8009bca:	9002      	str	r0, [sp, #8]
 8009bcc:	f7f6 fcc2 	bl	8000554 <__aeabi_i2d>
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	f7f6 fd28 	bl	8000628 <__aeabi_dmul>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 fb6a 	bl	80002b8 <__aeabi_dsub>
 8009be4:	9e02      	ldr	r6, [sp, #8]
 8009be6:	9f01      	ldr	r7, [sp, #4]
 8009be8:	3630      	adds	r6, #48	; 0x30
 8009bea:	f805 6b01 	strb.w	r6, [r5], #1
 8009bee:	9e00      	ldr	r6, [sp, #0]
 8009bf0:	1bae      	subs	r6, r5, r6
 8009bf2:	42b7      	cmp	r7, r6
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	d137      	bne.n	8009c6a <_dtoa_r+0x722>
 8009bfa:	f7f6 fb5f 	bl	80002bc <__adddf3>
 8009bfe:	4642      	mov	r2, r8
 8009c00:	464b      	mov	r3, r9
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	f7f6 ff9f 	bl	8000b48 <__aeabi_dcmpgt>
 8009c0a:	b9c8      	cbnz	r0, 8009c40 <_dtoa_r+0x6f8>
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	464b      	mov	r3, r9
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 ff70 	bl	8000af8 <__aeabi_dcmpeq>
 8009c18:	b110      	cbz	r0, 8009c20 <_dtoa_r+0x6d8>
 8009c1a:	9b02      	ldr	r3, [sp, #8]
 8009c1c:	07d9      	lsls	r1, r3, #31
 8009c1e:	d40f      	bmi.n	8009c40 <_dtoa_r+0x6f8>
 8009c20:	4620      	mov	r0, r4
 8009c22:	4659      	mov	r1, fp
 8009c24:	f001 f888 	bl	800ad38 <_Bfree>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	702b      	strb	r3, [r5, #0]
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c2e:	f10a 0001 	add.w	r0, sl, #1
 8009c32:	6018      	str	r0, [r3, #0]
 8009c34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f43f acd8 	beq.w	80095ec <_dtoa_r+0xa4>
 8009c3c:	601d      	str	r5, [r3, #0]
 8009c3e:	e4d5      	b.n	80095ec <_dtoa_r+0xa4>
 8009c40:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c44:	462b      	mov	r3, r5
 8009c46:	461d      	mov	r5, r3
 8009c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c4c:	2a39      	cmp	r2, #57	; 0x39
 8009c4e:	d108      	bne.n	8009c62 <_dtoa_r+0x71a>
 8009c50:	9a00      	ldr	r2, [sp, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d1f7      	bne.n	8009c46 <_dtoa_r+0x6fe>
 8009c56:	9a07      	ldr	r2, [sp, #28]
 8009c58:	9900      	ldr	r1, [sp, #0]
 8009c5a:	3201      	adds	r2, #1
 8009c5c:	9207      	str	r2, [sp, #28]
 8009c5e:	2230      	movs	r2, #48	; 0x30
 8009c60:	700a      	strb	r2, [r1, #0]
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	3201      	adds	r2, #1
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	e78c      	b.n	8009b84 <_dtoa_r+0x63c>
 8009c6a:	4b7f      	ldr	r3, [pc, #508]	; (8009e68 <_dtoa_r+0x920>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f7f6 fcdb 	bl	8000628 <__aeabi_dmul>
 8009c72:	2200      	movs	r2, #0
 8009c74:	2300      	movs	r3, #0
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	f7f6 ff3d 	bl	8000af8 <__aeabi_dcmpeq>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d09b      	beq.n	8009bba <_dtoa_r+0x672>
 8009c82:	e7cd      	b.n	8009c20 <_dtoa_r+0x6d8>
 8009c84:	9a08      	ldr	r2, [sp, #32]
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	f000 80c4 	beq.w	8009e14 <_dtoa_r+0x8cc>
 8009c8c:	9a05      	ldr	r2, [sp, #20]
 8009c8e:	2a01      	cmp	r2, #1
 8009c90:	f300 80a8 	bgt.w	8009de4 <_dtoa_r+0x89c>
 8009c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	f000 80a0 	beq.w	8009ddc <_dtoa_r+0x894>
 8009c9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ca0:	9e06      	ldr	r6, [sp, #24]
 8009ca2:	4645      	mov	r5, r8
 8009ca4:	9a04      	ldr	r2, [sp, #16]
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	441a      	add	r2, r3
 8009caa:	4620      	mov	r0, r4
 8009cac:	4498      	add	r8, r3
 8009cae:	9204      	str	r2, [sp, #16]
 8009cb0:	f001 f948 	bl	800af44 <__i2b>
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	dd0b      	ble.n	8009cd2 <_dtoa_r+0x78a>
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dd08      	ble.n	8009cd2 <_dtoa_r+0x78a>
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	bfa8      	it	ge
 8009cc6:	462b      	movge	r3, r5
 8009cc8:	eba8 0803 	sub.w	r8, r8, r3
 8009ccc:	1aed      	subs	r5, r5, r3
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	9b06      	ldr	r3, [sp, #24]
 8009cd4:	b1fb      	cbz	r3, 8009d16 <_dtoa_r+0x7ce>
 8009cd6:	9b08      	ldr	r3, [sp, #32]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 809f 	beq.w	8009e1c <_dtoa_r+0x8d4>
 8009cde:	2e00      	cmp	r6, #0
 8009ce0:	dd11      	ble.n	8009d06 <_dtoa_r+0x7be>
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f001 f9e8 	bl	800b0bc <__pow5mult>
 8009cec:	465a      	mov	r2, fp
 8009cee:	4601      	mov	r1, r0
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f001 f93c 	bl	800af70 <__multiply>
 8009cf8:	4659      	mov	r1, fp
 8009cfa:	9007      	str	r0, [sp, #28]
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f001 f81b 	bl	800ad38 <_Bfree>
 8009d02:	9b07      	ldr	r3, [sp, #28]
 8009d04:	469b      	mov	fp, r3
 8009d06:	9b06      	ldr	r3, [sp, #24]
 8009d08:	1b9a      	subs	r2, r3, r6
 8009d0a:	d004      	beq.n	8009d16 <_dtoa_r+0x7ce>
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f001 f9d4 	bl	800b0bc <__pow5mult>
 8009d14:	4683      	mov	fp, r0
 8009d16:	2101      	movs	r1, #1
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f001 f913 	bl	800af44 <__i2b>
 8009d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	4606      	mov	r6, r0
 8009d24:	dd7c      	ble.n	8009e20 <_dtoa_r+0x8d8>
 8009d26:	461a      	mov	r2, r3
 8009d28:	4601      	mov	r1, r0
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f001 f9c6 	bl	800b0bc <__pow5mult>
 8009d30:	9b05      	ldr	r3, [sp, #20]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	4606      	mov	r6, r0
 8009d36:	dd76      	ble.n	8009e26 <_dtoa_r+0x8de>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9306      	str	r3, [sp, #24]
 8009d3c:	6933      	ldr	r3, [r6, #16]
 8009d3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d42:	6918      	ldr	r0, [r3, #16]
 8009d44:	f001 f8ae 	bl	800aea4 <__hi0bits>
 8009d48:	f1c0 0020 	rsb	r0, r0, #32
 8009d4c:	9b04      	ldr	r3, [sp, #16]
 8009d4e:	4418      	add	r0, r3
 8009d50:	f010 001f 	ands.w	r0, r0, #31
 8009d54:	f000 8086 	beq.w	8009e64 <_dtoa_r+0x91c>
 8009d58:	f1c0 0320 	rsb	r3, r0, #32
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	dd7f      	ble.n	8009e60 <_dtoa_r+0x918>
 8009d60:	f1c0 001c 	rsb	r0, r0, #28
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	4403      	add	r3, r0
 8009d68:	4480      	add	r8, r0
 8009d6a:	4405      	add	r5, r0
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	f1b8 0f00 	cmp.w	r8, #0
 8009d72:	dd05      	ble.n	8009d80 <_dtoa_r+0x838>
 8009d74:	4659      	mov	r1, fp
 8009d76:	4642      	mov	r2, r8
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 f9f9 	bl	800b170 <__lshift>
 8009d7e:	4683      	mov	fp, r0
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dd05      	ble.n	8009d92 <_dtoa_r+0x84a>
 8009d86:	4631      	mov	r1, r6
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f001 f9f0 	bl	800b170 <__lshift>
 8009d90:	4606      	mov	r6, r0
 8009d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d069      	beq.n	8009e6c <_dtoa_r+0x924>
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4658      	mov	r0, fp
 8009d9c:	f001 fa54 	bl	800b248 <__mcmp>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	da63      	bge.n	8009e6c <_dtoa_r+0x924>
 8009da4:	2300      	movs	r3, #0
 8009da6:	4659      	mov	r1, fp
 8009da8:	220a      	movs	r2, #10
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 ffe6 	bl	800ad7c <__multadd>
 8009db0:	9b08      	ldr	r3, [sp, #32]
 8009db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009db6:	4683      	mov	fp, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 818f 	beq.w	800a0dc <_dtoa_r+0xb94>
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	220a      	movs	r2, #10
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 ffd9 	bl	800ad7c <__multadd>
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	4607      	mov	r7, r0
 8009dd0:	f300 808e 	bgt.w	8009ef0 <_dtoa_r+0x9a8>
 8009dd4:	9b05      	ldr	r3, [sp, #20]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	dc50      	bgt.n	8009e7c <_dtoa_r+0x934>
 8009dda:	e089      	b.n	8009ef0 <_dtoa_r+0x9a8>
 8009ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009de2:	e75d      	b.n	8009ca0 <_dtoa_r+0x758>
 8009de4:	9b01      	ldr	r3, [sp, #4]
 8009de6:	1e5e      	subs	r6, r3, #1
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	42b3      	cmp	r3, r6
 8009dec:	bfbf      	itttt	lt
 8009dee:	9b06      	ldrlt	r3, [sp, #24]
 8009df0:	9606      	strlt	r6, [sp, #24]
 8009df2:	1af2      	sublt	r2, r6, r3
 8009df4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009df6:	bfb6      	itet	lt
 8009df8:	189b      	addlt	r3, r3, r2
 8009dfa:	1b9e      	subge	r6, r3, r6
 8009dfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	bfb8      	it	lt
 8009e02:	2600      	movlt	r6, #0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bfb5      	itete	lt
 8009e08:	eba8 0503 	sublt.w	r5, r8, r3
 8009e0c:	9b01      	ldrge	r3, [sp, #4]
 8009e0e:	2300      	movlt	r3, #0
 8009e10:	4645      	movge	r5, r8
 8009e12:	e747      	b.n	8009ca4 <_dtoa_r+0x75c>
 8009e14:	9e06      	ldr	r6, [sp, #24]
 8009e16:	9f08      	ldr	r7, [sp, #32]
 8009e18:	4645      	mov	r5, r8
 8009e1a:	e74c      	b.n	8009cb6 <_dtoa_r+0x76e>
 8009e1c:	9a06      	ldr	r2, [sp, #24]
 8009e1e:	e775      	b.n	8009d0c <_dtoa_r+0x7c4>
 8009e20:	9b05      	ldr	r3, [sp, #20]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	dc18      	bgt.n	8009e58 <_dtoa_r+0x910>
 8009e26:	9b02      	ldr	r3, [sp, #8]
 8009e28:	b9b3      	cbnz	r3, 8009e58 <_dtoa_r+0x910>
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e30:	b9a3      	cbnz	r3, 8009e5c <_dtoa_r+0x914>
 8009e32:	9b03      	ldr	r3, [sp, #12]
 8009e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e38:	0d1b      	lsrs	r3, r3, #20
 8009e3a:	051b      	lsls	r3, r3, #20
 8009e3c:	b12b      	cbz	r3, 8009e4a <_dtoa_r+0x902>
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	3301      	adds	r3, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	f108 0801 	add.w	r8, r8, #1
 8009e48:	2301      	movs	r3, #1
 8009e4a:	9306      	str	r3, [sp, #24]
 8009e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f47f af74 	bne.w	8009d3c <_dtoa_r+0x7f4>
 8009e54:	2001      	movs	r0, #1
 8009e56:	e779      	b.n	8009d4c <_dtoa_r+0x804>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e7f6      	b.n	8009e4a <_dtoa_r+0x902>
 8009e5c:	9b02      	ldr	r3, [sp, #8]
 8009e5e:	e7f4      	b.n	8009e4a <_dtoa_r+0x902>
 8009e60:	d085      	beq.n	8009d6e <_dtoa_r+0x826>
 8009e62:	4618      	mov	r0, r3
 8009e64:	301c      	adds	r0, #28
 8009e66:	e77d      	b.n	8009d64 <_dtoa_r+0x81c>
 8009e68:	40240000 	.word	0x40240000
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dc38      	bgt.n	8009ee4 <_dtoa_r+0x99c>
 8009e72:	9b05      	ldr	r3, [sp, #20]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	dd35      	ble.n	8009ee4 <_dtoa_r+0x99c>
 8009e78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e7c:	f1b9 0f00 	cmp.w	r9, #0
 8009e80:	d10d      	bne.n	8009e9e <_dtoa_r+0x956>
 8009e82:	4631      	mov	r1, r6
 8009e84:	464b      	mov	r3, r9
 8009e86:	2205      	movs	r2, #5
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f000 ff77 	bl	800ad7c <__multadd>
 8009e8e:	4601      	mov	r1, r0
 8009e90:	4606      	mov	r6, r0
 8009e92:	4658      	mov	r0, fp
 8009e94:	f001 f9d8 	bl	800b248 <__mcmp>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f73f adbd 	bgt.w	8009a18 <_dtoa_r+0x4d0>
 8009e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea0:	9d00      	ldr	r5, [sp, #0]
 8009ea2:	ea6f 0a03 	mvn.w	sl, r3
 8009ea6:	f04f 0800 	mov.w	r8, #0
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 ff43 	bl	800ad38 <_Bfree>
 8009eb2:	2f00      	cmp	r7, #0
 8009eb4:	f43f aeb4 	beq.w	8009c20 <_dtoa_r+0x6d8>
 8009eb8:	f1b8 0f00 	cmp.w	r8, #0
 8009ebc:	d005      	beq.n	8009eca <_dtoa_r+0x982>
 8009ebe:	45b8      	cmp	r8, r7
 8009ec0:	d003      	beq.n	8009eca <_dtoa_r+0x982>
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 ff37 	bl	800ad38 <_Bfree>
 8009eca:	4639      	mov	r1, r7
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 ff33 	bl	800ad38 <_Bfree>
 8009ed2:	e6a5      	b.n	8009c20 <_dtoa_r+0x6d8>
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	4637      	mov	r7, r6
 8009ed8:	e7e1      	b.n	8009e9e <_dtoa_r+0x956>
 8009eda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009edc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ee0:	4637      	mov	r7, r6
 8009ee2:	e599      	b.n	8009a18 <_dtoa_r+0x4d0>
 8009ee4:	9b08      	ldr	r3, [sp, #32]
 8009ee6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 80fd 	beq.w	800a0ea <_dtoa_r+0xba2>
 8009ef0:	2d00      	cmp	r5, #0
 8009ef2:	dd05      	ble.n	8009f00 <_dtoa_r+0x9b8>
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	462a      	mov	r2, r5
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f001 f939 	bl	800b170 <__lshift>
 8009efe:	4607      	mov	r7, r0
 8009f00:	9b06      	ldr	r3, [sp, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d05c      	beq.n	8009fc0 <_dtoa_r+0xa78>
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fed5 	bl	800acb8 <_Balloc>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	b928      	cbnz	r0, 8009f1e <_dtoa_r+0x9d6>
 8009f12:	4b80      	ldr	r3, [pc, #512]	; (800a114 <_dtoa_r+0xbcc>)
 8009f14:	4602      	mov	r2, r0
 8009f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f1a:	f7ff bb2e 	b.w	800957a <_dtoa_r+0x32>
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	3202      	adds	r2, #2
 8009f22:	0092      	lsls	r2, r2, #2
 8009f24:	f107 010c 	add.w	r1, r7, #12
 8009f28:	300c      	adds	r0, #12
 8009f2a:	f000 feb7 	bl	800ac9c <memcpy>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4629      	mov	r1, r5
 8009f32:	4620      	mov	r0, r4
 8009f34:	f001 f91c 	bl	800b170 <__lshift>
 8009f38:	9b00      	ldr	r3, [sp, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	9b00      	ldr	r3, [sp, #0]
 8009f40:	444b      	add	r3, r9
 8009f42:	9307      	str	r3, [sp, #28]
 8009f44:	9b02      	ldr	r3, [sp, #8]
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	46b8      	mov	r8, r7
 8009f4c:	9306      	str	r3, [sp, #24]
 8009f4e:	4607      	mov	r7, r0
 8009f50:	9b01      	ldr	r3, [sp, #4]
 8009f52:	4631      	mov	r1, r6
 8009f54:	3b01      	subs	r3, #1
 8009f56:	4658      	mov	r0, fp
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	f7ff fa69 	bl	8009430 <quorem>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	3330      	adds	r3, #48	; 0x30
 8009f62:	9004      	str	r0, [sp, #16]
 8009f64:	4641      	mov	r1, r8
 8009f66:	4658      	mov	r0, fp
 8009f68:	9308      	str	r3, [sp, #32]
 8009f6a:	f001 f96d 	bl	800b248 <__mcmp>
 8009f6e:	463a      	mov	r2, r7
 8009f70:	4681      	mov	r9, r0
 8009f72:	4631      	mov	r1, r6
 8009f74:	4620      	mov	r0, r4
 8009f76:	f001 f983 	bl	800b280 <__mdiff>
 8009f7a:	68c2      	ldr	r2, [r0, #12]
 8009f7c:	9b08      	ldr	r3, [sp, #32]
 8009f7e:	4605      	mov	r5, r0
 8009f80:	bb02      	cbnz	r2, 8009fc4 <_dtoa_r+0xa7c>
 8009f82:	4601      	mov	r1, r0
 8009f84:	4658      	mov	r0, fp
 8009f86:	f001 f95f 	bl	800b248 <__mcmp>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4620      	mov	r0, r4
 8009f92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009f96:	f000 fecf 	bl	800ad38 <_Bfree>
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f9e:	9d01      	ldr	r5, [sp, #4]
 8009fa0:	ea43 0102 	orr.w	r1, r3, r2
 8009fa4:	9b06      	ldr	r3, [sp, #24]
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	d10d      	bne.n	8009fc8 <_dtoa_r+0xa80>
 8009fac:	2b39      	cmp	r3, #57	; 0x39
 8009fae:	d029      	beq.n	800a004 <_dtoa_r+0xabc>
 8009fb0:	f1b9 0f00 	cmp.w	r9, #0
 8009fb4:	dd01      	ble.n	8009fba <_dtoa_r+0xa72>
 8009fb6:	9b04      	ldr	r3, [sp, #16]
 8009fb8:	3331      	adds	r3, #49	; 0x31
 8009fba:	9a02      	ldr	r2, [sp, #8]
 8009fbc:	7013      	strb	r3, [r2, #0]
 8009fbe:	e774      	b.n	8009eaa <_dtoa_r+0x962>
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	e7b9      	b.n	8009f38 <_dtoa_r+0x9f0>
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	e7e2      	b.n	8009f8e <_dtoa_r+0xa46>
 8009fc8:	f1b9 0f00 	cmp.w	r9, #0
 8009fcc:	db06      	blt.n	8009fdc <_dtoa_r+0xa94>
 8009fce:	9905      	ldr	r1, [sp, #20]
 8009fd0:	ea41 0909 	orr.w	r9, r1, r9
 8009fd4:	9906      	ldr	r1, [sp, #24]
 8009fd6:	ea59 0101 	orrs.w	r1, r9, r1
 8009fda:	d120      	bne.n	800a01e <_dtoa_r+0xad6>
 8009fdc:	2a00      	cmp	r2, #0
 8009fde:	ddec      	ble.n	8009fba <_dtoa_r+0xa72>
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	f001 f8c2 	bl	800b170 <__lshift>
 8009fec:	4631      	mov	r1, r6
 8009fee:	4683      	mov	fp, r0
 8009ff0:	f001 f92a 	bl	800b248 <__mcmp>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	dc02      	bgt.n	800a000 <_dtoa_r+0xab8>
 8009ffa:	d1de      	bne.n	8009fba <_dtoa_r+0xa72>
 8009ffc:	07da      	lsls	r2, r3, #31
 8009ffe:	d5dc      	bpl.n	8009fba <_dtoa_r+0xa72>
 800a000:	2b39      	cmp	r3, #57	; 0x39
 800a002:	d1d8      	bne.n	8009fb6 <_dtoa_r+0xa6e>
 800a004:	9a02      	ldr	r2, [sp, #8]
 800a006:	2339      	movs	r3, #57	; 0x39
 800a008:	7013      	strb	r3, [r2, #0]
 800a00a:	462b      	mov	r3, r5
 800a00c:	461d      	mov	r5, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a014:	2a39      	cmp	r2, #57	; 0x39
 800a016:	d050      	beq.n	800a0ba <_dtoa_r+0xb72>
 800a018:	3201      	adds	r2, #1
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	e745      	b.n	8009eaa <_dtoa_r+0x962>
 800a01e:	2a00      	cmp	r2, #0
 800a020:	dd03      	ble.n	800a02a <_dtoa_r+0xae2>
 800a022:	2b39      	cmp	r3, #57	; 0x39
 800a024:	d0ee      	beq.n	800a004 <_dtoa_r+0xabc>
 800a026:	3301      	adds	r3, #1
 800a028:	e7c7      	b.n	8009fba <_dtoa_r+0xa72>
 800a02a:	9a01      	ldr	r2, [sp, #4]
 800a02c:	9907      	ldr	r1, [sp, #28]
 800a02e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a032:	428a      	cmp	r2, r1
 800a034:	d02a      	beq.n	800a08c <_dtoa_r+0xb44>
 800a036:	4659      	mov	r1, fp
 800a038:	2300      	movs	r3, #0
 800a03a:	220a      	movs	r2, #10
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fe9d 	bl	800ad7c <__multadd>
 800a042:	45b8      	cmp	r8, r7
 800a044:	4683      	mov	fp, r0
 800a046:	f04f 0300 	mov.w	r3, #0
 800a04a:	f04f 020a 	mov.w	r2, #10
 800a04e:	4641      	mov	r1, r8
 800a050:	4620      	mov	r0, r4
 800a052:	d107      	bne.n	800a064 <_dtoa_r+0xb1c>
 800a054:	f000 fe92 	bl	800ad7c <__multadd>
 800a058:	4680      	mov	r8, r0
 800a05a:	4607      	mov	r7, r0
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	3301      	adds	r3, #1
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	e775      	b.n	8009f50 <_dtoa_r+0xa08>
 800a064:	f000 fe8a 	bl	800ad7c <__multadd>
 800a068:	4639      	mov	r1, r7
 800a06a:	4680      	mov	r8, r0
 800a06c:	2300      	movs	r3, #0
 800a06e:	220a      	movs	r2, #10
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fe83 	bl	800ad7c <__multadd>
 800a076:	4607      	mov	r7, r0
 800a078:	e7f0      	b.n	800a05c <_dtoa_r+0xb14>
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	9a00      	ldr	r2, [sp, #0]
 800a080:	bfcc      	ite	gt
 800a082:	464d      	movgt	r5, r9
 800a084:	2501      	movle	r5, #1
 800a086:	4415      	add	r5, r2
 800a088:	f04f 0800 	mov.w	r8, #0
 800a08c:	4659      	mov	r1, fp
 800a08e:	2201      	movs	r2, #1
 800a090:	4620      	mov	r0, r4
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	f001 f86c 	bl	800b170 <__lshift>
 800a098:	4631      	mov	r1, r6
 800a09a:	4683      	mov	fp, r0
 800a09c:	f001 f8d4 	bl	800b248 <__mcmp>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	dcb2      	bgt.n	800a00a <_dtoa_r+0xac2>
 800a0a4:	d102      	bne.n	800a0ac <_dtoa_r+0xb64>
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	07db      	lsls	r3, r3, #31
 800a0aa:	d4ae      	bmi.n	800a00a <_dtoa_r+0xac2>
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	461d      	mov	r5, r3
 800a0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0b4:	2a30      	cmp	r2, #48	; 0x30
 800a0b6:	d0fa      	beq.n	800a0ae <_dtoa_r+0xb66>
 800a0b8:	e6f7      	b.n	8009eaa <_dtoa_r+0x962>
 800a0ba:	9a00      	ldr	r2, [sp, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d1a5      	bne.n	800a00c <_dtoa_r+0xac4>
 800a0c0:	f10a 0a01 	add.w	sl, sl, #1
 800a0c4:	2331      	movs	r3, #49	; 0x31
 800a0c6:	e779      	b.n	8009fbc <_dtoa_r+0xa74>
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <_dtoa_r+0xbd0>)
 800a0ca:	f7ff baaf 	b.w	800962c <_dtoa_r+0xe4>
 800a0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f aa86 	bne.w	80095e2 <_dtoa_r+0x9a>
 800a0d6:	4b11      	ldr	r3, [pc, #68]	; (800a11c <_dtoa_r+0xbd4>)
 800a0d8:	f7ff baa8 	b.w	800962c <_dtoa_r+0xe4>
 800a0dc:	f1b9 0f00 	cmp.w	r9, #0
 800a0e0:	dc03      	bgt.n	800a0ea <_dtoa_r+0xba2>
 800a0e2:	9b05      	ldr	r3, [sp, #20]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	f73f aec9 	bgt.w	8009e7c <_dtoa_r+0x934>
 800a0ea:	9d00      	ldr	r5, [sp, #0]
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	f7ff f99e 	bl	8009430 <quorem>
 800a0f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0f8:	f805 3b01 	strb.w	r3, [r5], #1
 800a0fc:	9a00      	ldr	r2, [sp, #0]
 800a0fe:	1aaa      	subs	r2, r5, r2
 800a100:	4591      	cmp	r9, r2
 800a102:	ddba      	ble.n	800a07a <_dtoa_r+0xb32>
 800a104:	4659      	mov	r1, fp
 800a106:	2300      	movs	r3, #0
 800a108:	220a      	movs	r2, #10
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 fe36 	bl	800ad7c <__multadd>
 800a110:	4683      	mov	fp, r0
 800a112:	e7eb      	b.n	800a0ec <_dtoa_r+0xba4>
 800a114:	0800e3dc 	.word	0x0800e3dc
 800a118:	0800e641 	.word	0x0800e641
 800a11c:	0800e359 	.word	0x0800e359

0800a120 <__sflush_r>:
 800a120:	898a      	ldrh	r2, [r1, #12]
 800a122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	4605      	mov	r5, r0
 800a128:	0710      	lsls	r0, r2, #28
 800a12a:	460c      	mov	r4, r1
 800a12c:	d458      	bmi.n	800a1e0 <__sflush_r+0xc0>
 800a12e:	684b      	ldr	r3, [r1, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc05      	bgt.n	800a140 <__sflush_r+0x20>
 800a134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	dc02      	bgt.n	800a140 <__sflush_r+0x20>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a142:	2e00      	cmp	r6, #0
 800a144:	d0f9      	beq.n	800a13a <__sflush_r+0x1a>
 800a146:	2300      	movs	r3, #0
 800a148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a14c:	682f      	ldr	r7, [r5, #0]
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	d032      	beq.n	800a1b8 <__sflush_r+0x98>
 800a152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	075a      	lsls	r2, r3, #29
 800a158:	d505      	bpl.n	800a166 <__sflush_r+0x46>
 800a15a:	6863      	ldr	r3, [r4, #4]
 800a15c:	1ac0      	subs	r0, r0, r3
 800a15e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a160:	b10b      	cbz	r3, 800a166 <__sflush_r+0x46>
 800a162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a164:	1ac0      	subs	r0, r0, r3
 800a166:	2300      	movs	r3, #0
 800a168:	4602      	mov	r2, r0
 800a16a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a16c:	6a21      	ldr	r1, [r4, #32]
 800a16e:	4628      	mov	r0, r5
 800a170:	47b0      	blx	r6
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	d106      	bne.n	800a186 <__sflush_r+0x66>
 800a178:	6829      	ldr	r1, [r5, #0]
 800a17a:	291d      	cmp	r1, #29
 800a17c:	d82c      	bhi.n	800a1d8 <__sflush_r+0xb8>
 800a17e:	4a2a      	ldr	r2, [pc, #168]	; (800a228 <__sflush_r+0x108>)
 800a180:	40ca      	lsrs	r2, r1
 800a182:	07d6      	lsls	r6, r2, #31
 800a184:	d528      	bpl.n	800a1d8 <__sflush_r+0xb8>
 800a186:	2200      	movs	r2, #0
 800a188:	6062      	str	r2, [r4, #4]
 800a18a:	04d9      	lsls	r1, r3, #19
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	d504      	bpl.n	800a19c <__sflush_r+0x7c>
 800a192:	1c42      	adds	r2, r0, #1
 800a194:	d101      	bne.n	800a19a <__sflush_r+0x7a>
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	b903      	cbnz	r3, 800a19c <__sflush_r+0x7c>
 800a19a:	6560      	str	r0, [r4, #84]	; 0x54
 800a19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a19e:	602f      	str	r7, [r5, #0]
 800a1a0:	2900      	cmp	r1, #0
 800a1a2:	d0ca      	beq.n	800a13a <__sflush_r+0x1a>
 800a1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	d002      	beq.n	800a1b2 <__sflush_r+0x92>
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f001 fa4d 	bl	800b64c <_free_r>
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a1b6:	e7c1      	b.n	800a13c <__sflush_r+0x1c>
 800a1b8:	6a21      	ldr	r1, [r4, #32]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b0      	blx	r6
 800a1c0:	1c41      	adds	r1, r0, #1
 800a1c2:	d1c7      	bne.n	800a154 <__sflush_r+0x34>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0c4      	beq.n	800a154 <__sflush_r+0x34>
 800a1ca:	2b1d      	cmp	r3, #29
 800a1cc:	d001      	beq.n	800a1d2 <__sflush_r+0xb2>
 800a1ce:	2b16      	cmp	r3, #22
 800a1d0:	d101      	bne.n	800a1d6 <__sflush_r+0xb6>
 800a1d2:	602f      	str	r7, [r5, #0]
 800a1d4:	e7b1      	b.n	800a13a <__sflush_r+0x1a>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	e7ad      	b.n	800a13c <__sflush_r+0x1c>
 800a1e0:	690f      	ldr	r7, [r1, #16]
 800a1e2:	2f00      	cmp	r7, #0
 800a1e4:	d0a9      	beq.n	800a13a <__sflush_r+0x1a>
 800a1e6:	0793      	lsls	r3, r2, #30
 800a1e8:	680e      	ldr	r6, [r1, #0]
 800a1ea:	bf08      	it	eq
 800a1ec:	694b      	ldreq	r3, [r1, #20]
 800a1ee:	600f      	str	r7, [r1, #0]
 800a1f0:	bf18      	it	ne
 800a1f2:	2300      	movne	r3, #0
 800a1f4:	eba6 0807 	sub.w	r8, r6, r7
 800a1f8:	608b      	str	r3, [r1, #8]
 800a1fa:	f1b8 0f00 	cmp.w	r8, #0
 800a1fe:	dd9c      	ble.n	800a13a <__sflush_r+0x1a>
 800a200:	6a21      	ldr	r1, [r4, #32]
 800a202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a204:	4643      	mov	r3, r8
 800a206:	463a      	mov	r2, r7
 800a208:	4628      	mov	r0, r5
 800a20a:	47b0      	blx	r6
 800a20c:	2800      	cmp	r0, #0
 800a20e:	dc06      	bgt.n	800a21e <__sflush_r+0xfe>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	e78e      	b.n	800a13c <__sflush_r+0x1c>
 800a21e:	4407      	add	r7, r0
 800a220:	eba8 0800 	sub.w	r8, r8, r0
 800a224:	e7e9      	b.n	800a1fa <__sflush_r+0xda>
 800a226:	bf00      	nop
 800a228:	20400001 	.word	0x20400001

0800a22c <_fflush_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	b913      	cbnz	r3, 800a23c <_fflush_r+0x10>
 800a236:	2500      	movs	r5, #0
 800a238:	4628      	mov	r0, r5
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	b118      	cbz	r0, 800a246 <_fflush_r+0x1a>
 800a23e:	6983      	ldr	r3, [r0, #24]
 800a240:	b90b      	cbnz	r3, 800a246 <_fflush_r+0x1a>
 800a242:	f000 f887 	bl	800a354 <__sinit>
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <_fflush_r+0x6c>)
 800a248:	429c      	cmp	r4, r3
 800a24a:	d11b      	bne.n	800a284 <_fflush_r+0x58>
 800a24c:	686c      	ldr	r4, [r5, #4]
 800a24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0ef      	beq.n	800a236 <_fflush_r+0xa>
 800a256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a258:	07d0      	lsls	r0, r2, #31
 800a25a:	d404      	bmi.n	800a266 <_fflush_r+0x3a>
 800a25c:	0599      	lsls	r1, r3, #22
 800a25e:	d402      	bmi.n	800a266 <_fflush_r+0x3a>
 800a260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a262:	f000 fc88 	bl	800ab76 <__retarget_lock_acquire_recursive>
 800a266:	4628      	mov	r0, r5
 800a268:	4621      	mov	r1, r4
 800a26a:	f7ff ff59 	bl	800a120 <__sflush_r>
 800a26e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a270:	07da      	lsls	r2, r3, #31
 800a272:	4605      	mov	r5, r0
 800a274:	d4e0      	bmi.n	800a238 <_fflush_r+0xc>
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	059b      	lsls	r3, r3, #22
 800a27a:	d4dd      	bmi.n	800a238 <_fflush_r+0xc>
 800a27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27e:	f000 fc7b 	bl	800ab78 <__retarget_lock_release_recursive>
 800a282:	e7d9      	b.n	800a238 <_fflush_r+0xc>
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <_fflush_r+0x70>)
 800a286:	429c      	cmp	r4, r3
 800a288:	d101      	bne.n	800a28e <_fflush_r+0x62>
 800a28a:	68ac      	ldr	r4, [r5, #8]
 800a28c:	e7df      	b.n	800a24e <_fflush_r+0x22>
 800a28e:	4b04      	ldr	r3, [pc, #16]	; (800a2a0 <_fflush_r+0x74>)
 800a290:	429c      	cmp	r4, r3
 800a292:	bf08      	it	eq
 800a294:	68ec      	ldreq	r4, [r5, #12]
 800a296:	e7da      	b.n	800a24e <_fflush_r+0x22>
 800a298:	0800e410 	.word	0x0800e410
 800a29c:	0800e430 	.word	0x0800e430
 800a2a0:	0800e3f0 	.word	0x0800e3f0

0800a2a4 <std>:
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2b2:	6083      	str	r3, [r0, #8]
 800a2b4:	8181      	strh	r1, [r0, #12]
 800a2b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a2b8:	81c2      	strh	r2, [r0, #14]
 800a2ba:	6183      	str	r3, [r0, #24]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	2208      	movs	r2, #8
 800a2c0:	305c      	adds	r0, #92	; 0x5c
 800a2c2:	f7fd f977 	bl	80075b4 <memset>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <std+0x38>)
 800a2c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a2ca:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <std+0x3c>)
 800a2cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <std+0x40>)
 800a2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <std+0x44>)
 800a2d4:	6224      	str	r4, [r4, #32]
 800a2d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	08008479 	.word	0x08008479
 800a2e0:	0800849f 	.word	0x0800849f
 800a2e4:	080084d7 	.word	0x080084d7
 800a2e8:	080084fb 	.word	0x080084fb

0800a2ec <_cleanup_r>:
 800a2ec:	4901      	ldr	r1, [pc, #4]	; (800a2f4 <_cleanup_r+0x8>)
 800a2ee:	f000 b8af 	b.w	800a450 <_fwalk_reent>
 800a2f2:	bf00      	nop
 800a2f4:	0800a22d 	.word	0x0800a22d

0800a2f8 <__sfmoreglue>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	1e4a      	subs	r2, r1, #1
 800a2fc:	2568      	movs	r5, #104	; 0x68
 800a2fe:	4355      	muls	r5, r2
 800a300:	460e      	mov	r6, r1
 800a302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a306:	f001 f9f1 	bl	800b6ec <_malloc_r>
 800a30a:	4604      	mov	r4, r0
 800a30c:	b140      	cbz	r0, 800a320 <__sfmoreglue+0x28>
 800a30e:	2100      	movs	r1, #0
 800a310:	e9c0 1600 	strd	r1, r6, [r0]
 800a314:	300c      	adds	r0, #12
 800a316:	60a0      	str	r0, [r4, #8]
 800a318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a31c:	f7fd f94a 	bl	80075b4 <memset>
 800a320:	4620      	mov	r0, r4
 800a322:	bd70      	pop	{r4, r5, r6, pc}

0800a324 <__sfp_lock_acquire>:
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <__sfp_lock_acquire+0x8>)
 800a326:	f000 bc26 	b.w	800ab76 <__retarget_lock_acquire_recursive>
 800a32a:	bf00      	nop
 800a32c:	200017cc 	.word	0x200017cc

0800a330 <__sfp_lock_release>:
 800a330:	4801      	ldr	r0, [pc, #4]	; (800a338 <__sfp_lock_release+0x8>)
 800a332:	f000 bc21 	b.w	800ab78 <__retarget_lock_release_recursive>
 800a336:	bf00      	nop
 800a338:	200017cc 	.word	0x200017cc

0800a33c <__sinit_lock_acquire>:
 800a33c:	4801      	ldr	r0, [pc, #4]	; (800a344 <__sinit_lock_acquire+0x8>)
 800a33e:	f000 bc1a 	b.w	800ab76 <__retarget_lock_acquire_recursive>
 800a342:	bf00      	nop
 800a344:	200017c7 	.word	0x200017c7

0800a348 <__sinit_lock_release>:
 800a348:	4801      	ldr	r0, [pc, #4]	; (800a350 <__sinit_lock_release+0x8>)
 800a34a:	f000 bc15 	b.w	800ab78 <__retarget_lock_release_recursive>
 800a34e:	bf00      	nop
 800a350:	200017c7 	.word	0x200017c7

0800a354 <__sinit>:
 800a354:	b510      	push	{r4, lr}
 800a356:	4604      	mov	r4, r0
 800a358:	f7ff fff0 	bl	800a33c <__sinit_lock_acquire>
 800a35c:	69a3      	ldr	r3, [r4, #24]
 800a35e:	b11b      	cbz	r3, 800a368 <__sinit+0x14>
 800a360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a364:	f7ff bff0 	b.w	800a348 <__sinit_lock_release>
 800a368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a36c:	6523      	str	r3, [r4, #80]	; 0x50
 800a36e:	4b13      	ldr	r3, [pc, #76]	; (800a3bc <__sinit+0x68>)
 800a370:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <__sinit+0x6c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	62a2      	str	r2, [r4, #40]	; 0x28
 800a376:	42a3      	cmp	r3, r4
 800a378:	bf04      	itt	eq
 800a37a:	2301      	moveq	r3, #1
 800a37c:	61a3      	streq	r3, [r4, #24]
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 f820 	bl	800a3c4 <__sfp>
 800a384:	6060      	str	r0, [r4, #4]
 800a386:	4620      	mov	r0, r4
 800a388:	f000 f81c 	bl	800a3c4 <__sfp>
 800a38c:	60a0      	str	r0, [r4, #8]
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 f818 	bl	800a3c4 <__sfp>
 800a394:	2200      	movs	r2, #0
 800a396:	60e0      	str	r0, [r4, #12]
 800a398:	2104      	movs	r1, #4
 800a39a:	6860      	ldr	r0, [r4, #4]
 800a39c:	f7ff ff82 	bl	800a2a4 <std>
 800a3a0:	68a0      	ldr	r0, [r4, #8]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	2109      	movs	r1, #9
 800a3a6:	f7ff ff7d 	bl	800a2a4 <std>
 800a3aa:	68e0      	ldr	r0, [r4, #12]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	2112      	movs	r1, #18
 800a3b0:	f7ff ff78 	bl	800a2a4 <std>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	61a3      	str	r3, [r4, #24]
 800a3b8:	e7d2      	b.n	800a360 <__sinit+0xc>
 800a3ba:	bf00      	nop
 800a3bc:	0800e1cc 	.word	0x0800e1cc
 800a3c0:	0800a2ed 	.word	0x0800a2ed

0800a3c4 <__sfp>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	f7ff ffac 	bl	800a324 <__sfp_lock_acquire>
 800a3cc:	4b1e      	ldr	r3, [pc, #120]	; (800a448 <__sfp+0x84>)
 800a3ce:	681e      	ldr	r6, [r3, #0]
 800a3d0:	69b3      	ldr	r3, [r6, #24]
 800a3d2:	b913      	cbnz	r3, 800a3da <__sfp+0x16>
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7ff ffbd 	bl	800a354 <__sinit>
 800a3da:	3648      	adds	r6, #72	; 0x48
 800a3dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	d503      	bpl.n	800a3ec <__sfp+0x28>
 800a3e4:	6833      	ldr	r3, [r6, #0]
 800a3e6:	b30b      	cbz	r3, 800a42c <__sfp+0x68>
 800a3e8:	6836      	ldr	r6, [r6, #0]
 800a3ea:	e7f7      	b.n	800a3dc <__sfp+0x18>
 800a3ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3f0:	b9d5      	cbnz	r5, 800a428 <__sfp+0x64>
 800a3f2:	4b16      	ldr	r3, [pc, #88]	; (800a44c <__sfp+0x88>)
 800a3f4:	60e3      	str	r3, [r4, #12]
 800a3f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a3fc:	f000 fbba 	bl	800ab74 <__retarget_lock_init_recursive>
 800a400:	f7ff ff96 	bl	800a330 <__sfp_lock_release>
 800a404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a40c:	6025      	str	r5, [r4, #0]
 800a40e:	61a5      	str	r5, [r4, #24]
 800a410:	2208      	movs	r2, #8
 800a412:	4629      	mov	r1, r5
 800a414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a418:	f7fd f8cc 	bl	80075b4 <memset>
 800a41c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a424:	4620      	mov	r0, r4
 800a426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a428:	3468      	adds	r4, #104	; 0x68
 800a42a:	e7d9      	b.n	800a3e0 <__sfp+0x1c>
 800a42c:	2104      	movs	r1, #4
 800a42e:	4638      	mov	r0, r7
 800a430:	f7ff ff62 	bl	800a2f8 <__sfmoreglue>
 800a434:	4604      	mov	r4, r0
 800a436:	6030      	str	r0, [r6, #0]
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1d5      	bne.n	800a3e8 <__sfp+0x24>
 800a43c:	f7ff ff78 	bl	800a330 <__sfp_lock_release>
 800a440:	230c      	movs	r3, #12
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	e7ee      	b.n	800a424 <__sfp+0x60>
 800a446:	bf00      	nop
 800a448:	0800e1cc 	.word	0x0800e1cc
 800a44c:	ffff0001 	.word	0xffff0001

0800a450 <_fwalk_reent>:
 800a450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a454:	4606      	mov	r6, r0
 800a456:	4688      	mov	r8, r1
 800a458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a45c:	2700      	movs	r7, #0
 800a45e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a462:	f1b9 0901 	subs.w	r9, r9, #1
 800a466:	d505      	bpl.n	800a474 <_fwalk_reent+0x24>
 800a468:	6824      	ldr	r4, [r4, #0]
 800a46a:	2c00      	cmp	r4, #0
 800a46c:	d1f7      	bne.n	800a45e <_fwalk_reent+0xe>
 800a46e:	4638      	mov	r0, r7
 800a470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a474:	89ab      	ldrh	r3, [r5, #12]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d907      	bls.n	800a48a <_fwalk_reent+0x3a>
 800a47a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a47e:	3301      	adds	r3, #1
 800a480:	d003      	beq.n	800a48a <_fwalk_reent+0x3a>
 800a482:	4629      	mov	r1, r5
 800a484:	4630      	mov	r0, r6
 800a486:	47c0      	blx	r8
 800a488:	4307      	orrs	r7, r0
 800a48a:	3568      	adds	r5, #104	; 0x68
 800a48c:	e7e9      	b.n	800a462 <_fwalk_reent+0x12>

0800a48e <rshift>:
 800a48e:	6903      	ldr	r3, [r0, #16]
 800a490:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a498:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a49c:	f100 0414 	add.w	r4, r0, #20
 800a4a0:	dd45      	ble.n	800a52e <rshift+0xa0>
 800a4a2:	f011 011f 	ands.w	r1, r1, #31
 800a4a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4ae:	d10c      	bne.n	800a4ca <rshift+0x3c>
 800a4b0:	f100 0710 	add.w	r7, r0, #16
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	42b1      	cmp	r1, r6
 800a4b8:	d334      	bcc.n	800a524 <rshift+0x96>
 800a4ba:	1a9b      	subs	r3, r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	1eea      	subs	r2, r5, #3
 800a4c0:	4296      	cmp	r6, r2
 800a4c2:	bf38      	it	cc
 800a4c4:	2300      	movcc	r3, #0
 800a4c6:	4423      	add	r3, r4
 800a4c8:	e015      	b.n	800a4f6 <rshift+0x68>
 800a4ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4ce:	f1c1 0820 	rsb	r8, r1, #32
 800a4d2:	40cf      	lsrs	r7, r1
 800a4d4:	f105 0e04 	add.w	lr, r5, #4
 800a4d8:	46a1      	mov	r9, r4
 800a4da:	4576      	cmp	r6, lr
 800a4dc:	46f4      	mov	ip, lr
 800a4de:	d815      	bhi.n	800a50c <rshift+0x7e>
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	009a      	lsls	r2, r3, #2
 800a4e4:	3a04      	subs	r2, #4
 800a4e6:	3501      	adds	r5, #1
 800a4e8:	42ae      	cmp	r6, r5
 800a4ea:	bf38      	it	cc
 800a4ec:	2200      	movcc	r2, #0
 800a4ee:	18a3      	adds	r3, r4, r2
 800a4f0:	50a7      	str	r7, [r4, r2]
 800a4f2:	b107      	cbz	r7, 800a4f6 <rshift+0x68>
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	1b1a      	subs	r2, r3, r4
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4fe:	bf08      	it	eq
 800a500:	2300      	moveq	r3, #0
 800a502:	6102      	str	r2, [r0, #16]
 800a504:	bf08      	it	eq
 800a506:	6143      	streq	r3, [r0, #20]
 800a508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50c:	f8dc c000 	ldr.w	ip, [ip]
 800a510:	fa0c fc08 	lsl.w	ip, ip, r8
 800a514:	ea4c 0707 	orr.w	r7, ip, r7
 800a518:	f849 7b04 	str.w	r7, [r9], #4
 800a51c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a520:	40cf      	lsrs	r7, r1
 800a522:	e7da      	b.n	800a4da <rshift+0x4c>
 800a524:	f851 cb04 	ldr.w	ip, [r1], #4
 800a528:	f847 cf04 	str.w	ip, [r7, #4]!
 800a52c:	e7c3      	b.n	800a4b6 <rshift+0x28>
 800a52e:	4623      	mov	r3, r4
 800a530:	e7e1      	b.n	800a4f6 <rshift+0x68>

0800a532 <__hexdig_fun>:
 800a532:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a536:	2b09      	cmp	r3, #9
 800a538:	d802      	bhi.n	800a540 <__hexdig_fun+0xe>
 800a53a:	3820      	subs	r0, #32
 800a53c:	b2c0      	uxtb	r0, r0
 800a53e:	4770      	bx	lr
 800a540:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a544:	2b05      	cmp	r3, #5
 800a546:	d801      	bhi.n	800a54c <__hexdig_fun+0x1a>
 800a548:	3847      	subs	r0, #71	; 0x47
 800a54a:	e7f7      	b.n	800a53c <__hexdig_fun+0xa>
 800a54c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a550:	2b05      	cmp	r3, #5
 800a552:	d801      	bhi.n	800a558 <__hexdig_fun+0x26>
 800a554:	3827      	subs	r0, #39	; 0x27
 800a556:	e7f1      	b.n	800a53c <__hexdig_fun+0xa>
 800a558:	2000      	movs	r0, #0
 800a55a:	4770      	bx	lr

0800a55c <__gethex>:
 800a55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a560:	ed2d 8b02 	vpush	{d8}
 800a564:	b089      	sub	sp, #36	; 0x24
 800a566:	ee08 0a10 	vmov	s16, r0
 800a56a:	9304      	str	r3, [sp, #16]
 800a56c:	4bbc      	ldr	r3, [pc, #752]	; (800a860 <__gethex+0x304>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	4618      	mov	r0, r3
 800a574:	468b      	mov	fp, r1
 800a576:	4690      	mov	r8, r2
 800a578:	f7f5 fe3c 	bl	80001f4 <strlen>
 800a57c:	9b01      	ldr	r3, [sp, #4]
 800a57e:	f8db 2000 	ldr.w	r2, [fp]
 800a582:	4403      	add	r3, r0
 800a584:	4682      	mov	sl, r0
 800a586:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	1c93      	adds	r3, r2, #2
 800a58e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a596:	32fe      	adds	r2, #254	; 0xfe
 800a598:	18d1      	adds	r1, r2, r3
 800a59a:	461f      	mov	r7, r3
 800a59c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a5a0:	9100      	str	r1, [sp, #0]
 800a5a2:	2830      	cmp	r0, #48	; 0x30
 800a5a4:	d0f8      	beq.n	800a598 <__gethex+0x3c>
 800a5a6:	f7ff ffc4 	bl	800a532 <__hexdig_fun>
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d13a      	bne.n	800a626 <__gethex+0xca>
 800a5b0:	9901      	ldr	r1, [sp, #4]
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f001 ff2d 	bl	800c414 <strncmp>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d168      	bne.n	800a692 <__gethex+0x136>
 800a5c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a5c4:	eb07 060a 	add.w	r6, r7, sl
 800a5c8:	f7ff ffb3 	bl	800a532 <__hexdig_fun>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d062      	beq.n	800a696 <__gethex+0x13a>
 800a5d0:	4633      	mov	r3, r6
 800a5d2:	7818      	ldrb	r0, [r3, #0]
 800a5d4:	2830      	cmp	r0, #48	; 0x30
 800a5d6:	461f      	mov	r7, r3
 800a5d8:	f103 0301 	add.w	r3, r3, #1
 800a5dc:	d0f9      	beq.n	800a5d2 <__gethex+0x76>
 800a5de:	f7ff ffa8 	bl	800a532 <__hexdig_fun>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	fab0 f480 	clz	r4, r0
 800a5e8:	0964      	lsrs	r4, r4, #5
 800a5ea:	4635      	mov	r5, r6
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	463a      	mov	r2, r7
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	3201      	adds	r2, #1
 800a5f4:	7830      	ldrb	r0, [r6, #0]
 800a5f6:	f7ff ff9c 	bl	800a532 <__hexdig_fun>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1f8      	bne.n	800a5f0 <__gethex+0x94>
 800a5fe:	9901      	ldr	r1, [sp, #4]
 800a600:	4652      	mov	r2, sl
 800a602:	4630      	mov	r0, r6
 800a604:	f001 ff06 	bl	800c414 <strncmp>
 800a608:	b980      	cbnz	r0, 800a62c <__gethex+0xd0>
 800a60a:	b94d      	cbnz	r5, 800a620 <__gethex+0xc4>
 800a60c:	eb06 050a 	add.w	r5, r6, sl
 800a610:	462a      	mov	r2, r5
 800a612:	4616      	mov	r6, r2
 800a614:	3201      	adds	r2, #1
 800a616:	7830      	ldrb	r0, [r6, #0]
 800a618:	f7ff ff8b 	bl	800a532 <__hexdig_fun>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d1f8      	bne.n	800a612 <__gethex+0xb6>
 800a620:	1bad      	subs	r5, r5, r6
 800a622:	00ad      	lsls	r5, r5, #2
 800a624:	e004      	b.n	800a630 <__gethex+0xd4>
 800a626:	2400      	movs	r4, #0
 800a628:	4625      	mov	r5, r4
 800a62a:	e7e0      	b.n	800a5ee <__gethex+0x92>
 800a62c:	2d00      	cmp	r5, #0
 800a62e:	d1f7      	bne.n	800a620 <__gethex+0xc4>
 800a630:	7833      	ldrb	r3, [r6, #0]
 800a632:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a636:	2b50      	cmp	r3, #80	; 0x50
 800a638:	d13b      	bne.n	800a6b2 <__gethex+0x156>
 800a63a:	7873      	ldrb	r3, [r6, #1]
 800a63c:	2b2b      	cmp	r3, #43	; 0x2b
 800a63e:	d02c      	beq.n	800a69a <__gethex+0x13e>
 800a640:	2b2d      	cmp	r3, #45	; 0x2d
 800a642:	d02e      	beq.n	800a6a2 <__gethex+0x146>
 800a644:	1c71      	adds	r1, r6, #1
 800a646:	f04f 0900 	mov.w	r9, #0
 800a64a:	7808      	ldrb	r0, [r1, #0]
 800a64c:	f7ff ff71 	bl	800a532 <__hexdig_fun>
 800a650:	1e43      	subs	r3, r0, #1
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b18      	cmp	r3, #24
 800a656:	d82c      	bhi.n	800a6b2 <__gethex+0x156>
 800a658:	f1a0 0210 	sub.w	r2, r0, #16
 800a65c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a660:	f7ff ff67 	bl	800a532 <__hexdig_fun>
 800a664:	1e43      	subs	r3, r0, #1
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b18      	cmp	r3, #24
 800a66a:	d91d      	bls.n	800a6a8 <__gethex+0x14c>
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	d000      	beq.n	800a674 <__gethex+0x118>
 800a672:	4252      	negs	r2, r2
 800a674:	4415      	add	r5, r2
 800a676:	f8cb 1000 	str.w	r1, [fp]
 800a67a:	b1e4      	cbz	r4, 800a6b6 <__gethex+0x15a>
 800a67c:	9b00      	ldr	r3, [sp, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bf14      	ite	ne
 800a682:	2700      	movne	r7, #0
 800a684:	2706      	moveq	r7, #6
 800a686:	4638      	mov	r0, r7
 800a688:	b009      	add	sp, #36	; 0x24
 800a68a:	ecbd 8b02 	vpop	{d8}
 800a68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a692:	463e      	mov	r6, r7
 800a694:	4625      	mov	r5, r4
 800a696:	2401      	movs	r4, #1
 800a698:	e7ca      	b.n	800a630 <__gethex+0xd4>
 800a69a:	f04f 0900 	mov.w	r9, #0
 800a69e:	1cb1      	adds	r1, r6, #2
 800a6a0:	e7d3      	b.n	800a64a <__gethex+0xee>
 800a6a2:	f04f 0901 	mov.w	r9, #1
 800a6a6:	e7fa      	b.n	800a69e <__gethex+0x142>
 800a6a8:	230a      	movs	r3, #10
 800a6aa:	fb03 0202 	mla	r2, r3, r2, r0
 800a6ae:	3a10      	subs	r2, #16
 800a6b0:	e7d4      	b.n	800a65c <__gethex+0x100>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	e7df      	b.n	800a676 <__gethex+0x11a>
 800a6b6:	1bf3      	subs	r3, r6, r7
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	2b07      	cmp	r3, #7
 800a6be:	dc0b      	bgt.n	800a6d8 <__gethex+0x17c>
 800a6c0:	ee18 0a10 	vmov	r0, s16
 800a6c4:	f000 faf8 	bl	800acb8 <_Balloc>
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	b940      	cbnz	r0, 800a6de <__gethex+0x182>
 800a6cc:	4b65      	ldr	r3, [pc, #404]	; (800a864 <__gethex+0x308>)
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	21de      	movs	r1, #222	; 0xde
 800a6d2:	4865      	ldr	r0, [pc, #404]	; (800a868 <__gethex+0x30c>)
 800a6d4:	f001 ff76 	bl	800c5c4 <__assert_func>
 800a6d8:	3101      	adds	r1, #1
 800a6da:	105b      	asrs	r3, r3, #1
 800a6dc:	e7ee      	b.n	800a6bc <__gethex+0x160>
 800a6de:	f100 0914 	add.w	r9, r0, #20
 800a6e2:	f04f 0b00 	mov.w	fp, #0
 800a6e6:	f1ca 0301 	rsb	r3, sl, #1
 800a6ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6ee:	f8cd b000 	str.w	fp, [sp]
 800a6f2:	9306      	str	r3, [sp, #24]
 800a6f4:	42b7      	cmp	r7, r6
 800a6f6:	d340      	bcc.n	800a77a <__gethex+0x21e>
 800a6f8:	9802      	ldr	r0, [sp, #8]
 800a6fa:	9b00      	ldr	r3, [sp, #0]
 800a6fc:	f840 3b04 	str.w	r3, [r0], #4
 800a700:	eba0 0009 	sub.w	r0, r0, r9
 800a704:	1080      	asrs	r0, r0, #2
 800a706:	0146      	lsls	r6, r0, #5
 800a708:	6120      	str	r0, [r4, #16]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fbca 	bl	800aea4 <__hi0bits>
 800a710:	1a30      	subs	r0, r6, r0
 800a712:	f8d8 6000 	ldr.w	r6, [r8]
 800a716:	42b0      	cmp	r0, r6
 800a718:	dd63      	ble.n	800a7e2 <__gethex+0x286>
 800a71a:	1b87      	subs	r7, r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 ff64 	bl	800b5ec <__any_on>
 800a724:	4682      	mov	sl, r0
 800a726:	b1a8      	cbz	r0, 800a754 <__gethex+0x1f8>
 800a728:	1e7b      	subs	r3, r7, #1
 800a72a:	1159      	asrs	r1, r3, #5
 800a72c:	f003 021f 	and.w	r2, r3, #31
 800a730:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a734:	f04f 0a01 	mov.w	sl, #1
 800a738:	fa0a f202 	lsl.w	r2, sl, r2
 800a73c:	420a      	tst	r2, r1
 800a73e:	d009      	beq.n	800a754 <__gethex+0x1f8>
 800a740:	4553      	cmp	r3, sl
 800a742:	dd05      	ble.n	800a750 <__gethex+0x1f4>
 800a744:	1eb9      	subs	r1, r7, #2
 800a746:	4620      	mov	r0, r4
 800a748:	f000 ff50 	bl	800b5ec <__any_on>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d145      	bne.n	800a7dc <__gethex+0x280>
 800a750:	f04f 0a02 	mov.w	sl, #2
 800a754:	4639      	mov	r1, r7
 800a756:	4620      	mov	r0, r4
 800a758:	f7ff fe99 	bl	800a48e <rshift>
 800a75c:	443d      	add	r5, r7
 800a75e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a762:	42ab      	cmp	r3, r5
 800a764:	da4c      	bge.n	800a800 <__gethex+0x2a4>
 800a766:	ee18 0a10 	vmov	r0, s16
 800a76a:	4621      	mov	r1, r4
 800a76c:	f000 fae4 	bl	800ad38 <_Bfree>
 800a770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a772:	2300      	movs	r3, #0
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	27a3      	movs	r7, #163	; 0xa3
 800a778:	e785      	b.n	800a686 <__gethex+0x12a>
 800a77a:	1e73      	subs	r3, r6, #1
 800a77c:	9a05      	ldr	r2, [sp, #20]
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a784:	4293      	cmp	r3, r2
 800a786:	d019      	beq.n	800a7bc <__gethex+0x260>
 800a788:	f1bb 0f20 	cmp.w	fp, #32
 800a78c:	d107      	bne.n	800a79e <__gethex+0x242>
 800a78e:	9b02      	ldr	r3, [sp, #8]
 800a790:	9a00      	ldr	r2, [sp, #0]
 800a792:	f843 2b04 	str.w	r2, [r3], #4
 800a796:	9302      	str	r3, [sp, #8]
 800a798:	2300      	movs	r3, #0
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	469b      	mov	fp, r3
 800a79e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a7a2:	f7ff fec6 	bl	800a532 <__hexdig_fun>
 800a7a6:	9b00      	ldr	r3, [sp, #0]
 800a7a8:	f000 000f 	and.w	r0, r0, #15
 800a7ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800a7b0:	4303      	orrs	r3, r0
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	f10b 0b04 	add.w	fp, fp, #4
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	e00d      	b.n	800a7d8 <__gethex+0x27c>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	9a06      	ldr	r2, [sp, #24]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	42bb      	cmp	r3, r7
 800a7c4:	d3e0      	bcc.n	800a788 <__gethex+0x22c>
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	9901      	ldr	r1, [sp, #4]
 800a7ca:	9307      	str	r3, [sp, #28]
 800a7cc:	4652      	mov	r2, sl
 800a7ce:	f001 fe21 	bl	800c414 <strncmp>
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d1d7      	bne.n	800a788 <__gethex+0x22c>
 800a7d8:	461e      	mov	r6, r3
 800a7da:	e78b      	b.n	800a6f4 <__gethex+0x198>
 800a7dc:	f04f 0a03 	mov.w	sl, #3
 800a7e0:	e7b8      	b.n	800a754 <__gethex+0x1f8>
 800a7e2:	da0a      	bge.n	800a7fa <__gethex+0x29e>
 800a7e4:	1a37      	subs	r7, r6, r0
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	ee18 0a10 	vmov	r0, s16
 800a7ec:	463a      	mov	r2, r7
 800a7ee:	f000 fcbf 	bl	800b170 <__lshift>
 800a7f2:	1bed      	subs	r5, r5, r7
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	f100 0914 	add.w	r9, r0, #20
 800a7fa:	f04f 0a00 	mov.w	sl, #0
 800a7fe:	e7ae      	b.n	800a75e <__gethex+0x202>
 800a800:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a804:	42a8      	cmp	r0, r5
 800a806:	dd72      	ble.n	800a8ee <__gethex+0x392>
 800a808:	1b45      	subs	r5, r0, r5
 800a80a:	42ae      	cmp	r6, r5
 800a80c:	dc36      	bgt.n	800a87c <__gethex+0x320>
 800a80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d02a      	beq.n	800a86c <__gethex+0x310>
 800a816:	2b03      	cmp	r3, #3
 800a818:	d02c      	beq.n	800a874 <__gethex+0x318>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d115      	bne.n	800a84a <__gethex+0x2ee>
 800a81e:	42ae      	cmp	r6, r5
 800a820:	d113      	bne.n	800a84a <__gethex+0x2ee>
 800a822:	2e01      	cmp	r6, #1
 800a824:	d10b      	bne.n	800a83e <__gethex+0x2e2>
 800a826:	9a04      	ldr	r2, [sp, #16]
 800a828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	2301      	movs	r3, #1
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	f8c9 3000 	str.w	r3, [r9]
 800a836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a838:	2762      	movs	r7, #98	; 0x62
 800a83a:	601c      	str	r4, [r3, #0]
 800a83c:	e723      	b.n	800a686 <__gethex+0x12a>
 800a83e:	1e71      	subs	r1, r6, #1
 800a840:	4620      	mov	r0, r4
 800a842:	f000 fed3 	bl	800b5ec <__any_on>
 800a846:	2800      	cmp	r0, #0
 800a848:	d1ed      	bne.n	800a826 <__gethex+0x2ca>
 800a84a:	ee18 0a10 	vmov	r0, s16
 800a84e:	4621      	mov	r1, r4
 800a850:	f000 fa72 	bl	800ad38 <_Bfree>
 800a854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a856:	2300      	movs	r3, #0
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	2750      	movs	r7, #80	; 0x50
 800a85c:	e713      	b.n	800a686 <__gethex+0x12a>
 800a85e:	bf00      	nop
 800a860:	0800e4bc 	.word	0x0800e4bc
 800a864:	0800e3dc 	.word	0x0800e3dc
 800a868:	0800e450 	.word	0x0800e450
 800a86c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1eb      	bne.n	800a84a <__gethex+0x2ee>
 800a872:	e7d8      	b.n	800a826 <__gethex+0x2ca>
 800a874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1d5      	bne.n	800a826 <__gethex+0x2ca>
 800a87a:	e7e6      	b.n	800a84a <__gethex+0x2ee>
 800a87c:	1e6f      	subs	r7, r5, #1
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	d131      	bne.n	800a8e8 <__gethex+0x38c>
 800a884:	b127      	cbz	r7, 800a890 <__gethex+0x334>
 800a886:	4639      	mov	r1, r7
 800a888:	4620      	mov	r0, r4
 800a88a:	f000 feaf 	bl	800b5ec <__any_on>
 800a88e:	4682      	mov	sl, r0
 800a890:	117b      	asrs	r3, r7, #5
 800a892:	2101      	movs	r1, #1
 800a894:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a898:	f007 071f 	and.w	r7, r7, #31
 800a89c:	fa01 f707 	lsl.w	r7, r1, r7
 800a8a0:	421f      	tst	r7, r3
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	bf18      	it	ne
 800a8a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a8ac:	1b76      	subs	r6, r6, r5
 800a8ae:	f7ff fdee 	bl	800a48e <rshift>
 800a8b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8b6:	2702      	movs	r7, #2
 800a8b8:	f1ba 0f00 	cmp.w	sl, #0
 800a8bc:	d048      	beq.n	800a950 <__gethex+0x3f4>
 800a8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d015      	beq.n	800a8f2 <__gethex+0x396>
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d017      	beq.n	800a8fa <__gethex+0x39e>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d109      	bne.n	800a8e2 <__gethex+0x386>
 800a8ce:	f01a 0f02 	tst.w	sl, #2
 800a8d2:	d006      	beq.n	800a8e2 <__gethex+0x386>
 800a8d4:	f8d9 0000 	ldr.w	r0, [r9]
 800a8d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a8dc:	f01a 0f01 	tst.w	sl, #1
 800a8e0:	d10e      	bne.n	800a900 <__gethex+0x3a4>
 800a8e2:	f047 0710 	orr.w	r7, r7, #16
 800a8e6:	e033      	b.n	800a950 <__gethex+0x3f4>
 800a8e8:	f04f 0a01 	mov.w	sl, #1
 800a8ec:	e7d0      	b.n	800a890 <__gethex+0x334>
 800a8ee:	2701      	movs	r7, #1
 800a8f0:	e7e2      	b.n	800a8b8 <__gethex+0x35c>
 800a8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8f4:	f1c3 0301 	rsb	r3, r3, #1
 800a8f8:	9315      	str	r3, [sp, #84]	; 0x54
 800a8fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0f0      	beq.n	800a8e2 <__gethex+0x386>
 800a900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a904:	f104 0314 	add.w	r3, r4, #20
 800a908:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a90c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a910:	f04f 0c00 	mov.w	ip, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a91e:	d01c      	beq.n	800a95a <__gethex+0x3fe>
 800a920:	3201      	adds	r2, #1
 800a922:	6002      	str	r2, [r0, #0]
 800a924:	2f02      	cmp	r7, #2
 800a926:	f104 0314 	add.w	r3, r4, #20
 800a92a:	d13f      	bne.n	800a9ac <__gethex+0x450>
 800a92c:	f8d8 2000 	ldr.w	r2, [r8]
 800a930:	3a01      	subs	r2, #1
 800a932:	42b2      	cmp	r2, r6
 800a934:	d10a      	bne.n	800a94c <__gethex+0x3f0>
 800a936:	1171      	asrs	r1, r6, #5
 800a938:	2201      	movs	r2, #1
 800a93a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a93e:	f006 061f 	and.w	r6, r6, #31
 800a942:	fa02 f606 	lsl.w	r6, r2, r6
 800a946:	421e      	tst	r6, r3
 800a948:	bf18      	it	ne
 800a94a:	4617      	movne	r7, r2
 800a94c:	f047 0720 	orr.w	r7, r7, #32
 800a950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a952:	601c      	str	r4, [r3, #0]
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	601d      	str	r5, [r3, #0]
 800a958:	e695      	b.n	800a686 <__gethex+0x12a>
 800a95a:	4299      	cmp	r1, r3
 800a95c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a960:	d8d8      	bhi.n	800a914 <__gethex+0x3b8>
 800a962:	68a3      	ldr	r3, [r4, #8]
 800a964:	459b      	cmp	fp, r3
 800a966:	db19      	blt.n	800a99c <__gethex+0x440>
 800a968:	6861      	ldr	r1, [r4, #4]
 800a96a:	ee18 0a10 	vmov	r0, s16
 800a96e:	3101      	adds	r1, #1
 800a970:	f000 f9a2 	bl	800acb8 <_Balloc>
 800a974:	4681      	mov	r9, r0
 800a976:	b918      	cbnz	r0, 800a980 <__gethex+0x424>
 800a978:	4b1a      	ldr	r3, [pc, #104]	; (800a9e4 <__gethex+0x488>)
 800a97a:	4602      	mov	r2, r0
 800a97c:	2184      	movs	r1, #132	; 0x84
 800a97e:	e6a8      	b.n	800a6d2 <__gethex+0x176>
 800a980:	6922      	ldr	r2, [r4, #16]
 800a982:	3202      	adds	r2, #2
 800a984:	f104 010c 	add.w	r1, r4, #12
 800a988:	0092      	lsls	r2, r2, #2
 800a98a:	300c      	adds	r0, #12
 800a98c:	f000 f986 	bl	800ac9c <memcpy>
 800a990:	4621      	mov	r1, r4
 800a992:	ee18 0a10 	vmov	r0, s16
 800a996:	f000 f9cf 	bl	800ad38 <_Bfree>
 800a99a:	464c      	mov	r4, r9
 800a99c:	6923      	ldr	r3, [r4, #16]
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9a4:	6122      	str	r2, [r4, #16]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	615a      	str	r2, [r3, #20]
 800a9aa:	e7bb      	b.n	800a924 <__gethex+0x3c8>
 800a9ac:	6922      	ldr	r2, [r4, #16]
 800a9ae:	455a      	cmp	r2, fp
 800a9b0:	dd0b      	ble.n	800a9ca <__gethex+0x46e>
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7ff fd6a 	bl	800a48e <rshift>
 800a9ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9be:	3501      	adds	r5, #1
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	f6ff aed0 	blt.w	800a766 <__gethex+0x20a>
 800a9c6:	2701      	movs	r7, #1
 800a9c8:	e7c0      	b.n	800a94c <__gethex+0x3f0>
 800a9ca:	f016 061f 	ands.w	r6, r6, #31
 800a9ce:	d0fa      	beq.n	800a9c6 <__gethex+0x46a>
 800a9d0:	449a      	add	sl, r3
 800a9d2:	f1c6 0620 	rsb	r6, r6, #32
 800a9d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a9da:	f000 fa63 	bl	800aea4 <__hi0bits>
 800a9de:	42b0      	cmp	r0, r6
 800a9e0:	dbe7      	blt.n	800a9b2 <__gethex+0x456>
 800a9e2:	e7f0      	b.n	800a9c6 <__gethex+0x46a>
 800a9e4:	0800e3dc 	.word	0x0800e3dc

0800a9e8 <L_shift>:
 800a9e8:	f1c2 0208 	rsb	r2, r2, #8
 800a9ec:	0092      	lsls	r2, r2, #2
 800a9ee:	b570      	push	{r4, r5, r6, lr}
 800a9f0:	f1c2 0620 	rsb	r6, r2, #32
 800a9f4:	6843      	ldr	r3, [r0, #4]
 800a9f6:	6804      	ldr	r4, [r0, #0]
 800a9f8:	fa03 f506 	lsl.w	r5, r3, r6
 800a9fc:	432c      	orrs	r4, r5
 800a9fe:	40d3      	lsrs	r3, r2
 800aa00:	6004      	str	r4, [r0, #0]
 800aa02:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa06:	4288      	cmp	r0, r1
 800aa08:	d3f4      	bcc.n	800a9f4 <L_shift+0xc>
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}

0800aa0c <__match>:
 800aa0c:	b530      	push	{r4, r5, lr}
 800aa0e:	6803      	ldr	r3, [r0, #0]
 800aa10:	3301      	adds	r3, #1
 800aa12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa16:	b914      	cbnz	r4, 800aa1e <__match+0x12>
 800aa18:	6003      	str	r3, [r0, #0]
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	bd30      	pop	{r4, r5, pc}
 800aa1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa26:	2d19      	cmp	r5, #25
 800aa28:	bf98      	it	ls
 800aa2a:	3220      	addls	r2, #32
 800aa2c:	42a2      	cmp	r2, r4
 800aa2e:	d0f0      	beq.n	800aa12 <__match+0x6>
 800aa30:	2000      	movs	r0, #0
 800aa32:	e7f3      	b.n	800aa1c <__match+0x10>

0800aa34 <__hexnan>:
 800aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa38:	680b      	ldr	r3, [r1, #0]
 800aa3a:	6801      	ldr	r1, [r0, #0]
 800aa3c:	115e      	asrs	r6, r3, #5
 800aa3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa42:	f013 031f 	ands.w	r3, r3, #31
 800aa46:	b087      	sub	sp, #28
 800aa48:	bf18      	it	ne
 800aa4a:	3604      	addne	r6, #4
 800aa4c:	2500      	movs	r5, #0
 800aa4e:	1f37      	subs	r7, r6, #4
 800aa50:	4682      	mov	sl, r0
 800aa52:	4690      	mov	r8, r2
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa5a:	46b9      	mov	r9, r7
 800aa5c:	463c      	mov	r4, r7
 800aa5e:	9502      	str	r5, [sp, #8]
 800aa60:	46ab      	mov	fp, r5
 800aa62:	784a      	ldrb	r2, [r1, #1]
 800aa64:	1c4b      	adds	r3, r1, #1
 800aa66:	9303      	str	r3, [sp, #12]
 800aa68:	b342      	cbz	r2, 800aabc <__hexnan+0x88>
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	9105      	str	r1, [sp, #20]
 800aa6e:	9204      	str	r2, [sp, #16]
 800aa70:	f7ff fd5f 	bl	800a532 <__hexdig_fun>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d14f      	bne.n	800ab18 <__hexnan+0xe4>
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	9905      	ldr	r1, [sp, #20]
 800aa7c:	2a20      	cmp	r2, #32
 800aa7e:	d818      	bhi.n	800aab2 <__hexnan+0x7e>
 800aa80:	9b02      	ldr	r3, [sp, #8]
 800aa82:	459b      	cmp	fp, r3
 800aa84:	dd13      	ble.n	800aaae <__hexnan+0x7a>
 800aa86:	454c      	cmp	r4, r9
 800aa88:	d206      	bcs.n	800aa98 <__hexnan+0x64>
 800aa8a:	2d07      	cmp	r5, #7
 800aa8c:	dc04      	bgt.n	800aa98 <__hexnan+0x64>
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4649      	mov	r1, r9
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff ffa8 	bl	800a9e8 <L_shift>
 800aa98:	4544      	cmp	r4, r8
 800aa9a:	d950      	bls.n	800ab3e <__hexnan+0x10a>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f1a4 0904 	sub.w	r9, r4, #4
 800aaa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaa6:	f8cd b008 	str.w	fp, [sp, #8]
 800aaaa:	464c      	mov	r4, r9
 800aaac:	461d      	mov	r5, r3
 800aaae:	9903      	ldr	r1, [sp, #12]
 800aab0:	e7d7      	b.n	800aa62 <__hexnan+0x2e>
 800aab2:	2a29      	cmp	r2, #41	; 0x29
 800aab4:	d156      	bne.n	800ab64 <__hexnan+0x130>
 800aab6:	3102      	adds	r1, #2
 800aab8:	f8ca 1000 	str.w	r1, [sl]
 800aabc:	f1bb 0f00 	cmp.w	fp, #0
 800aac0:	d050      	beq.n	800ab64 <__hexnan+0x130>
 800aac2:	454c      	cmp	r4, r9
 800aac4:	d206      	bcs.n	800aad4 <__hexnan+0xa0>
 800aac6:	2d07      	cmp	r5, #7
 800aac8:	dc04      	bgt.n	800aad4 <__hexnan+0xa0>
 800aaca:	462a      	mov	r2, r5
 800aacc:	4649      	mov	r1, r9
 800aace:	4620      	mov	r0, r4
 800aad0:	f7ff ff8a 	bl	800a9e8 <L_shift>
 800aad4:	4544      	cmp	r4, r8
 800aad6:	d934      	bls.n	800ab42 <__hexnan+0x10e>
 800aad8:	f1a8 0204 	sub.w	r2, r8, #4
 800aadc:	4623      	mov	r3, r4
 800aade:	f853 1b04 	ldr.w	r1, [r3], #4
 800aae2:	f842 1f04 	str.w	r1, [r2, #4]!
 800aae6:	429f      	cmp	r7, r3
 800aae8:	d2f9      	bcs.n	800aade <__hexnan+0xaa>
 800aaea:	1b3b      	subs	r3, r7, r4
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	3401      	adds	r4, #1
 800aaf4:	3e03      	subs	r6, #3
 800aaf6:	42b4      	cmp	r4, r6
 800aaf8:	bf88      	it	hi
 800aafa:	2304      	movhi	r3, #4
 800aafc:	4443      	add	r3, r8
 800aafe:	2200      	movs	r2, #0
 800ab00:	f843 2b04 	str.w	r2, [r3], #4
 800ab04:	429f      	cmp	r7, r3
 800ab06:	d2fb      	bcs.n	800ab00 <__hexnan+0xcc>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	b91b      	cbnz	r3, 800ab14 <__hexnan+0xe0>
 800ab0c:	4547      	cmp	r7, r8
 800ab0e:	d127      	bne.n	800ab60 <__hexnan+0x12c>
 800ab10:	2301      	movs	r3, #1
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	2005      	movs	r0, #5
 800ab16:	e026      	b.n	800ab66 <__hexnan+0x132>
 800ab18:	3501      	adds	r5, #1
 800ab1a:	2d08      	cmp	r5, #8
 800ab1c:	f10b 0b01 	add.w	fp, fp, #1
 800ab20:	dd06      	ble.n	800ab30 <__hexnan+0xfc>
 800ab22:	4544      	cmp	r4, r8
 800ab24:	d9c3      	bls.n	800aaae <__hexnan+0x7a>
 800ab26:	2300      	movs	r3, #0
 800ab28:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab2c:	2501      	movs	r5, #1
 800ab2e:	3c04      	subs	r4, #4
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	f000 000f 	and.w	r0, r0, #15
 800ab36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ab3a:	6022      	str	r2, [r4, #0]
 800ab3c:	e7b7      	b.n	800aaae <__hexnan+0x7a>
 800ab3e:	2508      	movs	r5, #8
 800ab40:	e7b5      	b.n	800aaae <__hexnan+0x7a>
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0df      	beq.n	800ab08 <__hexnan+0xd4>
 800ab48:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4c:	f1c3 0320 	rsb	r3, r3, #32
 800ab50:	fa22 f303 	lsr.w	r3, r2, r3
 800ab54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab58:	401a      	ands	r2, r3
 800ab5a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ab5e:	e7d3      	b.n	800ab08 <__hexnan+0xd4>
 800ab60:	3f04      	subs	r7, #4
 800ab62:	e7d1      	b.n	800ab08 <__hexnan+0xd4>
 800ab64:	2004      	movs	r0, #4
 800ab66:	b007      	add	sp, #28
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab6c <_localeconv_r>:
 800ab6c:	4800      	ldr	r0, [pc, #0]	; (800ab70 <_localeconv_r+0x4>)
 800ab6e:	4770      	bx	lr
 800ab70:	2000021c 	.word	0x2000021c

0800ab74 <__retarget_lock_init_recursive>:
 800ab74:	4770      	bx	lr

0800ab76 <__retarget_lock_acquire_recursive>:
 800ab76:	4770      	bx	lr

0800ab78 <__retarget_lock_release_recursive>:
 800ab78:	4770      	bx	lr
	...

0800ab7c <_lseek_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	; (800ab9c <_lseek_r+0x20>)
 800ab80:	4604      	mov	r4, r0
 800ab82:	4608      	mov	r0, r1
 800ab84:	4611      	mov	r1, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	602a      	str	r2, [r5, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f7f7 f894 	bl	8001cb8 <_lseek>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_lseek_r+0x1e>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_lseek_r+0x1e>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	200017d0 	.word	0x200017d0

0800aba0 <__swhatbuf_r>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	460e      	mov	r6, r1
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	2900      	cmp	r1, #0
 800abaa:	b096      	sub	sp, #88	; 0x58
 800abac:	4614      	mov	r4, r2
 800abae:	461d      	mov	r5, r3
 800abb0:	da07      	bge.n	800abc2 <__swhatbuf_r+0x22>
 800abb2:	2300      	movs	r3, #0
 800abb4:	602b      	str	r3, [r5, #0]
 800abb6:	89b3      	ldrh	r3, [r6, #12]
 800abb8:	061a      	lsls	r2, r3, #24
 800abba:	d410      	bmi.n	800abde <__swhatbuf_r+0x3e>
 800abbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abc0:	e00e      	b.n	800abe0 <__swhatbuf_r+0x40>
 800abc2:	466a      	mov	r2, sp
 800abc4:	f001 fd2e 	bl	800c624 <_fstat_r>
 800abc8:	2800      	cmp	r0, #0
 800abca:	dbf2      	blt.n	800abb2 <__swhatbuf_r+0x12>
 800abcc:	9a01      	ldr	r2, [sp, #4]
 800abce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abd6:	425a      	negs	r2, r3
 800abd8:	415a      	adcs	r2, r3
 800abda:	602a      	str	r2, [r5, #0]
 800abdc:	e7ee      	b.n	800abbc <__swhatbuf_r+0x1c>
 800abde:	2340      	movs	r3, #64	; 0x40
 800abe0:	2000      	movs	r0, #0
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	b016      	add	sp, #88	; 0x58
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <__smakebuf_r>:
 800abe8:	898b      	ldrh	r3, [r1, #12]
 800abea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abec:	079d      	lsls	r5, r3, #30
 800abee:	4606      	mov	r6, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	d507      	bpl.n	800ac04 <__smakebuf_r+0x1c>
 800abf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	6123      	str	r3, [r4, #16]
 800abfc:	2301      	movs	r3, #1
 800abfe:	6163      	str	r3, [r4, #20]
 800ac00:	b002      	add	sp, #8
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	ab01      	add	r3, sp, #4
 800ac06:	466a      	mov	r2, sp
 800ac08:	f7ff ffca 	bl	800aba0 <__swhatbuf_r>
 800ac0c:	9900      	ldr	r1, [sp, #0]
 800ac0e:	4605      	mov	r5, r0
 800ac10:	4630      	mov	r0, r6
 800ac12:	f000 fd6b 	bl	800b6ec <_malloc_r>
 800ac16:	b948      	cbnz	r0, 800ac2c <__smakebuf_r+0x44>
 800ac18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac1c:	059a      	lsls	r2, r3, #22
 800ac1e:	d4ef      	bmi.n	800ac00 <__smakebuf_r+0x18>
 800ac20:	f023 0303 	bic.w	r3, r3, #3
 800ac24:	f043 0302 	orr.w	r3, r3, #2
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	e7e3      	b.n	800abf4 <__smakebuf_r+0xc>
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <__smakebuf_r+0x7c>)
 800ac2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	6020      	str	r0, [r4, #0]
 800ac34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac38:	81a3      	strh	r3, [r4, #12]
 800ac3a:	9b00      	ldr	r3, [sp, #0]
 800ac3c:	6163      	str	r3, [r4, #20]
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	6120      	str	r0, [r4, #16]
 800ac42:	b15b      	cbz	r3, 800ac5c <__smakebuf_r+0x74>
 800ac44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f001 fcfd 	bl	800c648 <_isatty_r>
 800ac4e:	b128      	cbz	r0, 800ac5c <__smakebuf_r+0x74>
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	f023 0303 	bic.w	r3, r3, #3
 800ac56:	f043 0301 	orr.w	r3, r3, #1
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	89a0      	ldrh	r0, [r4, #12]
 800ac5e:	4305      	orrs	r5, r0
 800ac60:	81a5      	strh	r5, [r4, #12]
 800ac62:	e7cd      	b.n	800ac00 <__smakebuf_r+0x18>
 800ac64:	0800a2ed 	.word	0x0800a2ed

0800ac68 <malloc>:
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <malloc+0xc>)
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f000 bd3d 	b.w	800b6ec <_malloc_r>
 800ac72:	bf00      	nop
 800ac74:	200000c4 	.word	0x200000c4

0800ac78 <__ascii_mbtowc>:
 800ac78:	b082      	sub	sp, #8
 800ac7a:	b901      	cbnz	r1, 800ac7e <__ascii_mbtowc+0x6>
 800ac7c:	a901      	add	r1, sp, #4
 800ac7e:	b142      	cbz	r2, 800ac92 <__ascii_mbtowc+0x1a>
 800ac80:	b14b      	cbz	r3, 800ac96 <__ascii_mbtowc+0x1e>
 800ac82:	7813      	ldrb	r3, [r2, #0]
 800ac84:	600b      	str	r3, [r1, #0]
 800ac86:	7812      	ldrb	r2, [r2, #0]
 800ac88:	1e10      	subs	r0, r2, #0
 800ac8a:	bf18      	it	ne
 800ac8c:	2001      	movne	r0, #1
 800ac8e:	b002      	add	sp, #8
 800ac90:	4770      	bx	lr
 800ac92:	4610      	mov	r0, r2
 800ac94:	e7fb      	b.n	800ac8e <__ascii_mbtowc+0x16>
 800ac96:	f06f 0001 	mvn.w	r0, #1
 800ac9a:	e7f8      	b.n	800ac8e <__ascii_mbtowc+0x16>

0800ac9c <memcpy>:
 800ac9c:	440a      	add	r2, r1
 800ac9e:	4291      	cmp	r1, r2
 800aca0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aca4:	d100      	bne.n	800aca8 <memcpy+0xc>
 800aca6:	4770      	bx	lr
 800aca8:	b510      	push	{r4, lr}
 800acaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acb2:	4291      	cmp	r1, r2
 800acb4:	d1f9      	bne.n	800acaa <memcpy+0xe>
 800acb6:	bd10      	pop	{r4, pc}

0800acb8 <_Balloc>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acbc:	4604      	mov	r4, r0
 800acbe:	460d      	mov	r5, r1
 800acc0:	b976      	cbnz	r6, 800ace0 <_Balloc+0x28>
 800acc2:	2010      	movs	r0, #16
 800acc4:	f7ff ffd0 	bl	800ac68 <malloc>
 800acc8:	4602      	mov	r2, r0
 800acca:	6260      	str	r0, [r4, #36]	; 0x24
 800accc:	b920      	cbnz	r0, 800acd8 <_Balloc+0x20>
 800acce:	4b18      	ldr	r3, [pc, #96]	; (800ad30 <_Balloc+0x78>)
 800acd0:	4818      	ldr	r0, [pc, #96]	; (800ad34 <_Balloc+0x7c>)
 800acd2:	2166      	movs	r1, #102	; 0x66
 800acd4:	f001 fc76 	bl	800c5c4 <__assert_func>
 800acd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acdc:	6006      	str	r6, [r0, #0]
 800acde:	60c6      	str	r6, [r0, #12]
 800ace0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ace2:	68f3      	ldr	r3, [r6, #12]
 800ace4:	b183      	cbz	r3, 800ad08 <_Balloc+0x50>
 800ace6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acee:	b9b8      	cbnz	r0, 800ad20 <_Balloc+0x68>
 800acf0:	2101      	movs	r1, #1
 800acf2:	fa01 f605 	lsl.w	r6, r1, r5
 800acf6:	1d72      	adds	r2, r6, #5
 800acf8:	0092      	lsls	r2, r2, #2
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 fc97 	bl	800b62e <_calloc_r>
 800ad00:	b160      	cbz	r0, 800ad1c <_Balloc+0x64>
 800ad02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad06:	e00e      	b.n	800ad26 <_Balloc+0x6e>
 800ad08:	2221      	movs	r2, #33	; 0x21
 800ad0a:	2104      	movs	r1, #4
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fc8e 	bl	800b62e <_calloc_r>
 800ad12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad14:	60f0      	str	r0, [r6, #12]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e4      	bne.n	800ace6 <_Balloc+0x2e>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	6802      	ldr	r2, [r0, #0]
 800ad22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad26:	2300      	movs	r3, #0
 800ad28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad2c:	e7f7      	b.n	800ad1e <_Balloc+0x66>
 800ad2e:	bf00      	nop
 800ad30:	0800e366 	.word	0x0800e366
 800ad34:	0800e4d0 	.word	0x0800e4d0

0800ad38 <_Bfree>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	b976      	cbnz	r6, 800ad60 <_Bfree+0x28>
 800ad42:	2010      	movs	r0, #16
 800ad44:	f7ff ff90 	bl	800ac68 <malloc>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	6268      	str	r0, [r5, #36]	; 0x24
 800ad4c:	b920      	cbnz	r0, 800ad58 <_Bfree+0x20>
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <_Bfree+0x3c>)
 800ad50:	4809      	ldr	r0, [pc, #36]	; (800ad78 <_Bfree+0x40>)
 800ad52:	218a      	movs	r1, #138	; 0x8a
 800ad54:	f001 fc36 	bl	800c5c4 <__assert_func>
 800ad58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad5c:	6006      	str	r6, [r0, #0]
 800ad5e:	60c6      	str	r6, [r0, #12]
 800ad60:	b13c      	cbz	r4, 800ad72 <_Bfree+0x3a>
 800ad62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad64:	6862      	ldr	r2, [r4, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad6c:	6021      	str	r1, [r4, #0]
 800ad6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	0800e366 	.word	0x0800e366
 800ad78:	0800e4d0 	.word	0x0800e4d0

0800ad7c <__multadd>:
 800ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	690e      	ldr	r6, [r1, #16]
 800ad82:	4607      	mov	r7, r0
 800ad84:	4698      	mov	r8, r3
 800ad86:	460c      	mov	r4, r1
 800ad88:	f101 0014 	add.w	r0, r1, #20
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	6805      	ldr	r5, [r0, #0]
 800ad90:	b2a9      	uxth	r1, r5
 800ad92:	fb02 8101 	mla	r1, r2, r1, r8
 800ad96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ad9a:	0c2d      	lsrs	r5, r5, #16
 800ad9c:	fb02 c505 	mla	r5, r2, r5, ip
 800ada0:	b289      	uxth	r1, r1
 800ada2:	3301      	adds	r3, #1
 800ada4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ada8:	429e      	cmp	r6, r3
 800adaa:	f840 1b04 	str.w	r1, [r0], #4
 800adae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800adb2:	dcec      	bgt.n	800ad8e <__multadd+0x12>
 800adb4:	f1b8 0f00 	cmp.w	r8, #0
 800adb8:	d022      	beq.n	800ae00 <__multadd+0x84>
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	42b3      	cmp	r3, r6
 800adbe:	dc19      	bgt.n	800adf4 <__multadd+0x78>
 800adc0:	6861      	ldr	r1, [r4, #4]
 800adc2:	4638      	mov	r0, r7
 800adc4:	3101      	adds	r1, #1
 800adc6:	f7ff ff77 	bl	800acb8 <_Balloc>
 800adca:	4605      	mov	r5, r0
 800adcc:	b928      	cbnz	r0, 800adda <__multadd+0x5e>
 800adce:	4602      	mov	r2, r0
 800add0:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <__multadd+0x8c>)
 800add2:	480e      	ldr	r0, [pc, #56]	; (800ae0c <__multadd+0x90>)
 800add4:	21b5      	movs	r1, #181	; 0xb5
 800add6:	f001 fbf5 	bl	800c5c4 <__assert_func>
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	3202      	adds	r2, #2
 800adde:	f104 010c 	add.w	r1, r4, #12
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	300c      	adds	r0, #12
 800ade6:	f7ff ff59 	bl	800ac9c <memcpy>
 800adea:	4621      	mov	r1, r4
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff ffa3 	bl	800ad38 <_Bfree>
 800adf2:	462c      	mov	r4, r5
 800adf4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800adf8:	3601      	adds	r6, #1
 800adfa:	f8c3 8014 	str.w	r8, [r3, #20]
 800adfe:	6126      	str	r6, [r4, #16]
 800ae00:	4620      	mov	r0, r4
 800ae02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae06:	bf00      	nop
 800ae08:	0800e3dc 	.word	0x0800e3dc
 800ae0c:	0800e4d0 	.word	0x0800e4d0

0800ae10 <__s2b>:
 800ae10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae14:	460c      	mov	r4, r1
 800ae16:	4615      	mov	r5, r2
 800ae18:	461f      	mov	r7, r3
 800ae1a:	2209      	movs	r2, #9
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	4606      	mov	r6, r0
 800ae20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae24:	2100      	movs	r1, #0
 800ae26:	2201      	movs	r2, #1
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	db09      	blt.n	800ae40 <__s2b+0x30>
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff ff43 	bl	800acb8 <_Balloc>
 800ae32:	b940      	cbnz	r0, 800ae46 <__s2b+0x36>
 800ae34:	4602      	mov	r2, r0
 800ae36:	4b19      	ldr	r3, [pc, #100]	; (800ae9c <__s2b+0x8c>)
 800ae38:	4819      	ldr	r0, [pc, #100]	; (800aea0 <__s2b+0x90>)
 800ae3a:	21ce      	movs	r1, #206	; 0xce
 800ae3c:	f001 fbc2 	bl	800c5c4 <__assert_func>
 800ae40:	0052      	lsls	r2, r2, #1
 800ae42:	3101      	adds	r1, #1
 800ae44:	e7f0      	b.n	800ae28 <__s2b+0x18>
 800ae46:	9b08      	ldr	r3, [sp, #32]
 800ae48:	6143      	str	r3, [r0, #20]
 800ae4a:	2d09      	cmp	r5, #9
 800ae4c:	f04f 0301 	mov.w	r3, #1
 800ae50:	6103      	str	r3, [r0, #16]
 800ae52:	dd16      	ble.n	800ae82 <__s2b+0x72>
 800ae54:	f104 0909 	add.w	r9, r4, #9
 800ae58:	46c8      	mov	r8, r9
 800ae5a:	442c      	add	r4, r5
 800ae5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae60:	4601      	mov	r1, r0
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	220a      	movs	r2, #10
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ff88 	bl	800ad7c <__multadd>
 800ae6c:	45a0      	cmp	r8, r4
 800ae6e:	d1f5      	bne.n	800ae5c <__s2b+0x4c>
 800ae70:	f1a5 0408 	sub.w	r4, r5, #8
 800ae74:	444c      	add	r4, r9
 800ae76:	1b2d      	subs	r5, r5, r4
 800ae78:	1963      	adds	r3, r4, r5
 800ae7a:	42bb      	cmp	r3, r7
 800ae7c:	db04      	blt.n	800ae88 <__s2b+0x78>
 800ae7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae82:	340a      	adds	r4, #10
 800ae84:	2509      	movs	r5, #9
 800ae86:	e7f6      	b.n	800ae76 <__s2b+0x66>
 800ae88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	3b30      	subs	r3, #48	; 0x30
 800ae90:	220a      	movs	r2, #10
 800ae92:	4630      	mov	r0, r6
 800ae94:	f7ff ff72 	bl	800ad7c <__multadd>
 800ae98:	e7ee      	b.n	800ae78 <__s2b+0x68>
 800ae9a:	bf00      	nop
 800ae9c:	0800e3dc 	.word	0x0800e3dc
 800aea0:	0800e4d0 	.word	0x0800e4d0

0800aea4 <__hi0bits>:
 800aea4:	0c03      	lsrs	r3, r0, #16
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	b9d3      	cbnz	r3, 800aee0 <__hi0bits+0x3c>
 800aeaa:	0400      	lsls	r0, r0, #16
 800aeac:	2310      	movs	r3, #16
 800aeae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aeb2:	bf04      	itt	eq
 800aeb4:	0200      	lsleq	r0, r0, #8
 800aeb6:	3308      	addeq	r3, #8
 800aeb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aebc:	bf04      	itt	eq
 800aebe:	0100      	lsleq	r0, r0, #4
 800aec0:	3304      	addeq	r3, #4
 800aec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aec6:	bf04      	itt	eq
 800aec8:	0080      	lsleq	r0, r0, #2
 800aeca:	3302      	addeq	r3, #2
 800aecc:	2800      	cmp	r0, #0
 800aece:	db05      	blt.n	800aedc <__hi0bits+0x38>
 800aed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aed4:	f103 0301 	add.w	r3, r3, #1
 800aed8:	bf08      	it	eq
 800aeda:	2320      	moveq	r3, #32
 800aedc:	4618      	mov	r0, r3
 800aede:	4770      	bx	lr
 800aee0:	2300      	movs	r3, #0
 800aee2:	e7e4      	b.n	800aeae <__hi0bits+0xa>

0800aee4 <__lo0bits>:
 800aee4:	6803      	ldr	r3, [r0, #0]
 800aee6:	f013 0207 	ands.w	r2, r3, #7
 800aeea:	4601      	mov	r1, r0
 800aeec:	d00b      	beq.n	800af06 <__lo0bits+0x22>
 800aeee:	07da      	lsls	r2, r3, #31
 800aef0:	d424      	bmi.n	800af3c <__lo0bits+0x58>
 800aef2:	0798      	lsls	r0, r3, #30
 800aef4:	bf49      	itett	mi
 800aef6:	085b      	lsrmi	r3, r3, #1
 800aef8:	089b      	lsrpl	r3, r3, #2
 800aefa:	2001      	movmi	r0, #1
 800aefc:	600b      	strmi	r3, [r1, #0]
 800aefe:	bf5c      	itt	pl
 800af00:	600b      	strpl	r3, [r1, #0]
 800af02:	2002      	movpl	r0, #2
 800af04:	4770      	bx	lr
 800af06:	b298      	uxth	r0, r3
 800af08:	b9b0      	cbnz	r0, 800af38 <__lo0bits+0x54>
 800af0a:	0c1b      	lsrs	r3, r3, #16
 800af0c:	2010      	movs	r0, #16
 800af0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af12:	bf04      	itt	eq
 800af14:	0a1b      	lsreq	r3, r3, #8
 800af16:	3008      	addeq	r0, #8
 800af18:	071a      	lsls	r2, r3, #28
 800af1a:	bf04      	itt	eq
 800af1c:	091b      	lsreq	r3, r3, #4
 800af1e:	3004      	addeq	r0, #4
 800af20:	079a      	lsls	r2, r3, #30
 800af22:	bf04      	itt	eq
 800af24:	089b      	lsreq	r3, r3, #2
 800af26:	3002      	addeq	r0, #2
 800af28:	07da      	lsls	r2, r3, #31
 800af2a:	d403      	bmi.n	800af34 <__lo0bits+0x50>
 800af2c:	085b      	lsrs	r3, r3, #1
 800af2e:	f100 0001 	add.w	r0, r0, #1
 800af32:	d005      	beq.n	800af40 <__lo0bits+0x5c>
 800af34:	600b      	str	r3, [r1, #0]
 800af36:	4770      	bx	lr
 800af38:	4610      	mov	r0, r2
 800af3a:	e7e8      	b.n	800af0e <__lo0bits+0x2a>
 800af3c:	2000      	movs	r0, #0
 800af3e:	4770      	bx	lr
 800af40:	2020      	movs	r0, #32
 800af42:	4770      	bx	lr

0800af44 <__i2b>:
 800af44:	b510      	push	{r4, lr}
 800af46:	460c      	mov	r4, r1
 800af48:	2101      	movs	r1, #1
 800af4a:	f7ff feb5 	bl	800acb8 <_Balloc>
 800af4e:	4602      	mov	r2, r0
 800af50:	b928      	cbnz	r0, 800af5e <__i2b+0x1a>
 800af52:	4b05      	ldr	r3, [pc, #20]	; (800af68 <__i2b+0x24>)
 800af54:	4805      	ldr	r0, [pc, #20]	; (800af6c <__i2b+0x28>)
 800af56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af5a:	f001 fb33 	bl	800c5c4 <__assert_func>
 800af5e:	2301      	movs	r3, #1
 800af60:	6144      	str	r4, [r0, #20]
 800af62:	6103      	str	r3, [r0, #16]
 800af64:	bd10      	pop	{r4, pc}
 800af66:	bf00      	nop
 800af68:	0800e3dc 	.word	0x0800e3dc
 800af6c:	0800e4d0 	.word	0x0800e4d0

0800af70 <__multiply>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	4614      	mov	r4, r2
 800af76:	690a      	ldr	r2, [r1, #16]
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	bfb8      	it	lt
 800af7e:	460b      	movlt	r3, r1
 800af80:	460d      	mov	r5, r1
 800af82:	bfbc      	itt	lt
 800af84:	4625      	movlt	r5, r4
 800af86:	461c      	movlt	r4, r3
 800af88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af90:	68ab      	ldr	r3, [r5, #8]
 800af92:	6869      	ldr	r1, [r5, #4]
 800af94:	eb0a 0709 	add.w	r7, sl, r9
 800af98:	42bb      	cmp	r3, r7
 800af9a:	b085      	sub	sp, #20
 800af9c:	bfb8      	it	lt
 800af9e:	3101      	addlt	r1, #1
 800afa0:	f7ff fe8a 	bl	800acb8 <_Balloc>
 800afa4:	b930      	cbnz	r0, 800afb4 <__multiply+0x44>
 800afa6:	4602      	mov	r2, r0
 800afa8:	4b42      	ldr	r3, [pc, #264]	; (800b0b4 <__multiply+0x144>)
 800afaa:	4843      	ldr	r0, [pc, #268]	; (800b0b8 <__multiply+0x148>)
 800afac:	f240 115d 	movw	r1, #349	; 0x15d
 800afb0:	f001 fb08 	bl	800c5c4 <__assert_func>
 800afb4:	f100 0614 	add.w	r6, r0, #20
 800afb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800afbc:	4633      	mov	r3, r6
 800afbe:	2200      	movs	r2, #0
 800afc0:	4543      	cmp	r3, r8
 800afc2:	d31e      	bcc.n	800b002 <__multiply+0x92>
 800afc4:	f105 0c14 	add.w	ip, r5, #20
 800afc8:	f104 0314 	add.w	r3, r4, #20
 800afcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800afd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800afd4:	9202      	str	r2, [sp, #8]
 800afd6:	ebac 0205 	sub.w	r2, ip, r5
 800afda:	3a15      	subs	r2, #21
 800afdc:	f022 0203 	bic.w	r2, r2, #3
 800afe0:	3204      	adds	r2, #4
 800afe2:	f105 0115 	add.w	r1, r5, #21
 800afe6:	458c      	cmp	ip, r1
 800afe8:	bf38      	it	cc
 800afea:	2204      	movcc	r2, #4
 800afec:	9201      	str	r2, [sp, #4]
 800afee:	9a02      	ldr	r2, [sp, #8]
 800aff0:	9303      	str	r3, [sp, #12]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d808      	bhi.n	800b008 <__multiply+0x98>
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	dc55      	bgt.n	800b0a6 <__multiply+0x136>
 800affa:	6107      	str	r7, [r0, #16]
 800affc:	b005      	add	sp, #20
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	f843 2b04 	str.w	r2, [r3], #4
 800b006:	e7db      	b.n	800afc0 <__multiply+0x50>
 800b008:	f8b3 a000 	ldrh.w	sl, [r3]
 800b00c:	f1ba 0f00 	cmp.w	sl, #0
 800b010:	d020      	beq.n	800b054 <__multiply+0xe4>
 800b012:	f105 0e14 	add.w	lr, r5, #20
 800b016:	46b1      	mov	r9, r6
 800b018:	2200      	movs	r2, #0
 800b01a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b01e:	f8d9 b000 	ldr.w	fp, [r9]
 800b022:	b2a1      	uxth	r1, r4
 800b024:	fa1f fb8b 	uxth.w	fp, fp
 800b028:	fb0a b101 	mla	r1, sl, r1, fp
 800b02c:	4411      	add	r1, r2
 800b02e:	f8d9 2000 	ldr.w	r2, [r9]
 800b032:	0c24      	lsrs	r4, r4, #16
 800b034:	0c12      	lsrs	r2, r2, #16
 800b036:	fb0a 2404 	mla	r4, sl, r4, r2
 800b03a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b03e:	b289      	uxth	r1, r1
 800b040:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b044:	45f4      	cmp	ip, lr
 800b046:	f849 1b04 	str.w	r1, [r9], #4
 800b04a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b04e:	d8e4      	bhi.n	800b01a <__multiply+0xaa>
 800b050:	9901      	ldr	r1, [sp, #4]
 800b052:	5072      	str	r2, [r6, r1]
 800b054:	9a03      	ldr	r2, [sp, #12]
 800b056:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b05a:	3304      	adds	r3, #4
 800b05c:	f1b9 0f00 	cmp.w	r9, #0
 800b060:	d01f      	beq.n	800b0a2 <__multiply+0x132>
 800b062:	6834      	ldr	r4, [r6, #0]
 800b064:	f105 0114 	add.w	r1, r5, #20
 800b068:	46b6      	mov	lr, r6
 800b06a:	f04f 0a00 	mov.w	sl, #0
 800b06e:	880a      	ldrh	r2, [r1, #0]
 800b070:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b074:	fb09 b202 	mla	r2, r9, r2, fp
 800b078:	4492      	add	sl, r2
 800b07a:	b2a4      	uxth	r4, r4
 800b07c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b080:	f84e 4b04 	str.w	r4, [lr], #4
 800b084:	f851 4b04 	ldr.w	r4, [r1], #4
 800b088:	f8be 2000 	ldrh.w	r2, [lr]
 800b08c:	0c24      	lsrs	r4, r4, #16
 800b08e:	fb09 2404 	mla	r4, r9, r4, r2
 800b092:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b096:	458c      	cmp	ip, r1
 800b098:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b09c:	d8e7      	bhi.n	800b06e <__multiply+0xfe>
 800b09e:	9a01      	ldr	r2, [sp, #4]
 800b0a0:	50b4      	str	r4, [r6, r2]
 800b0a2:	3604      	adds	r6, #4
 800b0a4:	e7a3      	b.n	800afee <__multiply+0x7e>
 800b0a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1a5      	bne.n	800affa <__multiply+0x8a>
 800b0ae:	3f01      	subs	r7, #1
 800b0b0:	e7a1      	b.n	800aff6 <__multiply+0x86>
 800b0b2:	bf00      	nop
 800b0b4:	0800e3dc 	.word	0x0800e3dc
 800b0b8:	0800e4d0 	.word	0x0800e4d0

0800b0bc <__pow5mult>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4615      	mov	r5, r2
 800b0c2:	f012 0203 	ands.w	r2, r2, #3
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	d007      	beq.n	800b0dc <__pow5mult+0x20>
 800b0cc:	4c25      	ldr	r4, [pc, #148]	; (800b164 <__pow5mult+0xa8>)
 800b0ce:	3a01      	subs	r2, #1
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0d6:	f7ff fe51 	bl	800ad7c <__multadd>
 800b0da:	4607      	mov	r7, r0
 800b0dc:	10ad      	asrs	r5, r5, #2
 800b0de:	d03d      	beq.n	800b15c <__pow5mult+0xa0>
 800b0e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0e2:	b97c      	cbnz	r4, 800b104 <__pow5mult+0x48>
 800b0e4:	2010      	movs	r0, #16
 800b0e6:	f7ff fdbf 	bl	800ac68 <malloc>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ee:	b928      	cbnz	r0, 800b0fc <__pow5mult+0x40>
 800b0f0:	4b1d      	ldr	r3, [pc, #116]	; (800b168 <__pow5mult+0xac>)
 800b0f2:	481e      	ldr	r0, [pc, #120]	; (800b16c <__pow5mult+0xb0>)
 800b0f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0f8:	f001 fa64 	bl	800c5c4 <__assert_func>
 800b0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b100:	6004      	str	r4, [r0, #0]
 800b102:	60c4      	str	r4, [r0, #12]
 800b104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b10c:	b94c      	cbnz	r4, 800b122 <__pow5mult+0x66>
 800b10e:	f240 2171 	movw	r1, #625	; 0x271
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff ff16 	bl	800af44 <__i2b>
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b11e:	4604      	mov	r4, r0
 800b120:	6003      	str	r3, [r0, #0]
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	07eb      	lsls	r3, r5, #31
 800b128:	d50a      	bpl.n	800b140 <__pow5mult+0x84>
 800b12a:	4639      	mov	r1, r7
 800b12c:	4622      	mov	r2, r4
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff ff1e 	bl	800af70 <__multiply>
 800b134:	4639      	mov	r1, r7
 800b136:	4680      	mov	r8, r0
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fdfd 	bl	800ad38 <_Bfree>
 800b13e:	4647      	mov	r7, r8
 800b140:	106d      	asrs	r5, r5, #1
 800b142:	d00b      	beq.n	800b15c <__pow5mult+0xa0>
 800b144:	6820      	ldr	r0, [r4, #0]
 800b146:	b938      	cbnz	r0, 800b158 <__pow5mult+0x9c>
 800b148:	4622      	mov	r2, r4
 800b14a:	4621      	mov	r1, r4
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff ff0f 	bl	800af70 <__multiply>
 800b152:	6020      	str	r0, [r4, #0]
 800b154:	f8c0 9000 	str.w	r9, [r0]
 800b158:	4604      	mov	r4, r0
 800b15a:	e7e4      	b.n	800b126 <__pow5mult+0x6a>
 800b15c:	4638      	mov	r0, r7
 800b15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b162:	bf00      	nop
 800b164:	0800e620 	.word	0x0800e620
 800b168:	0800e366 	.word	0x0800e366
 800b16c:	0800e4d0 	.word	0x0800e4d0

0800b170 <__lshift>:
 800b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	460c      	mov	r4, r1
 800b176:	6849      	ldr	r1, [r1, #4]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b17e:	68a3      	ldr	r3, [r4, #8]
 800b180:	4607      	mov	r7, r0
 800b182:	4691      	mov	r9, r2
 800b184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b188:	f108 0601 	add.w	r6, r8, #1
 800b18c:	42b3      	cmp	r3, r6
 800b18e:	db0b      	blt.n	800b1a8 <__lshift+0x38>
 800b190:	4638      	mov	r0, r7
 800b192:	f7ff fd91 	bl	800acb8 <_Balloc>
 800b196:	4605      	mov	r5, r0
 800b198:	b948      	cbnz	r0, 800b1ae <__lshift+0x3e>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b28      	ldr	r3, [pc, #160]	; (800b240 <__lshift+0xd0>)
 800b19e:	4829      	ldr	r0, [pc, #164]	; (800b244 <__lshift+0xd4>)
 800b1a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b1a4:	f001 fa0e 	bl	800c5c4 <__assert_func>
 800b1a8:	3101      	adds	r1, #1
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	e7ee      	b.n	800b18c <__lshift+0x1c>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f100 0114 	add.w	r1, r0, #20
 800b1b4:	f100 0210 	add.w	r2, r0, #16
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	4553      	cmp	r3, sl
 800b1bc:	db33      	blt.n	800b226 <__lshift+0xb6>
 800b1be:	6920      	ldr	r0, [r4, #16]
 800b1c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1c4:	f104 0314 	add.w	r3, r4, #20
 800b1c8:	f019 091f 	ands.w	r9, r9, #31
 800b1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1d4:	d02b      	beq.n	800b22e <__lshift+0xbe>
 800b1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b1da:	468a      	mov	sl, r1
 800b1dc:	2200      	movs	r2, #0
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b1e4:	4302      	orrs	r2, r0
 800b1e6:	f84a 2b04 	str.w	r2, [sl], #4
 800b1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ee:	459c      	cmp	ip, r3
 800b1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1f4:	d8f3      	bhi.n	800b1de <__lshift+0x6e>
 800b1f6:	ebac 0304 	sub.w	r3, ip, r4
 800b1fa:	3b15      	subs	r3, #21
 800b1fc:	f023 0303 	bic.w	r3, r3, #3
 800b200:	3304      	adds	r3, #4
 800b202:	f104 0015 	add.w	r0, r4, #21
 800b206:	4584      	cmp	ip, r0
 800b208:	bf38      	it	cc
 800b20a:	2304      	movcc	r3, #4
 800b20c:	50ca      	str	r2, [r1, r3]
 800b20e:	b10a      	cbz	r2, 800b214 <__lshift+0xa4>
 800b210:	f108 0602 	add.w	r6, r8, #2
 800b214:	3e01      	subs	r6, #1
 800b216:	4638      	mov	r0, r7
 800b218:	612e      	str	r6, [r5, #16]
 800b21a:	4621      	mov	r1, r4
 800b21c:	f7ff fd8c 	bl	800ad38 <_Bfree>
 800b220:	4628      	mov	r0, r5
 800b222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b226:	f842 0f04 	str.w	r0, [r2, #4]!
 800b22a:	3301      	adds	r3, #1
 800b22c:	e7c5      	b.n	800b1ba <__lshift+0x4a>
 800b22e:	3904      	subs	r1, #4
 800b230:	f853 2b04 	ldr.w	r2, [r3], #4
 800b234:	f841 2f04 	str.w	r2, [r1, #4]!
 800b238:	459c      	cmp	ip, r3
 800b23a:	d8f9      	bhi.n	800b230 <__lshift+0xc0>
 800b23c:	e7ea      	b.n	800b214 <__lshift+0xa4>
 800b23e:	bf00      	nop
 800b240:	0800e3dc 	.word	0x0800e3dc
 800b244:	0800e4d0 	.word	0x0800e4d0

0800b248 <__mcmp>:
 800b248:	b530      	push	{r4, r5, lr}
 800b24a:	6902      	ldr	r2, [r0, #16]
 800b24c:	690c      	ldr	r4, [r1, #16]
 800b24e:	1b12      	subs	r2, r2, r4
 800b250:	d10e      	bne.n	800b270 <__mcmp+0x28>
 800b252:	f100 0314 	add.w	r3, r0, #20
 800b256:	3114      	adds	r1, #20
 800b258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b25c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b268:	42a5      	cmp	r5, r4
 800b26a:	d003      	beq.n	800b274 <__mcmp+0x2c>
 800b26c:	d305      	bcc.n	800b27a <__mcmp+0x32>
 800b26e:	2201      	movs	r2, #1
 800b270:	4610      	mov	r0, r2
 800b272:	bd30      	pop	{r4, r5, pc}
 800b274:	4283      	cmp	r3, r0
 800b276:	d3f3      	bcc.n	800b260 <__mcmp+0x18>
 800b278:	e7fa      	b.n	800b270 <__mcmp+0x28>
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295
 800b27e:	e7f7      	b.n	800b270 <__mcmp+0x28>

0800b280 <__mdiff>:
 800b280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	460c      	mov	r4, r1
 800b286:	4606      	mov	r6, r0
 800b288:	4611      	mov	r1, r2
 800b28a:	4620      	mov	r0, r4
 800b28c:	4617      	mov	r7, r2
 800b28e:	f7ff ffdb 	bl	800b248 <__mcmp>
 800b292:	1e05      	subs	r5, r0, #0
 800b294:	d110      	bne.n	800b2b8 <__mdiff+0x38>
 800b296:	4629      	mov	r1, r5
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff fd0d 	bl	800acb8 <_Balloc>
 800b29e:	b930      	cbnz	r0, 800b2ae <__mdiff+0x2e>
 800b2a0:	4b39      	ldr	r3, [pc, #228]	; (800b388 <__mdiff+0x108>)
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	f240 2132 	movw	r1, #562	; 0x232
 800b2a8:	4838      	ldr	r0, [pc, #224]	; (800b38c <__mdiff+0x10c>)
 800b2aa:	f001 f98b 	bl	800c5c4 <__assert_func>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b8:	bfa4      	itt	ge
 800b2ba:	463b      	movge	r3, r7
 800b2bc:	4627      	movge	r7, r4
 800b2be:	4630      	mov	r0, r6
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	bfa6      	itte	ge
 800b2c4:	461c      	movge	r4, r3
 800b2c6:	2500      	movge	r5, #0
 800b2c8:	2501      	movlt	r5, #1
 800b2ca:	f7ff fcf5 	bl	800acb8 <_Balloc>
 800b2ce:	b920      	cbnz	r0, 800b2da <__mdiff+0x5a>
 800b2d0:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <__mdiff+0x108>)
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2d8:	e7e6      	b.n	800b2a8 <__mdiff+0x28>
 800b2da:	693e      	ldr	r6, [r7, #16]
 800b2dc:	60c5      	str	r5, [r0, #12]
 800b2de:	6925      	ldr	r5, [r4, #16]
 800b2e0:	f107 0114 	add.w	r1, r7, #20
 800b2e4:	f104 0914 	add.w	r9, r4, #20
 800b2e8:	f100 0e14 	add.w	lr, r0, #20
 800b2ec:	f107 0210 	add.w	r2, r7, #16
 800b2f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b2f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b2f8:	46f2      	mov	sl, lr
 800b2fa:	2700      	movs	r7, #0
 800b2fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b304:	fa1f f883 	uxth.w	r8, r3
 800b308:	fa17 f78b 	uxtah	r7, r7, fp
 800b30c:	0c1b      	lsrs	r3, r3, #16
 800b30e:	eba7 0808 	sub.w	r8, r7, r8
 800b312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b31a:	fa1f f888 	uxth.w	r8, r8
 800b31e:	141f      	asrs	r7, r3, #16
 800b320:	454d      	cmp	r5, r9
 800b322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b326:	f84a 3b04 	str.w	r3, [sl], #4
 800b32a:	d8e7      	bhi.n	800b2fc <__mdiff+0x7c>
 800b32c:	1b2b      	subs	r3, r5, r4
 800b32e:	3b15      	subs	r3, #21
 800b330:	f023 0303 	bic.w	r3, r3, #3
 800b334:	3304      	adds	r3, #4
 800b336:	3415      	adds	r4, #21
 800b338:	42a5      	cmp	r5, r4
 800b33a:	bf38      	it	cc
 800b33c:	2304      	movcc	r3, #4
 800b33e:	4419      	add	r1, r3
 800b340:	4473      	add	r3, lr
 800b342:	469e      	mov	lr, r3
 800b344:	460d      	mov	r5, r1
 800b346:	4565      	cmp	r5, ip
 800b348:	d30e      	bcc.n	800b368 <__mdiff+0xe8>
 800b34a:	f10c 0203 	add.w	r2, ip, #3
 800b34e:	1a52      	subs	r2, r2, r1
 800b350:	f022 0203 	bic.w	r2, r2, #3
 800b354:	3903      	subs	r1, #3
 800b356:	458c      	cmp	ip, r1
 800b358:	bf38      	it	cc
 800b35a:	2200      	movcc	r2, #0
 800b35c:	441a      	add	r2, r3
 800b35e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b362:	b17b      	cbz	r3, 800b384 <__mdiff+0x104>
 800b364:	6106      	str	r6, [r0, #16]
 800b366:	e7a5      	b.n	800b2b4 <__mdiff+0x34>
 800b368:	f855 8b04 	ldr.w	r8, [r5], #4
 800b36c:	fa17 f488 	uxtah	r4, r7, r8
 800b370:	1422      	asrs	r2, r4, #16
 800b372:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b376:	b2a4      	uxth	r4, r4
 800b378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b37c:	f84e 4b04 	str.w	r4, [lr], #4
 800b380:	1417      	asrs	r7, r2, #16
 800b382:	e7e0      	b.n	800b346 <__mdiff+0xc6>
 800b384:	3e01      	subs	r6, #1
 800b386:	e7ea      	b.n	800b35e <__mdiff+0xde>
 800b388:	0800e3dc 	.word	0x0800e3dc
 800b38c:	0800e4d0 	.word	0x0800e4d0

0800b390 <__ulp>:
 800b390:	b082      	sub	sp, #8
 800b392:	ed8d 0b00 	vstr	d0, [sp]
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	4912      	ldr	r1, [pc, #72]	; (800b3e4 <__ulp+0x54>)
 800b39a:	4019      	ands	r1, r3
 800b39c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	dd05      	ble.n	800b3b0 <__ulp+0x20>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	ec43 2b10 	vmov	d0, r2, r3
 800b3ac:	b002      	add	sp, #8
 800b3ae:	4770      	bx	lr
 800b3b0:	4249      	negs	r1, r1
 800b3b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b3b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b3ba:	f04f 0200 	mov.w	r2, #0
 800b3be:	f04f 0300 	mov.w	r3, #0
 800b3c2:	da04      	bge.n	800b3ce <__ulp+0x3e>
 800b3c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b3c8:	fa41 f300 	asr.w	r3, r1, r0
 800b3cc:	e7ec      	b.n	800b3a8 <__ulp+0x18>
 800b3ce:	f1a0 0114 	sub.w	r1, r0, #20
 800b3d2:	291e      	cmp	r1, #30
 800b3d4:	bfda      	itte	le
 800b3d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b3da:	fa20 f101 	lsrle.w	r1, r0, r1
 800b3de:	2101      	movgt	r1, #1
 800b3e0:	460a      	mov	r2, r1
 800b3e2:	e7e1      	b.n	800b3a8 <__ulp+0x18>
 800b3e4:	7ff00000 	.word	0x7ff00000

0800b3e8 <__b2d>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	6905      	ldr	r5, [r0, #16]
 800b3ec:	f100 0714 	add.w	r7, r0, #20
 800b3f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3f4:	1f2e      	subs	r6, r5, #4
 800b3f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff fd52 	bl	800aea4 <__hi0bits>
 800b400:	f1c0 0320 	rsb	r3, r0, #32
 800b404:	280a      	cmp	r0, #10
 800b406:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b484 <__b2d+0x9c>
 800b40a:	600b      	str	r3, [r1, #0]
 800b40c:	dc14      	bgt.n	800b438 <__b2d+0x50>
 800b40e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b412:	fa24 f10e 	lsr.w	r1, r4, lr
 800b416:	42b7      	cmp	r7, r6
 800b418:	ea41 030c 	orr.w	r3, r1, ip
 800b41c:	bf34      	ite	cc
 800b41e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b422:	2100      	movcs	r1, #0
 800b424:	3015      	adds	r0, #21
 800b426:	fa04 f000 	lsl.w	r0, r4, r0
 800b42a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b42e:	ea40 0201 	orr.w	r2, r0, r1
 800b432:	ec43 2b10 	vmov	d0, r2, r3
 800b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b438:	42b7      	cmp	r7, r6
 800b43a:	bf3a      	itte	cc
 800b43c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b440:	f1a5 0608 	subcc.w	r6, r5, #8
 800b444:	2100      	movcs	r1, #0
 800b446:	380b      	subs	r0, #11
 800b448:	d017      	beq.n	800b47a <__b2d+0x92>
 800b44a:	f1c0 0c20 	rsb	ip, r0, #32
 800b44e:	fa04 f500 	lsl.w	r5, r4, r0
 800b452:	42be      	cmp	r6, r7
 800b454:	fa21 f40c 	lsr.w	r4, r1, ip
 800b458:	ea45 0504 	orr.w	r5, r5, r4
 800b45c:	bf8c      	ite	hi
 800b45e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b462:	2400      	movls	r4, #0
 800b464:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b468:	fa01 f000 	lsl.w	r0, r1, r0
 800b46c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b470:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b474:	ea40 0204 	orr.w	r2, r0, r4
 800b478:	e7db      	b.n	800b432 <__b2d+0x4a>
 800b47a:	ea44 030c 	orr.w	r3, r4, ip
 800b47e:	460a      	mov	r2, r1
 800b480:	e7d7      	b.n	800b432 <__b2d+0x4a>
 800b482:	bf00      	nop
 800b484:	3ff00000 	.word	0x3ff00000

0800b488 <__d2b>:
 800b488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4689      	mov	r9, r1
 800b48e:	2101      	movs	r1, #1
 800b490:	ec57 6b10 	vmov	r6, r7, d0
 800b494:	4690      	mov	r8, r2
 800b496:	f7ff fc0f 	bl	800acb8 <_Balloc>
 800b49a:	4604      	mov	r4, r0
 800b49c:	b930      	cbnz	r0, 800b4ac <__d2b+0x24>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	4b25      	ldr	r3, [pc, #148]	; (800b538 <__d2b+0xb0>)
 800b4a2:	4826      	ldr	r0, [pc, #152]	; (800b53c <__d2b+0xb4>)
 800b4a4:	f240 310a 	movw	r1, #778	; 0x30a
 800b4a8:	f001 f88c 	bl	800c5c4 <__assert_func>
 800b4ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4b4:	bb35      	cbnz	r5, 800b504 <__d2b+0x7c>
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	d028      	beq.n	800b50e <__d2b+0x86>
 800b4bc:	4668      	mov	r0, sp
 800b4be:	9600      	str	r6, [sp, #0]
 800b4c0:	f7ff fd10 	bl	800aee4 <__lo0bits>
 800b4c4:	9900      	ldr	r1, [sp, #0]
 800b4c6:	b300      	cbz	r0, 800b50a <__d2b+0x82>
 800b4c8:	9a01      	ldr	r2, [sp, #4]
 800b4ca:	f1c0 0320 	rsb	r3, r0, #32
 800b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	40c2      	lsrs	r2, r0
 800b4d6:	6163      	str	r3, [r4, #20]
 800b4d8:	9201      	str	r2, [sp, #4]
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	61a3      	str	r3, [r4, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	bf14      	ite	ne
 800b4e2:	2202      	movne	r2, #2
 800b4e4:	2201      	moveq	r2, #1
 800b4e6:	6122      	str	r2, [r4, #16]
 800b4e8:	b1d5      	cbz	r5, 800b520 <__d2b+0x98>
 800b4ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ee:	4405      	add	r5, r0
 800b4f0:	f8c9 5000 	str.w	r5, [r9]
 800b4f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4f8:	f8c8 0000 	str.w	r0, [r8]
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	b003      	add	sp, #12
 800b500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b508:	e7d5      	b.n	800b4b6 <__d2b+0x2e>
 800b50a:	6161      	str	r1, [r4, #20]
 800b50c:	e7e5      	b.n	800b4da <__d2b+0x52>
 800b50e:	a801      	add	r0, sp, #4
 800b510:	f7ff fce8 	bl	800aee4 <__lo0bits>
 800b514:	9b01      	ldr	r3, [sp, #4]
 800b516:	6163      	str	r3, [r4, #20]
 800b518:	2201      	movs	r2, #1
 800b51a:	6122      	str	r2, [r4, #16]
 800b51c:	3020      	adds	r0, #32
 800b51e:	e7e3      	b.n	800b4e8 <__d2b+0x60>
 800b520:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b524:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b528:	f8c9 0000 	str.w	r0, [r9]
 800b52c:	6918      	ldr	r0, [r3, #16]
 800b52e:	f7ff fcb9 	bl	800aea4 <__hi0bits>
 800b532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b536:	e7df      	b.n	800b4f8 <__d2b+0x70>
 800b538:	0800e3dc 	.word	0x0800e3dc
 800b53c:	0800e4d0 	.word	0x0800e4d0

0800b540 <__ratio>:
 800b540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	4688      	mov	r8, r1
 800b546:	4669      	mov	r1, sp
 800b548:	4681      	mov	r9, r0
 800b54a:	f7ff ff4d 	bl	800b3e8 <__b2d>
 800b54e:	a901      	add	r1, sp, #4
 800b550:	4640      	mov	r0, r8
 800b552:	ec55 4b10 	vmov	r4, r5, d0
 800b556:	f7ff ff47 	bl	800b3e8 <__b2d>
 800b55a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b55e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b562:	eba3 0c02 	sub.w	ip, r3, r2
 800b566:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b570:	ec51 0b10 	vmov	r0, r1, d0
 800b574:	2b00      	cmp	r3, #0
 800b576:	bfd6      	itet	le
 800b578:	460a      	movle	r2, r1
 800b57a:	462a      	movgt	r2, r5
 800b57c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b580:	468b      	mov	fp, r1
 800b582:	462f      	mov	r7, r5
 800b584:	bfd4      	ite	le
 800b586:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b58a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b58e:	4620      	mov	r0, r4
 800b590:	ee10 2a10 	vmov	r2, s0
 800b594:	465b      	mov	r3, fp
 800b596:	4639      	mov	r1, r7
 800b598:	f7f5 f970 	bl	800087c <__aeabi_ddiv>
 800b59c:	ec41 0b10 	vmov	d0, r0, r1
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5a6 <__copybits>:
 800b5a6:	3901      	subs	r1, #1
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	1149      	asrs	r1, r1, #5
 800b5ac:	6914      	ldr	r4, [r2, #16]
 800b5ae:	3101      	adds	r1, #1
 800b5b0:	f102 0314 	add.w	r3, r2, #20
 800b5b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b5b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5bc:	1f05      	subs	r5, r0, #4
 800b5be:	42a3      	cmp	r3, r4
 800b5c0:	d30c      	bcc.n	800b5dc <__copybits+0x36>
 800b5c2:	1aa3      	subs	r3, r4, r2
 800b5c4:	3b11      	subs	r3, #17
 800b5c6:	f023 0303 	bic.w	r3, r3, #3
 800b5ca:	3211      	adds	r2, #17
 800b5cc:	42a2      	cmp	r2, r4
 800b5ce:	bf88      	it	hi
 800b5d0:	2300      	movhi	r3, #0
 800b5d2:	4418      	add	r0, r3
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4288      	cmp	r0, r1
 800b5d8:	d305      	bcc.n	800b5e6 <__copybits+0x40>
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5e4:	e7eb      	b.n	800b5be <__copybits+0x18>
 800b5e6:	f840 3b04 	str.w	r3, [r0], #4
 800b5ea:	e7f4      	b.n	800b5d6 <__copybits+0x30>

0800b5ec <__any_on>:
 800b5ec:	f100 0214 	add.w	r2, r0, #20
 800b5f0:	6900      	ldr	r0, [r0, #16]
 800b5f2:	114b      	asrs	r3, r1, #5
 800b5f4:	4298      	cmp	r0, r3
 800b5f6:	b510      	push	{r4, lr}
 800b5f8:	db11      	blt.n	800b61e <__any_on+0x32>
 800b5fa:	dd0a      	ble.n	800b612 <__any_on+0x26>
 800b5fc:	f011 011f 	ands.w	r1, r1, #31
 800b600:	d007      	beq.n	800b612 <__any_on+0x26>
 800b602:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b606:	fa24 f001 	lsr.w	r0, r4, r1
 800b60a:	fa00 f101 	lsl.w	r1, r0, r1
 800b60e:	428c      	cmp	r4, r1
 800b610:	d10b      	bne.n	800b62a <__any_on+0x3e>
 800b612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b616:	4293      	cmp	r3, r2
 800b618:	d803      	bhi.n	800b622 <__any_on+0x36>
 800b61a:	2000      	movs	r0, #0
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	4603      	mov	r3, r0
 800b620:	e7f7      	b.n	800b612 <__any_on+0x26>
 800b622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b626:	2900      	cmp	r1, #0
 800b628:	d0f5      	beq.n	800b616 <__any_on+0x2a>
 800b62a:	2001      	movs	r0, #1
 800b62c:	e7f6      	b.n	800b61c <__any_on+0x30>

0800b62e <_calloc_r>:
 800b62e:	b513      	push	{r0, r1, r4, lr}
 800b630:	434a      	muls	r2, r1
 800b632:	4611      	mov	r1, r2
 800b634:	9201      	str	r2, [sp, #4]
 800b636:	f000 f859 	bl	800b6ec <_malloc_r>
 800b63a:	4604      	mov	r4, r0
 800b63c:	b118      	cbz	r0, 800b646 <_calloc_r+0x18>
 800b63e:	9a01      	ldr	r2, [sp, #4]
 800b640:	2100      	movs	r1, #0
 800b642:	f7fb ffb7 	bl	80075b4 <memset>
 800b646:	4620      	mov	r0, r4
 800b648:	b002      	add	sp, #8
 800b64a:	bd10      	pop	{r4, pc}

0800b64c <_free_r>:
 800b64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b64e:	2900      	cmp	r1, #0
 800b650:	d048      	beq.n	800b6e4 <_free_r+0x98>
 800b652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b656:	9001      	str	r0, [sp, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f1a1 0404 	sub.w	r4, r1, #4
 800b65e:	bfb8      	it	lt
 800b660:	18e4      	addlt	r4, r4, r3
 800b662:	f001 f81b 	bl	800c69c <__malloc_lock>
 800b666:	4a20      	ldr	r2, [pc, #128]	; (800b6e8 <_free_r+0x9c>)
 800b668:	9801      	ldr	r0, [sp, #4]
 800b66a:	6813      	ldr	r3, [r2, #0]
 800b66c:	4615      	mov	r5, r2
 800b66e:	b933      	cbnz	r3, 800b67e <_free_r+0x32>
 800b670:	6063      	str	r3, [r4, #4]
 800b672:	6014      	str	r4, [r2, #0]
 800b674:	b003      	add	sp, #12
 800b676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b67a:	f001 b815 	b.w	800c6a8 <__malloc_unlock>
 800b67e:	42a3      	cmp	r3, r4
 800b680:	d90b      	bls.n	800b69a <_free_r+0x4e>
 800b682:	6821      	ldr	r1, [r4, #0]
 800b684:	1862      	adds	r2, r4, r1
 800b686:	4293      	cmp	r3, r2
 800b688:	bf04      	itt	eq
 800b68a:	681a      	ldreq	r2, [r3, #0]
 800b68c:	685b      	ldreq	r3, [r3, #4]
 800b68e:	6063      	str	r3, [r4, #4]
 800b690:	bf04      	itt	eq
 800b692:	1852      	addeq	r2, r2, r1
 800b694:	6022      	streq	r2, [r4, #0]
 800b696:	602c      	str	r4, [r5, #0]
 800b698:	e7ec      	b.n	800b674 <_free_r+0x28>
 800b69a:	461a      	mov	r2, r3
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	b10b      	cbz	r3, 800b6a4 <_free_r+0x58>
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d9fa      	bls.n	800b69a <_free_r+0x4e>
 800b6a4:	6811      	ldr	r1, [r2, #0]
 800b6a6:	1855      	adds	r5, r2, r1
 800b6a8:	42a5      	cmp	r5, r4
 800b6aa:	d10b      	bne.n	800b6c4 <_free_r+0x78>
 800b6ac:	6824      	ldr	r4, [r4, #0]
 800b6ae:	4421      	add	r1, r4
 800b6b0:	1854      	adds	r4, r2, r1
 800b6b2:	42a3      	cmp	r3, r4
 800b6b4:	6011      	str	r1, [r2, #0]
 800b6b6:	d1dd      	bne.n	800b674 <_free_r+0x28>
 800b6b8:	681c      	ldr	r4, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	6053      	str	r3, [r2, #4]
 800b6be:	4421      	add	r1, r4
 800b6c0:	6011      	str	r1, [r2, #0]
 800b6c2:	e7d7      	b.n	800b674 <_free_r+0x28>
 800b6c4:	d902      	bls.n	800b6cc <_free_r+0x80>
 800b6c6:	230c      	movs	r3, #12
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	e7d3      	b.n	800b674 <_free_r+0x28>
 800b6cc:	6825      	ldr	r5, [r4, #0]
 800b6ce:	1961      	adds	r1, r4, r5
 800b6d0:	428b      	cmp	r3, r1
 800b6d2:	bf04      	itt	eq
 800b6d4:	6819      	ldreq	r1, [r3, #0]
 800b6d6:	685b      	ldreq	r3, [r3, #4]
 800b6d8:	6063      	str	r3, [r4, #4]
 800b6da:	bf04      	itt	eq
 800b6dc:	1949      	addeq	r1, r1, r5
 800b6de:	6021      	streq	r1, [r4, #0]
 800b6e0:	6054      	str	r4, [r2, #4]
 800b6e2:	e7c7      	b.n	800b674 <_free_r+0x28>
 800b6e4:	b003      	add	sp, #12
 800b6e6:	bd30      	pop	{r4, r5, pc}
 800b6e8:	20001614 	.word	0x20001614

0800b6ec <_malloc_r>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	1ccd      	adds	r5, r1, #3
 800b6f0:	f025 0503 	bic.w	r5, r5, #3
 800b6f4:	3508      	adds	r5, #8
 800b6f6:	2d0c      	cmp	r5, #12
 800b6f8:	bf38      	it	cc
 800b6fa:	250c      	movcc	r5, #12
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	4606      	mov	r6, r0
 800b700:	db01      	blt.n	800b706 <_malloc_r+0x1a>
 800b702:	42a9      	cmp	r1, r5
 800b704:	d903      	bls.n	800b70e <_malloc_r+0x22>
 800b706:	230c      	movs	r3, #12
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	2000      	movs	r0, #0
 800b70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70e:	f000 ffc5 	bl	800c69c <__malloc_lock>
 800b712:	4921      	ldr	r1, [pc, #132]	; (800b798 <_malloc_r+0xac>)
 800b714:	680a      	ldr	r2, [r1, #0]
 800b716:	4614      	mov	r4, r2
 800b718:	b99c      	cbnz	r4, 800b742 <_malloc_r+0x56>
 800b71a:	4f20      	ldr	r7, [pc, #128]	; (800b79c <_malloc_r+0xb0>)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	b923      	cbnz	r3, 800b72a <_malloc_r+0x3e>
 800b720:	4621      	mov	r1, r4
 800b722:	4630      	mov	r0, r6
 800b724:	f000 fe2c 	bl	800c380 <_sbrk_r>
 800b728:	6038      	str	r0, [r7, #0]
 800b72a:	4629      	mov	r1, r5
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 fe27 	bl	800c380 <_sbrk_r>
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	d123      	bne.n	800b77e <_malloc_r+0x92>
 800b736:	230c      	movs	r3, #12
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	4630      	mov	r0, r6
 800b73c:	f000 ffb4 	bl	800c6a8 <__malloc_unlock>
 800b740:	e7e3      	b.n	800b70a <_malloc_r+0x1e>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	1b5b      	subs	r3, r3, r5
 800b746:	d417      	bmi.n	800b778 <_malloc_r+0x8c>
 800b748:	2b0b      	cmp	r3, #11
 800b74a:	d903      	bls.n	800b754 <_malloc_r+0x68>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	441c      	add	r4, r3
 800b750:	6025      	str	r5, [r4, #0]
 800b752:	e004      	b.n	800b75e <_malloc_r+0x72>
 800b754:	6863      	ldr	r3, [r4, #4]
 800b756:	42a2      	cmp	r2, r4
 800b758:	bf0c      	ite	eq
 800b75a:	600b      	streq	r3, [r1, #0]
 800b75c:	6053      	strne	r3, [r2, #4]
 800b75e:	4630      	mov	r0, r6
 800b760:	f000 ffa2 	bl	800c6a8 <__malloc_unlock>
 800b764:	f104 000b 	add.w	r0, r4, #11
 800b768:	1d23      	adds	r3, r4, #4
 800b76a:	f020 0007 	bic.w	r0, r0, #7
 800b76e:	1ac2      	subs	r2, r0, r3
 800b770:	d0cc      	beq.n	800b70c <_malloc_r+0x20>
 800b772:	1a1b      	subs	r3, r3, r0
 800b774:	50a3      	str	r3, [r4, r2]
 800b776:	e7c9      	b.n	800b70c <_malloc_r+0x20>
 800b778:	4622      	mov	r2, r4
 800b77a:	6864      	ldr	r4, [r4, #4]
 800b77c:	e7cc      	b.n	800b718 <_malloc_r+0x2c>
 800b77e:	1cc4      	adds	r4, r0, #3
 800b780:	f024 0403 	bic.w	r4, r4, #3
 800b784:	42a0      	cmp	r0, r4
 800b786:	d0e3      	beq.n	800b750 <_malloc_r+0x64>
 800b788:	1a21      	subs	r1, r4, r0
 800b78a:	4630      	mov	r0, r6
 800b78c:	f000 fdf8 	bl	800c380 <_sbrk_r>
 800b790:	3001      	adds	r0, #1
 800b792:	d1dd      	bne.n	800b750 <_malloc_r+0x64>
 800b794:	e7cf      	b.n	800b736 <_malloc_r+0x4a>
 800b796:	bf00      	nop
 800b798:	20001614 	.word	0x20001614
 800b79c:	20001618 	.word	0x20001618

0800b7a0 <__ssputs_r>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	688e      	ldr	r6, [r1, #8]
 800b7a6:	429e      	cmp	r6, r3
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4690      	mov	r8, r2
 800b7ae:	461f      	mov	r7, r3
 800b7b0:	d838      	bhi.n	800b824 <__ssputs_r+0x84>
 800b7b2:	898a      	ldrh	r2, [r1, #12]
 800b7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7b8:	d032      	beq.n	800b820 <__ssputs_r+0x80>
 800b7ba:	6825      	ldr	r5, [r4, #0]
 800b7bc:	6909      	ldr	r1, [r1, #16]
 800b7be:	eba5 0901 	sub.w	r9, r5, r1
 800b7c2:	6965      	ldr	r5, [r4, #20]
 800b7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	444b      	add	r3, r9
 800b7d0:	106d      	asrs	r5, r5, #1
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	bf38      	it	cc
 800b7d6:	461d      	movcc	r5, r3
 800b7d8:	0553      	lsls	r3, r2, #21
 800b7da:	d531      	bpl.n	800b840 <__ssputs_r+0xa0>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7ff ff85 	bl	800b6ec <_malloc_r>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	b950      	cbnz	r0, 800b7fc <__ssputs_r+0x5c>
 800b7e6:	230c      	movs	r3, #12
 800b7e8:	f8ca 3000 	str.w	r3, [sl]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fc:	6921      	ldr	r1, [r4, #16]
 800b7fe:	464a      	mov	r2, r9
 800b800:	f7ff fa4c 	bl	800ac9c <memcpy>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	6126      	str	r6, [r4, #16]
 800b812:	6165      	str	r5, [r4, #20]
 800b814:	444e      	add	r6, r9
 800b816:	eba5 0509 	sub.w	r5, r5, r9
 800b81a:	6026      	str	r6, [r4, #0]
 800b81c:	60a5      	str	r5, [r4, #8]
 800b81e:	463e      	mov	r6, r7
 800b820:	42be      	cmp	r6, r7
 800b822:	d900      	bls.n	800b826 <__ssputs_r+0x86>
 800b824:	463e      	mov	r6, r7
 800b826:	4632      	mov	r2, r6
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	4641      	mov	r1, r8
 800b82c:	f000 ff1c 	bl	800c668 <memmove>
 800b830:	68a3      	ldr	r3, [r4, #8]
 800b832:	6822      	ldr	r2, [r4, #0]
 800b834:	1b9b      	subs	r3, r3, r6
 800b836:	4432      	add	r2, r6
 800b838:	60a3      	str	r3, [r4, #8]
 800b83a:	6022      	str	r2, [r4, #0]
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7db      	b.n	800b7f8 <__ssputs_r+0x58>
 800b840:	462a      	mov	r2, r5
 800b842:	f000 ff37 	bl	800c6b4 <_realloc_r>
 800b846:	4606      	mov	r6, r0
 800b848:	2800      	cmp	r0, #0
 800b84a:	d1e1      	bne.n	800b810 <__ssputs_r+0x70>
 800b84c:	6921      	ldr	r1, [r4, #16]
 800b84e:	4650      	mov	r0, sl
 800b850:	f7ff fefc 	bl	800b64c <_free_r>
 800b854:	e7c7      	b.n	800b7e6 <__ssputs_r+0x46>
	...

0800b858 <_svfiprintf_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	4698      	mov	r8, r3
 800b85e:	898b      	ldrh	r3, [r1, #12]
 800b860:	061b      	lsls	r3, r3, #24
 800b862:	b09d      	sub	sp, #116	; 0x74
 800b864:	4607      	mov	r7, r0
 800b866:	460d      	mov	r5, r1
 800b868:	4614      	mov	r4, r2
 800b86a:	d50e      	bpl.n	800b88a <_svfiprintf_r+0x32>
 800b86c:	690b      	ldr	r3, [r1, #16]
 800b86e:	b963      	cbnz	r3, 800b88a <_svfiprintf_r+0x32>
 800b870:	2140      	movs	r1, #64	; 0x40
 800b872:	f7ff ff3b 	bl	800b6ec <_malloc_r>
 800b876:	6028      	str	r0, [r5, #0]
 800b878:	6128      	str	r0, [r5, #16]
 800b87a:	b920      	cbnz	r0, 800b886 <_svfiprintf_r+0x2e>
 800b87c:	230c      	movs	r3, #12
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	e0d1      	b.n	800ba2a <_svfiprintf_r+0x1d2>
 800b886:	2340      	movs	r3, #64	; 0x40
 800b888:	616b      	str	r3, [r5, #20]
 800b88a:	2300      	movs	r3, #0
 800b88c:	9309      	str	r3, [sp, #36]	; 0x24
 800b88e:	2320      	movs	r3, #32
 800b890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b894:	f8cd 800c 	str.w	r8, [sp, #12]
 800b898:	2330      	movs	r3, #48	; 0x30
 800b89a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba44 <_svfiprintf_r+0x1ec>
 800b89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8a2:	f04f 0901 	mov.w	r9, #1
 800b8a6:	4623      	mov	r3, r4
 800b8a8:	469a      	mov	sl, r3
 800b8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ae:	b10a      	cbz	r2, 800b8b4 <_svfiprintf_r+0x5c>
 800b8b0:	2a25      	cmp	r2, #37	; 0x25
 800b8b2:	d1f9      	bne.n	800b8a8 <_svfiprintf_r+0x50>
 800b8b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b8:	d00b      	beq.n	800b8d2 <_svfiprintf_r+0x7a>
 800b8ba:	465b      	mov	r3, fp
 800b8bc:	4622      	mov	r2, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f7ff ff6d 	bl	800b7a0 <__ssputs_r>
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	f000 80aa 	beq.w	800ba20 <_svfiprintf_r+0x1c8>
 800b8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ce:	445a      	add	r2, fp
 800b8d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 80a2 	beq.w	800ba20 <_svfiprintf_r+0x1c8>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8e6:	f10a 0a01 	add.w	sl, sl, #1
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	9307      	str	r3, [sp, #28]
 800b8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8f4:	4654      	mov	r4, sl
 800b8f6:	2205      	movs	r2, #5
 800b8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fc:	4851      	ldr	r0, [pc, #324]	; (800ba44 <_svfiprintf_r+0x1ec>)
 800b8fe:	f7f4 fc87 	bl	8000210 <memchr>
 800b902:	9a04      	ldr	r2, [sp, #16]
 800b904:	b9d8      	cbnz	r0, 800b93e <_svfiprintf_r+0xe6>
 800b906:	06d0      	lsls	r0, r2, #27
 800b908:	bf44      	itt	mi
 800b90a:	2320      	movmi	r3, #32
 800b90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b910:	0711      	lsls	r1, r2, #28
 800b912:	bf44      	itt	mi
 800b914:	232b      	movmi	r3, #43	; 0x2b
 800b916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b91a:	f89a 3000 	ldrb.w	r3, [sl]
 800b91e:	2b2a      	cmp	r3, #42	; 0x2a
 800b920:	d015      	beq.n	800b94e <_svfiprintf_r+0xf6>
 800b922:	9a07      	ldr	r2, [sp, #28]
 800b924:	4654      	mov	r4, sl
 800b926:	2000      	movs	r0, #0
 800b928:	f04f 0c0a 	mov.w	ip, #10
 800b92c:	4621      	mov	r1, r4
 800b92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b932:	3b30      	subs	r3, #48	; 0x30
 800b934:	2b09      	cmp	r3, #9
 800b936:	d94e      	bls.n	800b9d6 <_svfiprintf_r+0x17e>
 800b938:	b1b0      	cbz	r0, 800b968 <_svfiprintf_r+0x110>
 800b93a:	9207      	str	r2, [sp, #28]
 800b93c:	e014      	b.n	800b968 <_svfiprintf_r+0x110>
 800b93e:	eba0 0308 	sub.w	r3, r0, r8
 800b942:	fa09 f303 	lsl.w	r3, r9, r3
 800b946:	4313      	orrs	r3, r2
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	46a2      	mov	sl, r4
 800b94c:	e7d2      	b.n	800b8f4 <_svfiprintf_r+0x9c>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	1d19      	adds	r1, r3, #4
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	9103      	str	r1, [sp, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfbb      	ittet	lt
 800b95a:	425b      	neglt	r3, r3
 800b95c:	f042 0202 	orrlt.w	r2, r2, #2
 800b960:	9307      	strge	r3, [sp, #28]
 800b962:	9307      	strlt	r3, [sp, #28]
 800b964:	bfb8      	it	lt
 800b966:	9204      	strlt	r2, [sp, #16]
 800b968:	7823      	ldrb	r3, [r4, #0]
 800b96a:	2b2e      	cmp	r3, #46	; 0x2e
 800b96c:	d10c      	bne.n	800b988 <_svfiprintf_r+0x130>
 800b96e:	7863      	ldrb	r3, [r4, #1]
 800b970:	2b2a      	cmp	r3, #42	; 0x2a
 800b972:	d135      	bne.n	800b9e0 <_svfiprintf_r+0x188>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	1d1a      	adds	r2, r3, #4
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	9203      	str	r2, [sp, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bfb8      	it	lt
 800b980:	f04f 33ff 	movlt.w	r3, #4294967295
 800b984:	3402      	adds	r4, #2
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba54 <_svfiprintf_r+0x1fc>
 800b98c:	7821      	ldrb	r1, [r4, #0]
 800b98e:	2203      	movs	r2, #3
 800b990:	4650      	mov	r0, sl
 800b992:	f7f4 fc3d 	bl	8000210 <memchr>
 800b996:	b140      	cbz	r0, 800b9aa <_svfiprintf_r+0x152>
 800b998:	2340      	movs	r3, #64	; 0x40
 800b99a:	eba0 000a 	sub.w	r0, r0, sl
 800b99e:	fa03 f000 	lsl.w	r0, r3, r0
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	4303      	orrs	r3, r0
 800b9a6:	3401      	adds	r4, #1
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ae:	4826      	ldr	r0, [pc, #152]	; (800ba48 <_svfiprintf_r+0x1f0>)
 800b9b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9b4:	2206      	movs	r2, #6
 800b9b6:	f7f4 fc2b 	bl	8000210 <memchr>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d038      	beq.n	800ba30 <_svfiprintf_r+0x1d8>
 800b9be:	4b23      	ldr	r3, [pc, #140]	; (800ba4c <_svfiprintf_r+0x1f4>)
 800b9c0:	bb1b      	cbnz	r3, 800ba0a <_svfiprintf_r+0x1b2>
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	3307      	adds	r3, #7
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	9303      	str	r3, [sp, #12]
 800b9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d0:	4433      	add	r3, r6
 800b9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d4:	e767      	b.n	800b8a6 <_svfiprintf_r+0x4e>
 800b9d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9da:	460c      	mov	r4, r1
 800b9dc:	2001      	movs	r0, #1
 800b9de:	e7a5      	b.n	800b92c <_svfiprintf_r+0xd4>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	3401      	adds	r4, #1
 800b9e4:	9305      	str	r3, [sp, #20]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	f04f 0c0a 	mov.w	ip, #10
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9f2:	3a30      	subs	r2, #48	; 0x30
 800b9f4:	2a09      	cmp	r2, #9
 800b9f6:	d903      	bls.n	800ba00 <_svfiprintf_r+0x1a8>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d0c5      	beq.n	800b988 <_svfiprintf_r+0x130>
 800b9fc:	9105      	str	r1, [sp, #20]
 800b9fe:	e7c3      	b.n	800b988 <_svfiprintf_r+0x130>
 800ba00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba04:	4604      	mov	r4, r0
 800ba06:	2301      	movs	r3, #1
 800ba08:	e7f0      	b.n	800b9ec <_svfiprintf_r+0x194>
 800ba0a:	ab03      	add	r3, sp, #12
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	462a      	mov	r2, r5
 800ba10:	4b0f      	ldr	r3, [pc, #60]	; (800ba50 <_svfiprintf_r+0x1f8>)
 800ba12:	a904      	add	r1, sp, #16
 800ba14:	4638      	mov	r0, r7
 800ba16:	f7fb fe75 	bl	8007704 <_printf_float>
 800ba1a:	1c42      	adds	r2, r0, #1
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	d1d6      	bne.n	800b9ce <_svfiprintf_r+0x176>
 800ba20:	89ab      	ldrh	r3, [r5, #12]
 800ba22:	065b      	lsls	r3, r3, #25
 800ba24:	f53f af2c 	bmi.w	800b880 <_svfiprintf_r+0x28>
 800ba28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba2a:	b01d      	add	sp, #116	; 0x74
 800ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba30:	ab03      	add	r3, sp, #12
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	462a      	mov	r2, r5
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <_svfiprintf_r+0x1f8>)
 800ba38:	a904      	add	r1, sp, #16
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	f7fc f906 	bl	8007c4c <_printf_i>
 800ba40:	e7eb      	b.n	800ba1a <_svfiprintf_r+0x1c2>
 800ba42:	bf00      	nop
 800ba44:	0800e62c 	.word	0x0800e62c
 800ba48:	0800e636 	.word	0x0800e636
 800ba4c:	08007705 	.word	0x08007705
 800ba50:	0800b7a1 	.word	0x0800b7a1
 800ba54:	0800e632 	.word	0x0800e632

0800ba58 <_sungetc_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	1c4b      	adds	r3, r1, #1
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	d103      	bne.n	800ba68 <_sungetc_r+0x10>
 800ba60:	f04f 35ff 	mov.w	r5, #4294967295
 800ba64:	4628      	mov	r0, r5
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	8993      	ldrh	r3, [r2, #12]
 800ba6a:	f023 0320 	bic.w	r3, r3, #32
 800ba6e:	8193      	strh	r3, [r2, #12]
 800ba70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba72:	6852      	ldr	r2, [r2, #4]
 800ba74:	b2cd      	uxtb	r5, r1
 800ba76:	b18b      	cbz	r3, 800ba9c <_sungetc_r+0x44>
 800ba78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	dd08      	ble.n	800ba90 <_sungetc_r+0x38>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	1e5a      	subs	r2, r3, #1
 800ba82:	6022      	str	r2, [r4, #0]
 800ba84:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	6063      	str	r3, [r4, #4]
 800ba8e:	e7e9      	b.n	800ba64 <_sungetc_r+0xc>
 800ba90:	4621      	mov	r1, r4
 800ba92:	f000 fd4f 	bl	800c534 <__submore>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d0f1      	beq.n	800ba7e <_sungetc_r+0x26>
 800ba9a:	e7e1      	b.n	800ba60 <_sungetc_r+0x8>
 800ba9c:	6921      	ldr	r1, [r4, #16]
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	b151      	cbz	r1, 800bab8 <_sungetc_r+0x60>
 800baa2:	4299      	cmp	r1, r3
 800baa4:	d208      	bcs.n	800bab8 <_sungetc_r+0x60>
 800baa6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800baaa:	42a9      	cmp	r1, r5
 800baac:	d104      	bne.n	800bab8 <_sungetc_r+0x60>
 800baae:	3b01      	subs	r3, #1
 800bab0:	3201      	adds	r2, #1
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	6062      	str	r2, [r4, #4]
 800bab6:	e7d5      	b.n	800ba64 <_sungetc_r+0xc>
 800bab8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800babc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bac0:	6363      	str	r3, [r4, #52]	; 0x34
 800bac2:	2303      	movs	r3, #3
 800bac4:	63a3      	str	r3, [r4, #56]	; 0x38
 800bac6:	4623      	mov	r3, r4
 800bac8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	2301      	movs	r3, #1
 800bad0:	e7dc      	b.n	800ba8c <_sungetc_r+0x34>

0800bad2 <__ssrefill_r>:
 800bad2:	b510      	push	{r4, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bad8:	b169      	cbz	r1, 800baf6 <__ssrefill_r+0x24>
 800bada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bade:	4299      	cmp	r1, r3
 800bae0:	d001      	beq.n	800bae6 <__ssrefill_r+0x14>
 800bae2:	f7ff fdb3 	bl	800b64c <_free_r>
 800bae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bae8:	6063      	str	r3, [r4, #4]
 800baea:	2000      	movs	r0, #0
 800baec:	6360      	str	r0, [r4, #52]	; 0x34
 800baee:	b113      	cbz	r3, 800baf6 <__ssrefill_r+0x24>
 800baf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	6923      	ldr	r3, [r4, #16]
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	2300      	movs	r3, #0
 800bafc:	6063      	str	r3, [r4, #4]
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	f043 0320 	orr.w	r3, r3, #32
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	e7f3      	b.n	800baf4 <__ssrefill_r+0x22>

0800bb0c <__ssvfiscanf_r>:
 800bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bb16:	2100      	movs	r1, #0
 800bb18:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bb1c:	49b2      	ldr	r1, [pc, #712]	; (800bde8 <__ssvfiscanf_r+0x2dc>)
 800bb1e:	91a0      	str	r1, [sp, #640]	; 0x280
 800bb20:	f10d 0804 	add.w	r8, sp, #4
 800bb24:	49b1      	ldr	r1, [pc, #708]	; (800bdec <__ssvfiscanf_r+0x2e0>)
 800bb26:	4fb2      	ldr	r7, [pc, #712]	; (800bdf0 <__ssvfiscanf_r+0x2e4>)
 800bb28:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bdf4 <__ssvfiscanf_r+0x2e8>
 800bb2c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bb30:	4606      	mov	r6, r0
 800bb32:	91a1      	str	r1, [sp, #644]	; 0x284
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	f892 a000 	ldrb.w	sl, [r2]
 800bb3a:	f1ba 0f00 	cmp.w	sl, #0
 800bb3e:	f000 8151 	beq.w	800bde4 <__ssvfiscanf_r+0x2d8>
 800bb42:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bb46:	f013 0308 	ands.w	r3, r3, #8
 800bb4a:	f102 0501 	add.w	r5, r2, #1
 800bb4e:	d019      	beq.n	800bb84 <__ssvfiscanf_r+0x78>
 800bb50:	6863      	ldr	r3, [r4, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dd0f      	ble.n	800bb76 <__ssvfiscanf_r+0x6a>
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	781a      	ldrb	r2, [r3, #0]
 800bb5a:	5cba      	ldrb	r2, [r7, r2]
 800bb5c:	0712      	lsls	r2, r2, #28
 800bb5e:	d401      	bmi.n	800bb64 <__ssvfiscanf_r+0x58>
 800bb60:	462a      	mov	r2, r5
 800bb62:	e7e8      	b.n	800bb36 <__ssvfiscanf_r+0x2a>
 800bb64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb66:	3201      	adds	r2, #1
 800bb68:	9245      	str	r2, [sp, #276]	; 0x114
 800bb6a:	6862      	ldr	r2, [r4, #4]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	3a01      	subs	r2, #1
 800bb70:	6062      	str	r2, [r4, #4]
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	e7ec      	b.n	800bb50 <__ssvfiscanf_r+0x44>
 800bb76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	4798      	blx	r3
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0e9      	beq.n	800bb56 <__ssvfiscanf_r+0x4a>
 800bb82:	e7ed      	b.n	800bb60 <__ssvfiscanf_r+0x54>
 800bb84:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bb88:	f040 8083 	bne.w	800bc92 <__ssvfiscanf_r+0x186>
 800bb8c:	9341      	str	r3, [sp, #260]	; 0x104
 800bb8e:	9343      	str	r3, [sp, #268]	; 0x10c
 800bb90:	7853      	ldrb	r3, [r2, #1]
 800bb92:	2b2a      	cmp	r3, #42	; 0x2a
 800bb94:	bf02      	ittt	eq
 800bb96:	2310      	moveq	r3, #16
 800bb98:	1c95      	addeq	r5, r2, #2
 800bb9a:	9341      	streq	r3, [sp, #260]	; 0x104
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	46ab      	mov	fp, r5
 800bba0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bba4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bba8:	2b09      	cmp	r3, #9
 800bbaa:	d91d      	bls.n	800bbe8 <__ssvfiscanf_r+0xdc>
 800bbac:	4891      	ldr	r0, [pc, #580]	; (800bdf4 <__ssvfiscanf_r+0x2e8>)
 800bbae:	2203      	movs	r2, #3
 800bbb0:	f7f4 fb2e 	bl	8000210 <memchr>
 800bbb4:	b140      	cbz	r0, 800bbc8 <__ssvfiscanf_r+0xbc>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	eba0 0009 	sub.w	r0, r0, r9
 800bbbc:	fa03 f000 	lsl.w	r0, r3, r0
 800bbc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbc2:	4318      	orrs	r0, r3
 800bbc4:	9041      	str	r0, [sp, #260]	; 0x104
 800bbc6:	465d      	mov	r5, fp
 800bbc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bbcc:	2b78      	cmp	r3, #120	; 0x78
 800bbce:	d806      	bhi.n	800bbde <__ssvfiscanf_r+0xd2>
 800bbd0:	2b57      	cmp	r3, #87	; 0x57
 800bbd2:	d810      	bhi.n	800bbf6 <__ssvfiscanf_r+0xea>
 800bbd4:	2b25      	cmp	r3, #37	; 0x25
 800bbd6:	d05c      	beq.n	800bc92 <__ssvfiscanf_r+0x186>
 800bbd8:	d856      	bhi.n	800bc88 <__ssvfiscanf_r+0x17c>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d074      	beq.n	800bcc8 <__ssvfiscanf_r+0x1bc>
 800bbde:	2303      	movs	r3, #3
 800bbe0:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbe2:	230a      	movs	r3, #10
 800bbe4:	9342      	str	r3, [sp, #264]	; 0x108
 800bbe6:	e081      	b.n	800bcec <__ssvfiscanf_r+0x1e0>
 800bbe8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbea:	fb02 1303 	mla	r3, r2, r3, r1
 800bbee:	3b30      	subs	r3, #48	; 0x30
 800bbf0:	9343      	str	r3, [sp, #268]	; 0x10c
 800bbf2:	465d      	mov	r5, fp
 800bbf4:	e7d3      	b.n	800bb9e <__ssvfiscanf_r+0x92>
 800bbf6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bbfa:	2a20      	cmp	r2, #32
 800bbfc:	d8ef      	bhi.n	800bbde <__ssvfiscanf_r+0xd2>
 800bbfe:	a101      	add	r1, pc, #4	; (adr r1, 800bc04 <__ssvfiscanf_r+0xf8>)
 800bc00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc04:	0800bcd7 	.word	0x0800bcd7
 800bc08:	0800bbdf 	.word	0x0800bbdf
 800bc0c:	0800bbdf 	.word	0x0800bbdf
 800bc10:	0800bd35 	.word	0x0800bd35
 800bc14:	0800bbdf 	.word	0x0800bbdf
 800bc18:	0800bbdf 	.word	0x0800bbdf
 800bc1c:	0800bbdf 	.word	0x0800bbdf
 800bc20:	0800bbdf 	.word	0x0800bbdf
 800bc24:	0800bbdf 	.word	0x0800bbdf
 800bc28:	0800bbdf 	.word	0x0800bbdf
 800bc2c:	0800bbdf 	.word	0x0800bbdf
 800bc30:	0800bd4b 	.word	0x0800bd4b
 800bc34:	0800bd21 	.word	0x0800bd21
 800bc38:	0800bc8f 	.word	0x0800bc8f
 800bc3c:	0800bc8f 	.word	0x0800bc8f
 800bc40:	0800bc8f 	.word	0x0800bc8f
 800bc44:	0800bbdf 	.word	0x0800bbdf
 800bc48:	0800bd25 	.word	0x0800bd25
 800bc4c:	0800bbdf 	.word	0x0800bbdf
 800bc50:	0800bbdf 	.word	0x0800bbdf
 800bc54:	0800bbdf 	.word	0x0800bbdf
 800bc58:	0800bbdf 	.word	0x0800bbdf
 800bc5c:	0800bd5b 	.word	0x0800bd5b
 800bc60:	0800bd2d 	.word	0x0800bd2d
 800bc64:	0800bccf 	.word	0x0800bccf
 800bc68:	0800bbdf 	.word	0x0800bbdf
 800bc6c:	0800bbdf 	.word	0x0800bbdf
 800bc70:	0800bd57 	.word	0x0800bd57
 800bc74:	0800bbdf 	.word	0x0800bbdf
 800bc78:	0800bd21 	.word	0x0800bd21
 800bc7c:	0800bbdf 	.word	0x0800bbdf
 800bc80:	0800bbdf 	.word	0x0800bbdf
 800bc84:	0800bcd7 	.word	0x0800bcd7
 800bc88:	3b45      	subs	r3, #69	; 0x45
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d8a7      	bhi.n	800bbde <__ssvfiscanf_r+0xd2>
 800bc8e:	2305      	movs	r3, #5
 800bc90:	e02b      	b.n	800bcea <__ssvfiscanf_r+0x1de>
 800bc92:	6863      	ldr	r3, [r4, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dd0d      	ble.n	800bcb4 <__ssvfiscanf_r+0x1a8>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	781a      	ldrb	r2, [r3, #0]
 800bc9c:	4552      	cmp	r2, sl
 800bc9e:	f040 80a1 	bne.w	800bde4 <__ssvfiscanf_r+0x2d8>
 800bca2:	3301      	adds	r3, #1
 800bca4:	6862      	ldr	r2, [r4, #4]
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bcaa:	3a01      	subs	r2, #1
 800bcac:	3301      	adds	r3, #1
 800bcae:	6062      	str	r2, [r4, #4]
 800bcb0:	9345      	str	r3, [sp, #276]	; 0x114
 800bcb2:	e755      	b.n	800bb60 <__ssvfiscanf_r+0x54>
 800bcb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4630      	mov	r0, r6
 800bcba:	4798      	blx	r3
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d0eb      	beq.n	800bc98 <__ssvfiscanf_r+0x18c>
 800bcc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	f040 8084 	bne.w	800bdd0 <__ssvfiscanf_r+0x2c4>
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bccc:	e086      	b.n	800bddc <__ssvfiscanf_r+0x2d0>
 800bcce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcd0:	f042 0220 	orr.w	r2, r2, #32
 800bcd4:	9241      	str	r2, [sp, #260]	; 0x104
 800bcd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcdc:	9241      	str	r2, [sp, #260]	; 0x104
 800bcde:	2210      	movs	r2, #16
 800bce0:	2b6f      	cmp	r3, #111	; 0x6f
 800bce2:	9242      	str	r2, [sp, #264]	; 0x108
 800bce4:	bf34      	ite	cc
 800bce6:	2303      	movcc	r3, #3
 800bce8:	2304      	movcs	r3, #4
 800bcea:	9347      	str	r3, [sp, #284]	; 0x11c
 800bcec:	6863      	ldr	r3, [r4, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	dd41      	ble.n	800bd76 <__ssvfiscanf_r+0x26a>
 800bcf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcf4:	0659      	lsls	r1, r3, #25
 800bcf6:	d404      	bmi.n	800bd02 <__ssvfiscanf_r+0x1f6>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	781a      	ldrb	r2, [r3, #0]
 800bcfc:	5cba      	ldrb	r2, [r7, r2]
 800bcfe:	0712      	lsls	r2, r2, #28
 800bd00:	d440      	bmi.n	800bd84 <__ssvfiscanf_r+0x278>
 800bd02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	dc4f      	bgt.n	800bda8 <__ssvfiscanf_r+0x29c>
 800bd08:	466b      	mov	r3, sp
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	a941      	add	r1, sp, #260	; 0x104
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f000 f9ce 	bl	800c0b0 <_scanf_chars>
 800bd14:	2801      	cmp	r0, #1
 800bd16:	d065      	beq.n	800bde4 <__ssvfiscanf_r+0x2d8>
 800bd18:	2802      	cmp	r0, #2
 800bd1a:	f47f af21 	bne.w	800bb60 <__ssvfiscanf_r+0x54>
 800bd1e:	e7cf      	b.n	800bcc0 <__ssvfiscanf_r+0x1b4>
 800bd20:	220a      	movs	r2, #10
 800bd22:	e7dd      	b.n	800bce0 <__ssvfiscanf_r+0x1d4>
 800bd24:	2300      	movs	r3, #0
 800bd26:	9342      	str	r3, [sp, #264]	; 0x108
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e7de      	b.n	800bcea <__ssvfiscanf_r+0x1de>
 800bd2c:	2308      	movs	r3, #8
 800bd2e:	9342      	str	r3, [sp, #264]	; 0x108
 800bd30:	2304      	movs	r3, #4
 800bd32:	e7da      	b.n	800bcea <__ssvfiscanf_r+0x1de>
 800bd34:	4629      	mov	r1, r5
 800bd36:	4640      	mov	r0, r8
 800bd38:	f000 fb32 	bl	800c3a0 <__sccl>
 800bd3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd42:	9341      	str	r3, [sp, #260]	; 0x104
 800bd44:	4605      	mov	r5, r0
 800bd46:	2301      	movs	r3, #1
 800bd48:	e7cf      	b.n	800bcea <__ssvfiscanf_r+0x1de>
 800bd4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd50:	9341      	str	r3, [sp, #260]	; 0x104
 800bd52:	2300      	movs	r3, #0
 800bd54:	e7c9      	b.n	800bcea <__ssvfiscanf_r+0x1de>
 800bd56:	2302      	movs	r3, #2
 800bd58:	e7c7      	b.n	800bcea <__ssvfiscanf_r+0x1de>
 800bd5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd5c:	06c3      	lsls	r3, r0, #27
 800bd5e:	f53f aeff 	bmi.w	800bb60 <__ssvfiscanf_r+0x54>
 800bd62:	9b00      	ldr	r3, [sp, #0]
 800bd64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd66:	1d19      	adds	r1, r3, #4
 800bd68:	9100      	str	r1, [sp, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	07c0      	lsls	r0, r0, #31
 800bd6e:	bf4c      	ite	mi
 800bd70:	801a      	strhmi	r2, [r3, #0]
 800bd72:	601a      	strpl	r2, [r3, #0]
 800bd74:	e6f4      	b.n	800bb60 <__ssvfiscanf_r+0x54>
 800bd76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4798      	blx	r3
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d0b7      	beq.n	800bcf2 <__ssvfiscanf_r+0x1e6>
 800bd82:	e79d      	b.n	800bcc0 <__ssvfiscanf_r+0x1b4>
 800bd84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd86:	3201      	adds	r2, #1
 800bd88:	9245      	str	r2, [sp, #276]	; 0x114
 800bd8a:	6862      	ldr	r2, [r4, #4]
 800bd8c:	3a01      	subs	r2, #1
 800bd8e:	2a00      	cmp	r2, #0
 800bd90:	6062      	str	r2, [r4, #4]
 800bd92:	dd02      	ble.n	800bd9a <__ssvfiscanf_r+0x28e>
 800bd94:	3301      	adds	r3, #1
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	e7ae      	b.n	800bcf8 <__ssvfiscanf_r+0x1ec>
 800bd9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4798      	blx	r3
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d0a8      	beq.n	800bcf8 <__ssvfiscanf_r+0x1ec>
 800bda6:	e78b      	b.n	800bcc0 <__ssvfiscanf_r+0x1b4>
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	dc06      	bgt.n	800bdba <__ssvfiscanf_r+0x2ae>
 800bdac:	466b      	mov	r3, sp
 800bdae:	4622      	mov	r2, r4
 800bdb0:	a941      	add	r1, sp, #260	; 0x104
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f000 f9d4 	bl	800c160 <_scanf_i>
 800bdb8:	e7ac      	b.n	800bd14 <__ssvfiscanf_r+0x208>
 800bdba:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <__ssvfiscanf_r+0x2ec>)
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f43f aecf 	beq.w	800bb60 <__ssvfiscanf_r+0x54>
 800bdc2:	466b      	mov	r3, sp
 800bdc4:	4622      	mov	r2, r4
 800bdc6:	a941      	add	r1, sp, #260	; 0x104
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f7fc f865 	bl	8007e98 <_scanf_float>
 800bdce:	e7a1      	b.n	800bd14 <__ssvfiscanf_r+0x208>
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bdd6:	bf18      	it	ne
 800bdd8:	f04f 30ff 	movne.w	r0, #4294967295
 800bddc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bde6:	e7f9      	b.n	800bddc <__ssvfiscanf_r+0x2d0>
 800bde8:	0800ba59 	.word	0x0800ba59
 800bdec:	0800bad3 	.word	0x0800bad3
 800bdf0:	0800e259 	.word	0x0800e259
 800bdf4:	0800e632 	.word	0x0800e632
 800bdf8:	08007e99 	.word	0x08007e99

0800bdfc <__sfputc_r>:
 800bdfc:	6893      	ldr	r3, [r2, #8]
 800bdfe:	3b01      	subs	r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	b410      	push	{r4}
 800be04:	6093      	str	r3, [r2, #8]
 800be06:	da08      	bge.n	800be1a <__sfputc_r+0x1e>
 800be08:	6994      	ldr	r4, [r2, #24]
 800be0a:	42a3      	cmp	r3, r4
 800be0c:	db01      	blt.n	800be12 <__sfputc_r+0x16>
 800be0e:	290a      	cmp	r1, #10
 800be10:	d103      	bne.n	800be1a <__sfputc_r+0x1e>
 800be12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be16:	f7fd ba29 	b.w	800926c <__swbuf_r>
 800be1a:	6813      	ldr	r3, [r2, #0]
 800be1c:	1c58      	adds	r0, r3, #1
 800be1e:	6010      	str	r0, [r2, #0]
 800be20:	7019      	strb	r1, [r3, #0]
 800be22:	4608      	mov	r0, r1
 800be24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <__sfputs_r>:
 800be2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	4614      	mov	r4, r2
 800be32:	18d5      	adds	r5, r2, r3
 800be34:	42ac      	cmp	r4, r5
 800be36:	d101      	bne.n	800be3c <__sfputs_r+0x12>
 800be38:	2000      	movs	r0, #0
 800be3a:	e007      	b.n	800be4c <__sfputs_r+0x22>
 800be3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be40:	463a      	mov	r2, r7
 800be42:	4630      	mov	r0, r6
 800be44:	f7ff ffda 	bl	800bdfc <__sfputc_r>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d1f3      	bne.n	800be34 <__sfputs_r+0xa>
 800be4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be50 <_vfiprintf_r>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	460d      	mov	r5, r1
 800be56:	b09d      	sub	sp, #116	; 0x74
 800be58:	4614      	mov	r4, r2
 800be5a:	4698      	mov	r8, r3
 800be5c:	4606      	mov	r6, r0
 800be5e:	b118      	cbz	r0, 800be68 <_vfiprintf_r+0x18>
 800be60:	6983      	ldr	r3, [r0, #24]
 800be62:	b90b      	cbnz	r3, 800be68 <_vfiprintf_r+0x18>
 800be64:	f7fe fa76 	bl	800a354 <__sinit>
 800be68:	4b89      	ldr	r3, [pc, #548]	; (800c090 <_vfiprintf_r+0x240>)
 800be6a:	429d      	cmp	r5, r3
 800be6c:	d11b      	bne.n	800bea6 <_vfiprintf_r+0x56>
 800be6e:	6875      	ldr	r5, [r6, #4]
 800be70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be72:	07d9      	lsls	r1, r3, #31
 800be74:	d405      	bmi.n	800be82 <_vfiprintf_r+0x32>
 800be76:	89ab      	ldrh	r3, [r5, #12]
 800be78:	059a      	lsls	r2, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_vfiprintf_r+0x32>
 800be7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be7e:	f7fe fe7a 	bl	800ab76 <__retarget_lock_acquire_recursive>
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	071b      	lsls	r3, r3, #28
 800be86:	d501      	bpl.n	800be8c <_vfiprintf_r+0x3c>
 800be88:	692b      	ldr	r3, [r5, #16]
 800be8a:	b9eb      	cbnz	r3, 800bec8 <_vfiprintf_r+0x78>
 800be8c:	4629      	mov	r1, r5
 800be8e:	4630      	mov	r0, r6
 800be90:	f7fd fa50 	bl	8009334 <__swsetup_r>
 800be94:	b1c0      	cbz	r0, 800bec8 <_vfiprintf_r+0x78>
 800be96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be98:	07dc      	lsls	r4, r3, #31
 800be9a:	d50e      	bpl.n	800beba <_vfiprintf_r+0x6a>
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	b01d      	add	sp, #116	; 0x74
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	4b7b      	ldr	r3, [pc, #492]	; (800c094 <_vfiprintf_r+0x244>)
 800bea8:	429d      	cmp	r5, r3
 800beaa:	d101      	bne.n	800beb0 <_vfiprintf_r+0x60>
 800beac:	68b5      	ldr	r5, [r6, #8]
 800beae:	e7df      	b.n	800be70 <_vfiprintf_r+0x20>
 800beb0:	4b79      	ldr	r3, [pc, #484]	; (800c098 <_vfiprintf_r+0x248>)
 800beb2:	429d      	cmp	r5, r3
 800beb4:	bf08      	it	eq
 800beb6:	68f5      	ldreq	r5, [r6, #12]
 800beb8:	e7da      	b.n	800be70 <_vfiprintf_r+0x20>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	0598      	lsls	r0, r3, #22
 800bebe:	d4ed      	bmi.n	800be9c <_vfiprintf_r+0x4c>
 800bec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec2:	f7fe fe59 	bl	800ab78 <__retarget_lock_release_recursive>
 800bec6:	e7e9      	b.n	800be9c <_vfiprintf_r+0x4c>
 800bec8:	2300      	movs	r3, #0
 800beca:	9309      	str	r3, [sp, #36]	; 0x24
 800becc:	2320      	movs	r3, #32
 800bece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bed2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bed6:	2330      	movs	r3, #48	; 0x30
 800bed8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c09c <_vfiprintf_r+0x24c>
 800bedc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bee0:	f04f 0901 	mov.w	r9, #1
 800bee4:	4623      	mov	r3, r4
 800bee6:	469a      	mov	sl, r3
 800bee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beec:	b10a      	cbz	r2, 800bef2 <_vfiprintf_r+0xa2>
 800beee:	2a25      	cmp	r2, #37	; 0x25
 800bef0:	d1f9      	bne.n	800bee6 <_vfiprintf_r+0x96>
 800bef2:	ebba 0b04 	subs.w	fp, sl, r4
 800bef6:	d00b      	beq.n	800bf10 <_vfiprintf_r+0xc0>
 800bef8:	465b      	mov	r3, fp
 800befa:	4622      	mov	r2, r4
 800befc:	4629      	mov	r1, r5
 800befe:	4630      	mov	r0, r6
 800bf00:	f7ff ff93 	bl	800be2a <__sfputs_r>
 800bf04:	3001      	adds	r0, #1
 800bf06:	f000 80aa 	beq.w	800c05e <_vfiprintf_r+0x20e>
 800bf0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf0c:	445a      	add	r2, fp
 800bf0e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf10:	f89a 3000 	ldrb.w	r3, [sl]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 80a2 	beq.w	800c05e <_vfiprintf_r+0x20e>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf24:	f10a 0a01 	add.w	sl, sl, #1
 800bf28:	9304      	str	r3, [sp, #16]
 800bf2a:	9307      	str	r3, [sp, #28]
 800bf2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf30:	931a      	str	r3, [sp, #104]	; 0x68
 800bf32:	4654      	mov	r4, sl
 800bf34:	2205      	movs	r2, #5
 800bf36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3a:	4858      	ldr	r0, [pc, #352]	; (800c09c <_vfiprintf_r+0x24c>)
 800bf3c:	f7f4 f968 	bl	8000210 <memchr>
 800bf40:	9a04      	ldr	r2, [sp, #16]
 800bf42:	b9d8      	cbnz	r0, 800bf7c <_vfiprintf_r+0x12c>
 800bf44:	06d1      	lsls	r1, r2, #27
 800bf46:	bf44      	itt	mi
 800bf48:	2320      	movmi	r3, #32
 800bf4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf4e:	0713      	lsls	r3, r2, #28
 800bf50:	bf44      	itt	mi
 800bf52:	232b      	movmi	r3, #43	; 0x2b
 800bf54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf58:	f89a 3000 	ldrb.w	r3, [sl]
 800bf5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf5e:	d015      	beq.n	800bf8c <_vfiprintf_r+0x13c>
 800bf60:	9a07      	ldr	r2, [sp, #28]
 800bf62:	4654      	mov	r4, sl
 800bf64:	2000      	movs	r0, #0
 800bf66:	f04f 0c0a 	mov.w	ip, #10
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf70:	3b30      	subs	r3, #48	; 0x30
 800bf72:	2b09      	cmp	r3, #9
 800bf74:	d94e      	bls.n	800c014 <_vfiprintf_r+0x1c4>
 800bf76:	b1b0      	cbz	r0, 800bfa6 <_vfiprintf_r+0x156>
 800bf78:	9207      	str	r2, [sp, #28]
 800bf7a:	e014      	b.n	800bfa6 <_vfiprintf_r+0x156>
 800bf7c:	eba0 0308 	sub.w	r3, r0, r8
 800bf80:	fa09 f303 	lsl.w	r3, r9, r3
 800bf84:	4313      	orrs	r3, r2
 800bf86:	9304      	str	r3, [sp, #16]
 800bf88:	46a2      	mov	sl, r4
 800bf8a:	e7d2      	b.n	800bf32 <_vfiprintf_r+0xe2>
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	1d19      	adds	r1, r3, #4
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	9103      	str	r1, [sp, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	bfbb      	ittet	lt
 800bf98:	425b      	neglt	r3, r3
 800bf9a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf9e:	9307      	strge	r3, [sp, #28]
 800bfa0:	9307      	strlt	r3, [sp, #28]
 800bfa2:	bfb8      	it	lt
 800bfa4:	9204      	strlt	r2, [sp, #16]
 800bfa6:	7823      	ldrb	r3, [r4, #0]
 800bfa8:	2b2e      	cmp	r3, #46	; 0x2e
 800bfaa:	d10c      	bne.n	800bfc6 <_vfiprintf_r+0x176>
 800bfac:	7863      	ldrb	r3, [r4, #1]
 800bfae:	2b2a      	cmp	r3, #42	; 0x2a
 800bfb0:	d135      	bne.n	800c01e <_vfiprintf_r+0x1ce>
 800bfb2:	9b03      	ldr	r3, [sp, #12]
 800bfb4:	1d1a      	adds	r2, r3, #4
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	9203      	str	r2, [sp, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bfb8      	it	lt
 800bfbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfc2:	3402      	adds	r4, #2
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0ac <_vfiprintf_r+0x25c>
 800bfca:	7821      	ldrb	r1, [r4, #0]
 800bfcc:	2203      	movs	r2, #3
 800bfce:	4650      	mov	r0, sl
 800bfd0:	f7f4 f91e 	bl	8000210 <memchr>
 800bfd4:	b140      	cbz	r0, 800bfe8 <_vfiprintf_r+0x198>
 800bfd6:	2340      	movs	r3, #64	; 0x40
 800bfd8:	eba0 000a 	sub.w	r0, r0, sl
 800bfdc:	fa03 f000 	lsl.w	r0, r3, r0
 800bfe0:	9b04      	ldr	r3, [sp, #16]
 800bfe2:	4303      	orrs	r3, r0
 800bfe4:	3401      	adds	r4, #1
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfec:	482c      	ldr	r0, [pc, #176]	; (800c0a0 <_vfiprintf_r+0x250>)
 800bfee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bff2:	2206      	movs	r2, #6
 800bff4:	f7f4 f90c 	bl	8000210 <memchr>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d03f      	beq.n	800c07c <_vfiprintf_r+0x22c>
 800bffc:	4b29      	ldr	r3, [pc, #164]	; (800c0a4 <_vfiprintf_r+0x254>)
 800bffe:	bb1b      	cbnz	r3, 800c048 <_vfiprintf_r+0x1f8>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	3307      	adds	r3, #7
 800c004:	f023 0307 	bic.w	r3, r3, #7
 800c008:	3308      	adds	r3, #8
 800c00a:	9303      	str	r3, [sp, #12]
 800c00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c00e:	443b      	add	r3, r7
 800c010:	9309      	str	r3, [sp, #36]	; 0x24
 800c012:	e767      	b.n	800bee4 <_vfiprintf_r+0x94>
 800c014:	fb0c 3202 	mla	r2, ip, r2, r3
 800c018:	460c      	mov	r4, r1
 800c01a:	2001      	movs	r0, #1
 800c01c:	e7a5      	b.n	800bf6a <_vfiprintf_r+0x11a>
 800c01e:	2300      	movs	r3, #0
 800c020:	3401      	adds	r4, #1
 800c022:	9305      	str	r3, [sp, #20]
 800c024:	4619      	mov	r1, r3
 800c026:	f04f 0c0a 	mov.w	ip, #10
 800c02a:	4620      	mov	r0, r4
 800c02c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c030:	3a30      	subs	r2, #48	; 0x30
 800c032:	2a09      	cmp	r2, #9
 800c034:	d903      	bls.n	800c03e <_vfiprintf_r+0x1ee>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0c5      	beq.n	800bfc6 <_vfiprintf_r+0x176>
 800c03a:	9105      	str	r1, [sp, #20]
 800c03c:	e7c3      	b.n	800bfc6 <_vfiprintf_r+0x176>
 800c03e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c042:	4604      	mov	r4, r0
 800c044:	2301      	movs	r3, #1
 800c046:	e7f0      	b.n	800c02a <_vfiprintf_r+0x1da>
 800c048:	ab03      	add	r3, sp, #12
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	462a      	mov	r2, r5
 800c04e:	4b16      	ldr	r3, [pc, #88]	; (800c0a8 <_vfiprintf_r+0x258>)
 800c050:	a904      	add	r1, sp, #16
 800c052:	4630      	mov	r0, r6
 800c054:	f7fb fb56 	bl	8007704 <_printf_float>
 800c058:	4607      	mov	r7, r0
 800c05a:	1c78      	adds	r0, r7, #1
 800c05c:	d1d6      	bne.n	800c00c <_vfiprintf_r+0x1bc>
 800c05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c060:	07d9      	lsls	r1, r3, #31
 800c062:	d405      	bmi.n	800c070 <_vfiprintf_r+0x220>
 800c064:	89ab      	ldrh	r3, [r5, #12]
 800c066:	059a      	lsls	r2, r3, #22
 800c068:	d402      	bmi.n	800c070 <_vfiprintf_r+0x220>
 800c06a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06c:	f7fe fd84 	bl	800ab78 <__retarget_lock_release_recursive>
 800c070:	89ab      	ldrh	r3, [r5, #12]
 800c072:	065b      	lsls	r3, r3, #25
 800c074:	f53f af12 	bmi.w	800be9c <_vfiprintf_r+0x4c>
 800c078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c07a:	e711      	b.n	800bea0 <_vfiprintf_r+0x50>
 800c07c:	ab03      	add	r3, sp, #12
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	462a      	mov	r2, r5
 800c082:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <_vfiprintf_r+0x258>)
 800c084:	a904      	add	r1, sp, #16
 800c086:	4630      	mov	r0, r6
 800c088:	f7fb fde0 	bl	8007c4c <_printf_i>
 800c08c:	e7e4      	b.n	800c058 <_vfiprintf_r+0x208>
 800c08e:	bf00      	nop
 800c090:	0800e410 	.word	0x0800e410
 800c094:	0800e430 	.word	0x0800e430
 800c098:	0800e3f0 	.word	0x0800e3f0
 800c09c:	0800e62c 	.word	0x0800e62c
 800c0a0:	0800e636 	.word	0x0800e636
 800c0a4:	08007705 	.word	0x08007705
 800c0a8:	0800be2b 	.word	0x0800be2b
 800c0ac:	0800e632 	.word	0x0800e632

0800c0b0 <_scanf_chars>:
 800c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b4:	4615      	mov	r5, r2
 800c0b6:	688a      	ldr	r2, [r1, #8]
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	b932      	cbnz	r2, 800c0cc <_scanf_chars+0x1c>
 800c0be:	698a      	ldr	r2, [r1, #24]
 800c0c0:	2a00      	cmp	r2, #0
 800c0c2:	bf0c      	ite	eq
 800c0c4:	2201      	moveq	r2, #1
 800c0c6:	f04f 32ff 	movne.w	r2, #4294967295
 800c0ca:	608a      	str	r2, [r1, #8]
 800c0cc:	6822      	ldr	r2, [r4, #0]
 800c0ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c15c <_scanf_chars+0xac>
 800c0d2:	06d1      	lsls	r1, r2, #27
 800c0d4:	bf5f      	itttt	pl
 800c0d6:	681a      	ldrpl	r2, [r3, #0]
 800c0d8:	1d11      	addpl	r1, r2, #4
 800c0da:	6019      	strpl	r1, [r3, #0]
 800c0dc:	6816      	ldrpl	r6, [r2, #0]
 800c0de:	2700      	movs	r7, #0
 800c0e0:	69a0      	ldr	r0, [r4, #24]
 800c0e2:	b188      	cbz	r0, 800c108 <_scanf_chars+0x58>
 800c0e4:	2801      	cmp	r0, #1
 800c0e6:	d107      	bne.n	800c0f8 <_scanf_chars+0x48>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	781a      	ldrb	r2, [r3, #0]
 800c0ec:	6963      	ldr	r3, [r4, #20]
 800c0ee:	5c9b      	ldrb	r3, [r3, r2]
 800c0f0:	b953      	cbnz	r3, 800c108 <_scanf_chars+0x58>
 800c0f2:	bb27      	cbnz	r7, 800c13e <_scanf_chars+0x8e>
 800c0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f8:	2802      	cmp	r0, #2
 800c0fa:	d120      	bne.n	800c13e <_scanf_chars+0x8e>
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c104:	071b      	lsls	r3, r3, #28
 800c106:	d41a      	bmi.n	800c13e <_scanf_chars+0x8e>
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	06da      	lsls	r2, r3, #27
 800c10c:	bf5e      	ittt	pl
 800c10e:	682b      	ldrpl	r3, [r5, #0]
 800c110:	781b      	ldrbpl	r3, [r3, #0]
 800c112:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c116:	682a      	ldr	r2, [r5, #0]
 800c118:	686b      	ldr	r3, [r5, #4]
 800c11a:	3201      	adds	r2, #1
 800c11c:	602a      	str	r2, [r5, #0]
 800c11e:	68a2      	ldr	r2, [r4, #8]
 800c120:	3b01      	subs	r3, #1
 800c122:	3a01      	subs	r2, #1
 800c124:	606b      	str	r3, [r5, #4]
 800c126:	3701      	adds	r7, #1
 800c128:	60a2      	str	r2, [r4, #8]
 800c12a:	b142      	cbz	r2, 800c13e <_scanf_chars+0x8e>
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dcd7      	bgt.n	800c0e0 <_scanf_chars+0x30>
 800c130:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c134:	4629      	mov	r1, r5
 800c136:	4640      	mov	r0, r8
 800c138:	4798      	blx	r3
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d0d0      	beq.n	800c0e0 <_scanf_chars+0x30>
 800c13e:	6823      	ldr	r3, [r4, #0]
 800c140:	f013 0310 	ands.w	r3, r3, #16
 800c144:	d105      	bne.n	800c152 <_scanf_chars+0xa2>
 800c146:	68e2      	ldr	r2, [r4, #12]
 800c148:	3201      	adds	r2, #1
 800c14a:	60e2      	str	r2, [r4, #12]
 800c14c:	69a2      	ldr	r2, [r4, #24]
 800c14e:	b102      	cbz	r2, 800c152 <_scanf_chars+0xa2>
 800c150:	7033      	strb	r3, [r6, #0]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	441f      	add	r7, r3
 800c156:	6127      	str	r7, [r4, #16]
 800c158:	2000      	movs	r0, #0
 800c15a:	e7cb      	b.n	800c0f4 <_scanf_chars+0x44>
 800c15c:	0800e259 	.word	0x0800e259

0800c160 <_scanf_i>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	4698      	mov	r8, r3
 800c166:	4b74      	ldr	r3, [pc, #464]	; (800c338 <_scanf_i+0x1d8>)
 800c168:	460c      	mov	r4, r1
 800c16a:	4682      	mov	sl, r0
 800c16c:	4616      	mov	r6, r2
 800c16e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c172:	b087      	sub	sp, #28
 800c174:	ab03      	add	r3, sp, #12
 800c176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c17a:	4b70      	ldr	r3, [pc, #448]	; (800c33c <_scanf_i+0x1dc>)
 800c17c:	69a1      	ldr	r1, [r4, #24]
 800c17e:	4a70      	ldr	r2, [pc, #448]	; (800c340 <_scanf_i+0x1e0>)
 800c180:	2903      	cmp	r1, #3
 800c182:	bf18      	it	ne
 800c184:	461a      	movne	r2, r3
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	9201      	str	r2, [sp, #4]
 800c18a:	1e5a      	subs	r2, r3, #1
 800c18c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c190:	bf88      	it	hi
 800c192:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c196:	4627      	mov	r7, r4
 800c198:	bf82      	ittt	hi
 800c19a:	eb03 0905 	addhi.w	r9, r3, r5
 800c19e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1a2:	60a3      	strhi	r3, [r4, #8]
 800c1a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c1a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c1ac:	bf98      	it	ls
 800c1ae:	f04f 0900 	movls.w	r9, #0
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	463d      	mov	r5, r7
 800c1b6:	f04f 0b00 	mov.w	fp, #0
 800c1ba:	6831      	ldr	r1, [r6, #0]
 800c1bc:	ab03      	add	r3, sp, #12
 800c1be:	7809      	ldrb	r1, [r1, #0]
 800c1c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	f7f4 f823 	bl	8000210 <memchr>
 800c1ca:	b328      	cbz	r0, 800c218 <_scanf_i+0xb8>
 800c1cc:	f1bb 0f01 	cmp.w	fp, #1
 800c1d0:	d159      	bne.n	800c286 <_scanf_i+0x126>
 800c1d2:	6862      	ldr	r2, [r4, #4]
 800c1d4:	b92a      	cbnz	r2, 800c1e2 <_scanf_i+0x82>
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	2308      	movs	r3, #8
 800c1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1de:	6063      	str	r3, [r4, #4]
 800c1e0:	6022      	str	r2, [r4, #0]
 800c1e2:	6822      	ldr	r2, [r4, #0]
 800c1e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c1e8:	6022      	str	r2, [r4, #0]
 800c1ea:	68a2      	ldr	r2, [r4, #8]
 800c1ec:	1e51      	subs	r1, r2, #1
 800c1ee:	60a1      	str	r1, [r4, #8]
 800c1f0:	b192      	cbz	r2, 800c218 <_scanf_i+0xb8>
 800c1f2:	6832      	ldr	r2, [r6, #0]
 800c1f4:	1c51      	adds	r1, r2, #1
 800c1f6:	6031      	str	r1, [r6, #0]
 800c1f8:	7812      	ldrb	r2, [r2, #0]
 800c1fa:	f805 2b01 	strb.w	r2, [r5], #1
 800c1fe:	6872      	ldr	r2, [r6, #4]
 800c200:	3a01      	subs	r2, #1
 800c202:	2a00      	cmp	r2, #0
 800c204:	6072      	str	r2, [r6, #4]
 800c206:	dc07      	bgt.n	800c218 <_scanf_i+0xb8>
 800c208:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c20c:	4631      	mov	r1, r6
 800c20e:	4650      	mov	r0, sl
 800c210:	4790      	blx	r2
 800c212:	2800      	cmp	r0, #0
 800c214:	f040 8085 	bne.w	800c322 <_scanf_i+0x1c2>
 800c218:	f10b 0b01 	add.w	fp, fp, #1
 800c21c:	f1bb 0f03 	cmp.w	fp, #3
 800c220:	d1cb      	bne.n	800c1ba <_scanf_i+0x5a>
 800c222:	6863      	ldr	r3, [r4, #4]
 800c224:	b90b      	cbnz	r3, 800c22a <_scanf_i+0xca>
 800c226:	230a      	movs	r3, #10
 800c228:	6063      	str	r3, [r4, #4]
 800c22a:	6863      	ldr	r3, [r4, #4]
 800c22c:	4945      	ldr	r1, [pc, #276]	; (800c344 <_scanf_i+0x1e4>)
 800c22e:	6960      	ldr	r0, [r4, #20]
 800c230:	1ac9      	subs	r1, r1, r3
 800c232:	f000 f8b5 	bl	800c3a0 <__sccl>
 800c236:	f04f 0b00 	mov.w	fp, #0
 800c23a:	68a3      	ldr	r3, [r4, #8]
 800c23c:	6822      	ldr	r2, [r4, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d03d      	beq.n	800c2be <_scanf_i+0x15e>
 800c242:	6831      	ldr	r1, [r6, #0]
 800c244:	6960      	ldr	r0, [r4, #20]
 800c246:	f891 c000 	ldrb.w	ip, [r1]
 800c24a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c24e:	2800      	cmp	r0, #0
 800c250:	d035      	beq.n	800c2be <_scanf_i+0x15e>
 800c252:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c256:	d124      	bne.n	800c2a2 <_scanf_i+0x142>
 800c258:	0510      	lsls	r0, r2, #20
 800c25a:	d522      	bpl.n	800c2a2 <_scanf_i+0x142>
 800c25c:	f10b 0b01 	add.w	fp, fp, #1
 800c260:	f1b9 0f00 	cmp.w	r9, #0
 800c264:	d003      	beq.n	800c26e <_scanf_i+0x10e>
 800c266:	3301      	adds	r3, #1
 800c268:	f109 39ff 	add.w	r9, r9, #4294967295
 800c26c:	60a3      	str	r3, [r4, #8]
 800c26e:	6873      	ldr	r3, [r6, #4]
 800c270:	3b01      	subs	r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	6073      	str	r3, [r6, #4]
 800c276:	dd1b      	ble.n	800c2b0 <_scanf_i+0x150>
 800c278:	6833      	ldr	r3, [r6, #0]
 800c27a:	3301      	adds	r3, #1
 800c27c:	6033      	str	r3, [r6, #0]
 800c27e:	68a3      	ldr	r3, [r4, #8]
 800c280:	3b01      	subs	r3, #1
 800c282:	60a3      	str	r3, [r4, #8]
 800c284:	e7d9      	b.n	800c23a <_scanf_i+0xda>
 800c286:	f1bb 0f02 	cmp.w	fp, #2
 800c28a:	d1ae      	bne.n	800c1ea <_scanf_i+0x8a>
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c292:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c296:	d1bf      	bne.n	800c218 <_scanf_i+0xb8>
 800c298:	2310      	movs	r3, #16
 800c29a:	6063      	str	r3, [r4, #4]
 800c29c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2a0:	e7a2      	b.n	800c1e8 <_scanf_i+0x88>
 800c2a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c2a6:	6022      	str	r2, [r4, #0]
 800c2a8:	780b      	ldrb	r3, [r1, #0]
 800c2aa:	f805 3b01 	strb.w	r3, [r5], #1
 800c2ae:	e7de      	b.n	800c26e <_scanf_i+0x10e>
 800c2b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	4798      	blx	r3
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d0df      	beq.n	800c27e <_scanf_i+0x11e>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	05d9      	lsls	r1, r3, #23
 800c2c2:	d50d      	bpl.n	800c2e0 <_scanf_i+0x180>
 800c2c4:	42bd      	cmp	r5, r7
 800c2c6:	d909      	bls.n	800c2dc <_scanf_i+0x17c>
 800c2c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2d0:	4632      	mov	r2, r6
 800c2d2:	4650      	mov	r0, sl
 800c2d4:	4798      	blx	r3
 800c2d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c2da:	464d      	mov	r5, r9
 800c2dc:	42bd      	cmp	r5, r7
 800c2de:	d028      	beq.n	800c332 <_scanf_i+0x1d2>
 800c2e0:	6822      	ldr	r2, [r4, #0]
 800c2e2:	f012 0210 	ands.w	r2, r2, #16
 800c2e6:	d113      	bne.n	800c310 <_scanf_i+0x1b0>
 800c2e8:	702a      	strb	r2, [r5, #0]
 800c2ea:	6863      	ldr	r3, [r4, #4]
 800c2ec:	9e01      	ldr	r6, [sp, #4]
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	47b0      	blx	r6
 800c2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2f8:	6821      	ldr	r1, [r4, #0]
 800c2fa:	1d1a      	adds	r2, r3, #4
 800c2fc:	f8c8 2000 	str.w	r2, [r8]
 800c300:	f011 0f20 	tst.w	r1, #32
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	d00f      	beq.n	800c328 <_scanf_i+0x1c8>
 800c308:	6018      	str	r0, [r3, #0]
 800c30a:	68e3      	ldr	r3, [r4, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	60e3      	str	r3, [r4, #12]
 800c310:	1bed      	subs	r5, r5, r7
 800c312:	44ab      	add	fp, r5
 800c314:	6925      	ldr	r5, [r4, #16]
 800c316:	445d      	add	r5, fp
 800c318:	6125      	str	r5, [r4, #16]
 800c31a:	2000      	movs	r0, #0
 800c31c:	b007      	add	sp, #28
 800c31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c322:	f04f 0b00 	mov.w	fp, #0
 800c326:	e7ca      	b.n	800c2be <_scanf_i+0x15e>
 800c328:	07ca      	lsls	r2, r1, #31
 800c32a:	bf4c      	ite	mi
 800c32c:	8018      	strhmi	r0, [r3, #0]
 800c32e:	6018      	strpl	r0, [r3, #0]
 800c330:	e7eb      	b.n	800c30a <_scanf_i+0x1aa>
 800c332:	2001      	movs	r0, #1
 800c334:	e7f2      	b.n	800c31c <_scanf_i+0x1bc>
 800c336:	bf00      	nop
 800c338:	0800e1a0 	.word	0x0800e1a0
 800c33c:	0800c531 	.word	0x0800c531
 800c340:	08009269 	.word	0x08009269
 800c344:	0800e656 	.word	0x0800e656

0800c348 <_read_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4d07      	ldr	r5, [pc, #28]	; (800c368 <_read_r+0x20>)
 800c34c:	4604      	mov	r4, r0
 800c34e:	4608      	mov	r0, r1
 800c350:	4611      	mov	r1, r2
 800c352:	2200      	movs	r2, #0
 800c354:	602a      	str	r2, [r5, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	f7f5 fc4e 	bl	8001bf8 <_read>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_read_r+0x1e>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_read_r+0x1e>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	200017d0 	.word	0x200017d0
 800c36c:	00000000 	.word	0x00000000

0800c370 <nan>:
 800c370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c378 <nan+0x8>
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	00000000 	.word	0x00000000
 800c37c:	7ff80000 	.word	0x7ff80000

0800c380 <_sbrk_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	; (800c39c <_sbrk_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f5 fca2 	bl	8001cd4 <_sbrk>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_sbrk_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_sbrk_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	200017d0 	.word	0x200017d0

0800c3a0 <__sccl>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	780b      	ldrb	r3, [r1, #0]
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	2b5e      	cmp	r3, #94	; 0x5e
 800c3a8:	bf0b      	itete	eq
 800c3aa:	784b      	ldrbeq	r3, [r1, #1]
 800c3ac:	1c48      	addne	r0, r1, #1
 800c3ae:	1c88      	addeq	r0, r1, #2
 800c3b0:	2200      	movne	r2, #0
 800c3b2:	bf08      	it	eq
 800c3b4:	2201      	moveq	r2, #1
 800c3b6:	1e61      	subs	r1, r4, #1
 800c3b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c3bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c3c0:	42a9      	cmp	r1, r5
 800c3c2:	d1fb      	bne.n	800c3bc <__sccl+0x1c>
 800c3c4:	b90b      	cbnz	r3, 800c3ca <__sccl+0x2a>
 800c3c6:	3801      	subs	r0, #1
 800c3c8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ca:	f082 0101 	eor.w	r1, r2, #1
 800c3ce:	54e1      	strb	r1, [r4, r3]
 800c3d0:	1c42      	adds	r2, r0, #1
 800c3d2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c3d6:	2d2d      	cmp	r5, #45	; 0x2d
 800c3d8:	f102 36ff 	add.w	r6, r2, #4294967295
 800c3dc:	4610      	mov	r0, r2
 800c3de:	d006      	beq.n	800c3ee <__sccl+0x4e>
 800c3e0:	2d5d      	cmp	r5, #93	; 0x5d
 800c3e2:	d0f1      	beq.n	800c3c8 <__sccl+0x28>
 800c3e4:	b90d      	cbnz	r5, 800c3ea <__sccl+0x4a>
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	e7ee      	b.n	800c3c8 <__sccl+0x28>
 800c3ea:	462b      	mov	r3, r5
 800c3ec:	e7ef      	b.n	800c3ce <__sccl+0x2e>
 800c3ee:	7816      	ldrb	r6, [r2, #0]
 800c3f0:	2e5d      	cmp	r6, #93	; 0x5d
 800c3f2:	d0fa      	beq.n	800c3ea <__sccl+0x4a>
 800c3f4:	42b3      	cmp	r3, r6
 800c3f6:	dcf8      	bgt.n	800c3ea <__sccl+0x4a>
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	4286      	cmp	r6, r0
 800c3fe:	5421      	strb	r1, [r4, r0]
 800c400:	dcfb      	bgt.n	800c3fa <__sccl+0x5a>
 800c402:	43d8      	mvns	r0, r3
 800c404:	4430      	add	r0, r6
 800c406:	1c5d      	adds	r5, r3, #1
 800c408:	42b3      	cmp	r3, r6
 800c40a:	bfa8      	it	ge
 800c40c:	2000      	movge	r0, #0
 800c40e:	182b      	adds	r3, r5, r0
 800c410:	3202      	adds	r2, #2
 800c412:	e7de      	b.n	800c3d2 <__sccl+0x32>

0800c414 <strncmp>:
 800c414:	b510      	push	{r4, lr}
 800c416:	b16a      	cbz	r2, 800c434 <strncmp+0x20>
 800c418:	3901      	subs	r1, #1
 800c41a:	1884      	adds	r4, r0, r2
 800c41c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c420:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c424:	4293      	cmp	r3, r2
 800c426:	d103      	bne.n	800c430 <strncmp+0x1c>
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d001      	beq.n	800c430 <strncmp+0x1c>
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1f5      	bne.n	800c41c <strncmp+0x8>
 800c430:	1a98      	subs	r0, r3, r2
 800c432:	bd10      	pop	{r4, pc}
 800c434:	4610      	mov	r0, r2
 800c436:	e7fc      	b.n	800c432 <strncmp+0x1e>

0800c438 <_strtoul_l.isra.0>:
 800c438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c43c:	4e3b      	ldr	r6, [pc, #236]	; (800c52c <_strtoul_l.isra.0+0xf4>)
 800c43e:	4686      	mov	lr, r0
 800c440:	468c      	mov	ip, r1
 800c442:	4660      	mov	r0, ip
 800c444:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c448:	5da5      	ldrb	r5, [r4, r6]
 800c44a:	f015 0508 	ands.w	r5, r5, #8
 800c44e:	d1f8      	bne.n	800c442 <_strtoul_l.isra.0+0xa>
 800c450:	2c2d      	cmp	r4, #45	; 0x2d
 800c452:	d134      	bne.n	800c4be <_strtoul_l.isra.0+0x86>
 800c454:	f89c 4000 	ldrb.w	r4, [ip]
 800c458:	f04f 0801 	mov.w	r8, #1
 800c45c:	f100 0c02 	add.w	ip, r0, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d05e      	beq.n	800c522 <_strtoul_l.isra.0+0xea>
 800c464:	2b10      	cmp	r3, #16
 800c466:	d10c      	bne.n	800c482 <_strtoul_l.isra.0+0x4a>
 800c468:	2c30      	cmp	r4, #48	; 0x30
 800c46a:	d10a      	bne.n	800c482 <_strtoul_l.isra.0+0x4a>
 800c46c:	f89c 0000 	ldrb.w	r0, [ip]
 800c470:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c474:	2858      	cmp	r0, #88	; 0x58
 800c476:	d14f      	bne.n	800c518 <_strtoul_l.isra.0+0xe0>
 800c478:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c47c:	2310      	movs	r3, #16
 800c47e:	f10c 0c02 	add.w	ip, ip, #2
 800c482:	f04f 37ff 	mov.w	r7, #4294967295
 800c486:	2500      	movs	r5, #0
 800c488:	fbb7 f7f3 	udiv	r7, r7, r3
 800c48c:	fb03 f907 	mul.w	r9, r3, r7
 800c490:	ea6f 0909 	mvn.w	r9, r9
 800c494:	4628      	mov	r0, r5
 800c496:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c49a:	2e09      	cmp	r6, #9
 800c49c:	d818      	bhi.n	800c4d0 <_strtoul_l.isra.0+0x98>
 800c49e:	4634      	mov	r4, r6
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	dd24      	ble.n	800c4ee <_strtoul_l.isra.0+0xb6>
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	db1f      	blt.n	800c4e8 <_strtoul_l.isra.0+0xb0>
 800c4a8:	4287      	cmp	r7, r0
 800c4aa:	d31d      	bcc.n	800c4e8 <_strtoul_l.isra.0+0xb0>
 800c4ac:	d101      	bne.n	800c4b2 <_strtoul_l.isra.0+0x7a>
 800c4ae:	45a1      	cmp	r9, r4
 800c4b0:	db1a      	blt.n	800c4e8 <_strtoul_l.isra.0+0xb0>
 800c4b2:	fb00 4003 	mla	r0, r0, r3, r4
 800c4b6:	2501      	movs	r5, #1
 800c4b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c4bc:	e7eb      	b.n	800c496 <_strtoul_l.isra.0+0x5e>
 800c4be:	2c2b      	cmp	r4, #43	; 0x2b
 800c4c0:	bf08      	it	eq
 800c4c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c4c6:	46a8      	mov	r8, r5
 800c4c8:	bf08      	it	eq
 800c4ca:	f100 0c02 	addeq.w	ip, r0, #2
 800c4ce:	e7c7      	b.n	800c460 <_strtoul_l.isra.0+0x28>
 800c4d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c4d4:	2e19      	cmp	r6, #25
 800c4d6:	d801      	bhi.n	800c4dc <_strtoul_l.isra.0+0xa4>
 800c4d8:	3c37      	subs	r4, #55	; 0x37
 800c4da:	e7e1      	b.n	800c4a0 <_strtoul_l.isra.0+0x68>
 800c4dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c4e0:	2e19      	cmp	r6, #25
 800c4e2:	d804      	bhi.n	800c4ee <_strtoul_l.isra.0+0xb6>
 800c4e4:	3c57      	subs	r4, #87	; 0x57
 800c4e6:	e7db      	b.n	800c4a0 <_strtoul_l.isra.0+0x68>
 800c4e8:	f04f 35ff 	mov.w	r5, #4294967295
 800c4ec:	e7e4      	b.n	800c4b8 <_strtoul_l.isra.0+0x80>
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	da07      	bge.n	800c502 <_strtoul_l.isra.0+0xca>
 800c4f2:	2322      	movs	r3, #34	; 0x22
 800c4f4:	f8ce 3000 	str.w	r3, [lr]
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fc:	b942      	cbnz	r2, 800c510 <_strtoul_l.isra.0+0xd8>
 800c4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c502:	f1b8 0f00 	cmp.w	r8, #0
 800c506:	d000      	beq.n	800c50a <_strtoul_l.isra.0+0xd2>
 800c508:	4240      	negs	r0, r0
 800c50a:	2a00      	cmp	r2, #0
 800c50c:	d0f7      	beq.n	800c4fe <_strtoul_l.isra.0+0xc6>
 800c50e:	b10d      	cbz	r5, 800c514 <_strtoul_l.isra.0+0xdc>
 800c510:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c514:	6011      	str	r1, [r2, #0]
 800c516:	e7f2      	b.n	800c4fe <_strtoul_l.isra.0+0xc6>
 800c518:	2430      	movs	r4, #48	; 0x30
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1b1      	bne.n	800c482 <_strtoul_l.isra.0+0x4a>
 800c51e:	2308      	movs	r3, #8
 800c520:	e7af      	b.n	800c482 <_strtoul_l.isra.0+0x4a>
 800c522:	2c30      	cmp	r4, #48	; 0x30
 800c524:	d0a2      	beq.n	800c46c <_strtoul_l.isra.0+0x34>
 800c526:	230a      	movs	r3, #10
 800c528:	e7ab      	b.n	800c482 <_strtoul_l.isra.0+0x4a>
 800c52a:	bf00      	nop
 800c52c:	0800e259 	.word	0x0800e259

0800c530 <_strtoul_r>:
 800c530:	f7ff bf82 	b.w	800c438 <_strtoul_l.isra.0>

0800c534 <__submore>:
 800c534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c538:	460c      	mov	r4, r1
 800c53a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c540:	4299      	cmp	r1, r3
 800c542:	d11d      	bne.n	800c580 <__submore+0x4c>
 800c544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c548:	f7ff f8d0 	bl	800b6ec <_malloc_r>
 800c54c:	b918      	cbnz	r0, 800c556 <__submore+0x22>
 800c54e:	f04f 30ff 	mov.w	r0, #4294967295
 800c552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c55a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c55c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c560:	6360      	str	r0, [r4, #52]	; 0x34
 800c562:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c566:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c56a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c56e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c572:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c576:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c57a:	6020      	str	r0, [r4, #0]
 800c57c:	2000      	movs	r0, #0
 800c57e:	e7e8      	b.n	800c552 <__submore+0x1e>
 800c580:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c582:	0077      	lsls	r7, r6, #1
 800c584:	463a      	mov	r2, r7
 800c586:	f000 f895 	bl	800c6b4 <_realloc_r>
 800c58a:	4605      	mov	r5, r0
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d0de      	beq.n	800c54e <__submore+0x1a>
 800c590:	eb00 0806 	add.w	r8, r0, r6
 800c594:	4601      	mov	r1, r0
 800c596:	4632      	mov	r2, r6
 800c598:	4640      	mov	r0, r8
 800c59a:	f7fe fb7f 	bl	800ac9c <memcpy>
 800c59e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c5a2:	f8c4 8000 	str.w	r8, [r4]
 800c5a6:	e7e9      	b.n	800c57c <__submore+0x48>

0800c5a8 <__ascii_wctomb>:
 800c5a8:	b149      	cbz	r1, 800c5be <__ascii_wctomb+0x16>
 800c5aa:	2aff      	cmp	r2, #255	; 0xff
 800c5ac:	bf85      	ittet	hi
 800c5ae:	238a      	movhi	r3, #138	; 0x8a
 800c5b0:	6003      	strhi	r3, [r0, #0]
 800c5b2:	700a      	strbls	r2, [r1, #0]
 800c5b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5b8:	bf98      	it	ls
 800c5ba:	2001      	movls	r0, #1
 800c5bc:	4770      	bx	lr
 800c5be:	4608      	mov	r0, r1
 800c5c0:	4770      	bx	lr
	...

0800c5c4 <__assert_func>:
 800c5c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	4b09      	ldr	r3, [pc, #36]	; (800c5f0 <__assert_func+0x2c>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	68d8      	ldr	r0, [r3, #12]
 800c5d2:	b14c      	cbz	r4, 800c5e8 <__assert_func+0x24>
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <__assert_func+0x30>)
 800c5d6:	9100      	str	r1, [sp, #0]
 800c5d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5dc:	4906      	ldr	r1, [pc, #24]	; (800c5f8 <__assert_func+0x34>)
 800c5de:	462b      	mov	r3, r5
 800c5e0:	f000 f80e 	bl	800c600 <fiprintf>
 800c5e4:	f000 f88c 	bl	800c700 <abort>
 800c5e8:	4b04      	ldr	r3, [pc, #16]	; (800c5fc <__assert_func+0x38>)
 800c5ea:	461c      	mov	r4, r3
 800c5ec:	e7f3      	b.n	800c5d6 <__assert_func+0x12>
 800c5ee:	bf00      	nop
 800c5f0:	200000c4 	.word	0x200000c4
 800c5f4:	0800e658 	.word	0x0800e658
 800c5f8:	0800e665 	.word	0x0800e665
 800c5fc:	0800e693 	.word	0x0800e693

0800c600 <fiprintf>:
 800c600:	b40e      	push	{r1, r2, r3}
 800c602:	b503      	push	{r0, r1, lr}
 800c604:	4601      	mov	r1, r0
 800c606:	ab03      	add	r3, sp, #12
 800c608:	4805      	ldr	r0, [pc, #20]	; (800c620 <fiprintf+0x20>)
 800c60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c60e:	6800      	ldr	r0, [r0, #0]
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	f7ff fc1d 	bl	800be50 <_vfiprintf_r>
 800c616:	b002      	add	sp, #8
 800c618:	f85d eb04 	ldr.w	lr, [sp], #4
 800c61c:	b003      	add	sp, #12
 800c61e:	4770      	bx	lr
 800c620:	200000c4 	.word	0x200000c4

0800c624 <_fstat_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4d07      	ldr	r5, [pc, #28]	; (800c644 <_fstat_r+0x20>)
 800c628:	2300      	movs	r3, #0
 800c62a:	4604      	mov	r4, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	4611      	mov	r1, r2
 800c630:	602b      	str	r3, [r5, #0]
 800c632:	f7f5 fb26 	bl	8001c82 <_fstat>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	d102      	bne.n	800c640 <_fstat_r+0x1c>
 800c63a:	682b      	ldr	r3, [r5, #0]
 800c63c:	b103      	cbz	r3, 800c640 <_fstat_r+0x1c>
 800c63e:	6023      	str	r3, [r4, #0]
 800c640:	bd38      	pop	{r3, r4, r5, pc}
 800c642:	bf00      	nop
 800c644:	200017d0 	.word	0x200017d0

0800c648 <_isatty_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4d06      	ldr	r5, [pc, #24]	; (800c664 <_isatty_r+0x1c>)
 800c64c:	2300      	movs	r3, #0
 800c64e:	4604      	mov	r4, r0
 800c650:	4608      	mov	r0, r1
 800c652:	602b      	str	r3, [r5, #0]
 800c654:	f7f5 fb25 	bl	8001ca2 <_isatty>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	d102      	bne.n	800c662 <_isatty_r+0x1a>
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	b103      	cbz	r3, 800c662 <_isatty_r+0x1a>
 800c660:	6023      	str	r3, [r4, #0]
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	200017d0 	.word	0x200017d0

0800c668 <memmove>:
 800c668:	4288      	cmp	r0, r1
 800c66a:	b510      	push	{r4, lr}
 800c66c:	eb01 0402 	add.w	r4, r1, r2
 800c670:	d902      	bls.n	800c678 <memmove+0x10>
 800c672:	4284      	cmp	r4, r0
 800c674:	4623      	mov	r3, r4
 800c676:	d807      	bhi.n	800c688 <memmove+0x20>
 800c678:	1e43      	subs	r3, r0, #1
 800c67a:	42a1      	cmp	r1, r4
 800c67c:	d008      	beq.n	800c690 <memmove+0x28>
 800c67e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c682:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c686:	e7f8      	b.n	800c67a <memmove+0x12>
 800c688:	4402      	add	r2, r0
 800c68a:	4601      	mov	r1, r0
 800c68c:	428a      	cmp	r2, r1
 800c68e:	d100      	bne.n	800c692 <memmove+0x2a>
 800c690:	bd10      	pop	{r4, pc}
 800c692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c69a:	e7f7      	b.n	800c68c <memmove+0x24>

0800c69c <__malloc_lock>:
 800c69c:	4801      	ldr	r0, [pc, #4]	; (800c6a4 <__malloc_lock+0x8>)
 800c69e:	f7fe ba6a 	b.w	800ab76 <__retarget_lock_acquire_recursive>
 800c6a2:	bf00      	nop
 800c6a4:	200017c8 	.word	0x200017c8

0800c6a8 <__malloc_unlock>:
 800c6a8:	4801      	ldr	r0, [pc, #4]	; (800c6b0 <__malloc_unlock+0x8>)
 800c6aa:	f7fe ba65 	b.w	800ab78 <__retarget_lock_release_recursive>
 800c6ae:	bf00      	nop
 800c6b0:	200017c8 	.word	0x200017c8

0800c6b4 <_realloc_r>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	460e      	mov	r6, r1
 800c6bc:	b921      	cbnz	r1, 800c6c8 <_realloc_r+0x14>
 800c6be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	f7ff b812 	b.w	800b6ec <_malloc_r>
 800c6c8:	b922      	cbnz	r2, 800c6d4 <_realloc_r+0x20>
 800c6ca:	f7fe ffbf 	bl	800b64c <_free_r>
 800c6ce:	4625      	mov	r5, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d4:	f000 f81b 	bl	800c70e <_malloc_usable_size_r>
 800c6d8:	42a0      	cmp	r0, r4
 800c6da:	d20f      	bcs.n	800c6fc <_realloc_r+0x48>
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f7ff f804 	bl	800b6ec <_malloc_r>
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d0f2      	beq.n	800c6d0 <_realloc_r+0x1c>
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	f7fe fad5 	bl	800ac9c <memcpy>
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f7fe ffa9 	bl	800b64c <_free_r>
 800c6fa:	e7e9      	b.n	800c6d0 <_realloc_r+0x1c>
 800c6fc:	4635      	mov	r5, r6
 800c6fe:	e7e7      	b.n	800c6d0 <_realloc_r+0x1c>

0800c700 <abort>:
 800c700:	b508      	push	{r3, lr}
 800c702:	2006      	movs	r0, #6
 800c704:	f000 f834 	bl	800c770 <raise>
 800c708:	2001      	movs	r0, #1
 800c70a:	f7f5 fa6b 	bl	8001be4 <_exit>

0800c70e <_malloc_usable_size_r>:
 800c70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c712:	1f18      	subs	r0, r3, #4
 800c714:	2b00      	cmp	r3, #0
 800c716:	bfbc      	itt	lt
 800c718:	580b      	ldrlt	r3, [r1, r0]
 800c71a:	18c0      	addlt	r0, r0, r3
 800c71c:	4770      	bx	lr

0800c71e <_raise_r>:
 800c71e:	291f      	cmp	r1, #31
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4604      	mov	r4, r0
 800c724:	460d      	mov	r5, r1
 800c726:	d904      	bls.n	800c732 <_raise_r+0x14>
 800c728:	2316      	movs	r3, #22
 800c72a:	6003      	str	r3, [r0, #0]
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c734:	b112      	cbz	r2, 800c73c <_raise_r+0x1e>
 800c736:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c73a:	b94b      	cbnz	r3, 800c750 <_raise_r+0x32>
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 f831 	bl	800c7a4 <_getpid_r>
 800c742:	462a      	mov	r2, r5
 800c744:	4601      	mov	r1, r0
 800c746:	4620      	mov	r0, r4
 800c748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74c:	f000 b818 	b.w	800c780 <_kill_r>
 800c750:	2b01      	cmp	r3, #1
 800c752:	d00a      	beq.n	800c76a <_raise_r+0x4c>
 800c754:	1c59      	adds	r1, r3, #1
 800c756:	d103      	bne.n	800c760 <_raise_r+0x42>
 800c758:	2316      	movs	r3, #22
 800c75a:	6003      	str	r3, [r0, #0]
 800c75c:	2001      	movs	r0, #1
 800c75e:	e7e7      	b.n	800c730 <_raise_r+0x12>
 800c760:	2400      	movs	r4, #0
 800c762:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c766:	4628      	mov	r0, r5
 800c768:	4798      	blx	r3
 800c76a:	2000      	movs	r0, #0
 800c76c:	e7e0      	b.n	800c730 <_raise_r+0x12>
	...

0800c770 <raise>:
 800c770:	4b02      	ldr	r3, [pc, #8]	; (800c77c <raise+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f7ff bfd2 	b.w	800c71e <_raise_r>
 800c77a:	bf00      	nop
 800c77c:	200000c4 	.word	0x200000c4

0800c780 <_kill_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	; (800c7a0 <_kill_r+0x20>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	4611      	mov	r1, r2
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	f7f5 fa19 	bl	8001bc4 <_kill>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	d102      	bne.n	800c79c <_kill_r+0x1c>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	b103      	cbz	r3, 800c79c <_kill_r+0x1c>
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	bd38      	pop	{r3, r4, r5, pc}
 800c79e:	bf00      	nop
 800c7a0:	200017d0 	.word	0x200017d0

0800c7a4 <_getpid_r>:
 800c7a4:	f7f5 ba06 	b.w	8001bb4 <_getpid>

0800c7a8 <cosf>:
 800c7a8:	ee10 3a10 	vmov	r3, s0
 800c7ac:	b507      	push	{r0, r1, r2, lr}
 800c7ae:	4a1c      	ldr	r2, [pc, #112]	; (800c820 <cosf+0x78>)
 800c7b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	dc04      	bgt.n	800c7c2 <cosf+0x1a>
 800c7b8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800c824 <cosf+0x7c>
 800c7bc:	f000 ff1c 	bl	800d5f8 <__kernel_cosf>
 800c7c0:	e004      	b.n	800c7cc <cosf+0x24>
 800c7c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7c6:	db04      	blt.n	800c7d2 <cosf+0x2a>
 800c7c8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c7cc:	b003      	add	sp, #12
 800c7ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7d2:	4668      	mov	r0, sp
 800c7d4:	f000 fdd0 	bl	800d378 <__ieee754_rem_pio2f>
 800c7d8:	f000 0003 	and.w	r0, r0, #3
 800c7dc:	2801      	cmp	r0, #1
 800c7de:	d007      	beq.n	800c7f0 <cosf+0x48>
 800c7e0:	2802      	cmp	r0, #2
 800c7e2:	d00e      	beq.n	800c802 <cosf+0x5a>
 800c7e4:	b9a0      	cbnz	r0, 800c810 <cosf+0x68>
 800c7e6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7ea:	ed9d 0a00 	vldr	s0, [sp]
 800c7ee:	e7e5      	b.n	800c7bc <cosf+0x14>
 800c7f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7f4:	ed9d 0a00 	vldr	s0, [sp]
 800c7f8:	f001 f9e8 	bl	800dbcc <__kernel_sinf>
 800c7fc:	eeb1 0a40 	vneg.f32	s0, s0
 800c800:	e7e4      	b.n	800c7cc <cosf+0x24>
 800c802:	eddd 0a01 	vldr	s1, [sp, #4]
 800c806:	ed9d 0a00 	vldr	s0, [sp]
 800c80a:	f000 fef5 	bl	800d5f8 <__kernel_cosf>
 800c80e:	e7f5      	b.n	800c7fc <cosf+0x54>
 800c810:	eddd 0a01 	vldr	s1, [sp, #4]
 800c814:	ed9d 0a00 	vldr	s0, [sp]
 800c818:	2001      	movs	r0, #1
 800c81a:	f001 f9d7 	bl	800dbcc <__kernel_sinf>
 800c81e:	e7d5      	b.n	800c7cc <cosf+0x24>
 800c820:	3f490fd8 	.word	0x3f490fd8
 800c824:	00000000 	.word	0x00000000

0800c828 <fmaxf>:
 800c828:	b508      	push	{r3, lr}
 800c82a:	ed2d 8b02 	vpush	{d8}
 800c82e:	eeb0 8a40 	vmov.f32	s16, s0
 800c832:	eef0 8a60 	vmov.f32	s17, s1
 800c836:	f000 f813 	bl	800c860 <__fpclassifyf>
 800c83a:	b148      	cbz	r0, 800c850 <fmaxf+0x28>
 800c83c:	eeb0 0a68 	vmov.f32	s0, s17
 800c840:	f000 f80e 	bl	800c860 <__fpclassifyf>
 800c844:	b130      	cbz	r0, 800c854 <fmaxf+0x2c>
 800c846:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84e:	dc01      	bgt.n	800c854 <fmaxf+0x2c>
 800c850:	eeb0 8a68 	vmov.f32	s16, s17
 800c854:	eeb0 0a48 	vmov.f32	s0, s16
 800c858:	ecbd 8b02 	vpop	{d8}
 800c85c:	bd08      	pop	{r3, pc}
	...

0800c860 <__fpclassifyf>:
 800c860:	ee10 3a10 	vmov	r3, s0
 800c864:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800c868:	d00d      	beq.n	800c886 <__fpclassifyf+0x26>
 800c86a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800c86e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c872:	d30a      	bcc.n	800c88a <__fpclassifyf+0x2a>
 800c874:	4b07      	ldr	r3, [pc, #28]	; (800c894 <__fpclassifyf+0x34>)
 800c876:	1e42      	subs	r2, r0, #1
 800c878:	429a      	cmp	r2, r3
 800c87a:	d908      	bls.n	800c88e <__fpclassifyf+0x2e>
 800c87c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800c880:	4258      	negs	r0, r3
 800c882:	4158      	adcs	r0, r3
 800c884:	4770      	bx	lr
 800c886:	2002      	movs	r0, #2
 800c888:	4770      	bx	lr
 800c88a:	2004      	movs	r0, #4
 800c88c:	4770      	bx	lr
 800c88e:	2003      	movs	r0, #3
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	007ffffe 	.word	0x007ffffe

0800c898 <roundf>:
 800c898:	ee10 0a10 	vmov	r0, s0
 800c89c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c8a0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c8a4:	2a16      	cmp	r2, #22
 800c8a6:	dc15      	bgt.n	800c8d4 <roundf+0x3c>
 800c8a8:	2a00      	cmp	r2, #0
 800c8aa:	da08      	bge.n	800c8be <roundf+0x26>
 800c8ac:	3201      	adds	r2, #1
 800c8ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c8b2:	d101      	bne.n	800c8b8 <roundf+0x20>
 800c8b4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c8b8:	ee00 3a10 	vmov	s0, r3
 800c8bc:	4770      	bx	lr
 800c8be:	4908      	ldr	r1, [pc, #32]	; (800c8e0 <roundf+0x48>)
 800c8c0:	4111      	asrs	r1, r2
 800c8c2:	4208      	tst	r0, r1
 800c8c4:	d0fa      	beq.n	800c8bc <roundf+0x24>
 800c8c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c8ca:	4113      	asrs	r3, r2
 800c8cc:	4403      	add	r3, r0
 800c8ce:	ea23 0301 	bic.w	r3, r3, r1
 800c8d2:	e7f1      	b.n	800c8b8 <roundf+0x20>
 800c8d4:	2a80      	cmp	r2, #128	; 0x80
 800c8d6:	d1f1      	bne.n	800c8bc <roundf+0x24>
 800c8d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	007fffff 	.word	0x007fffff

0800c8e4 <sinf>:
 800c8e4:	ee10 3a10 	vmov	r3, s0
 800c8e8:	b507      	push	{r0, r1, r2, lr}
 800c8ea:	4a1d      	ldr	r2, [pc, #116]	; (800c960 <sinf+0x7c>)
 800c8ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	dc05      	bgt.n	800c900 <sinf+0x1c>
 800c8f4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800c964 <sinf+0x80>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	f001 f967 	bl	800dbcc <__kernel_sinf>
 800c8fe:	e004      	b.n	800c90a <sinf+0x26>
 800c900:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c904:	db04      	blt.n	800c910 <sinf+0x2c>
 800c906:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c90a:	b003      	add	sp, #12
 800c90c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c910:	4668      	mov	r0, sp
 800c912:	f000 fd31 	bl	800d378 <__ieee754_rem_pio2f>
 800c916:	f000 0003 	and.w	r0, r0, #3
 800c91a:	2801      	cmp	r0, #1
 800c91c:	d008      	beq.n	800c930 <sinf+0x4c>
 800c91e:	2802      	cmp	r0, #2
 800c920:	d00d      	beq.n	800c93e <sinf+0x5a>
 800c922:	b9b0      	cbnz	r0, 800c952 <sinf+0x6e>
 800c924:	eddd 0a01 	vldr	s1, [sp, #4]
 800c928:	ed9d 0a00 	vldr	s0, [sp]
 800c92c:	2001      	movs	r0, #1
 800c92e:	e7e4      	b.n	800c8fa <sinf+0x16>
 800c930:	eddd 0a01 	vldr	s1, [sp, #4]
 800c934:	ed9d 0a00 	vldr	s0, [sp]
 800c938:	f000 fe5e 	bl	800d5f8 <__kernel_cosf>
 800c93c:	e7e5      	b.n	800c90a <sinf+0x26>
 800c93e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c942:	ed9d 0a00 	vldr	s0, [sp]
 800c946:	2001      	movs	r0, #1
 800c948:	f001 f940 	bl	800dbcc <__kernel_sinf>
 800c94c:	eeb1 0a40 	vneg.f32	s0, s0
 800c950:	e7db      	b.n	800c90a <sinf+0x26>
 800c952:	eddd 0a01 	vldr	s1, [sp, #4]
 800c956:	ed9d 0a00 	vldr	s0, [sp]
 800c95a:	f000 fe4d 	bl	800d5f8 <__kernel_cosf>
 800c95e:	e7f5      	b.n	800c94c <sinf+0x68>
 800c960:	3f490fd8 	.word	0x3f490fd8
 800c964:	00000000 	.word	0x00000000

0800c968 <sqrt>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	ed2d 8b02 	vpush	{d8}
 800c96e:	ec55 4b10 	vmov	r4, r5, d0
 800c972:	f000 f8ed 	bl	800cb50 <__ieee754_sqrt>
 800c976:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <sqrt+0x64>)
 800c978:	eeb0 8a40 	vmov.f32	s16, s0
 800c97c:	eef0 8a60 	vmov.f32	s17, s1
 800c980:	f993 3000 	ldrsb.w	r3, [r3]
 800c984:	3301      	adds	r3, #1
 800c986:	d019      	beq.n	800c9bc <sqrt+0x54>
 800c988:	4622      	mov	r2, r4
 800c98a:	462b      	mov	r3, r5
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	f7f4 f8e4 	bl	8000b5c <__aeabi_dcmpun>
 800c994:	b990      	cbnz	r0, 800c9bc <sqrt+0x54>
 800c996:	2200      	movs	r2, #0
 800c998:	2300      	movs	r3, #0
 800c99a:	4620      	mov	r0, r4
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7f4 f8b5 	bl	8000b0c <__aeabi_dcmplt>
 800c9a2:	b158      	cbz	r0, 800c9bc <sqrt+0x54>
 800c9a4:	f7fa fddc 	bl	8007560 <__errno>
 800c9a8:	2321      	movs	r3, #33	; 0x21
 800c9aa:	6003      	str	r3, [r0, #0]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	f7f3 ff62 	bl	800087c <__aeabi_ddiv>
 800c9b8:	ec41 0b18 	vmov	d8, r0, r1
 800c9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c9c0:	eef0 0a68 	vmov.f32	s1, s17
 800c9c4:	ecbd 8b02 	vpop	{d8}
 800c9c8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20000298 	.word	0x20000298

0800c9d0 <atan2f>:
 800c9d0:	f000 b972 	b.w	800ccb8 <__ieee754_atan2f>

0800c9d4 <powf>:
 800c9d4:	b508      	push	{r3, lr}
 800c9d6:	ed2d 8b04 	vpush	{d8-d9}
 800c9da:	eeb0 9a40 	vmov.f32	s18, s0
 800c9de:	eef0 8a60 	vmov.f32	s17, s1
 800c9e2:	f000 fa09 	bl	800cdf8 <__ieee754_powf>
 800c9e6:	4b43      	ldr	r3, [pc, #268]	; (800caf4 <powf+0x120>)
 800c9e8:	f993 3000 	ldrsb.w	r3, [r3]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c9f2:	d012      	beq.n	800ca1a <powf+0x46>
 800c9f4:	eef4 8a68 	vcmp.f32	s17, s17
 800c9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9fc:	d60d      	bvs.n	800ca1a <powf+0x46>
 800c9fe:	eeb4 9a49 	vcmp.f32	s18, s18
 800ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca06:	d70d      	bvc.n	800ca24 <powf+0x50>
 800ca08:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ca0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca14:	bf08      	it	eq
 800ca16:	eeb0 8a67 	vmoveq.f32	s16, s15
 800ca1a:	eeb0 0a48 	vmov.f32	s0, s16
 800ca1e:	ecbd 8b04 	vpop	{d8-d9}
 800ca22:	bd08      	pop	{r3, pc}
 800ca24:	eddf 9a34 	vldr	s19, [pc, #208]	; 800caf8 <powf+0x124>
 800ca28:	eeb4 9a69 	vcmp.f32	s18, s19
 800ca2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca30:	d116      	bne.n	800ca60 <powf+0x8c>
 800ca32:	eef4 8a69 	vcmp.f32	s17, s19
 800ca36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca3a:	d057      	beq.n	800caec <powf+0x118>
 800ca3c:	eeb0 0a68 	vmov.f32	s0, s17
 800ca40:	f001 f9e7 	bl	800de12 <finitef>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d0e8      	beq.n	800ca1a <powf+0x46>
 800ca48:	eef4 8ae9 	vcmpe.f32	s17, s19
 800ca4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca50:	d5e3      	bpl.n	800ca1a <powf+0x46>
 800ca52:	f7fa fd85 	bl	8007560 <__errno>
 800ca56:	2321      	movs	r3, #33	; 0x21
 800ca58:	6003      	str	r3, [r0, #0]
 800ca5a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800cafc <powf+0x128>
 800ca5e:	e7dc      	b.n	800ca1a <powf+0x46>
 800ca60:	f001 f9d7 	bl	800de12 <finitef>
 800ca64:	bb50      	cbnz	r0, 800cabc <powf+0xe8>
 800ca66:	eeb0 0a49 	vmov.f32	s0, s18
 800ca6a:	f001 f9d2 	bl	800de12 <finitef>
 800ca6e:	b328      	cbz	r0, 800cabc <powf+0xe8>
 800ca70:	eeb0 0a68 	vmov.f32	s0, s17
 800ca74:	f001 f9cd 	bl	800de12 <finitef>
 800ca78:	b300      	cbz	r0, 800cabc <powf+0xe8>
 800ca7a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca82:	d706      	bvc.n	800ca92 <powf+0xbe>
 800ca84:	f7fa fd6c 	bl	8007560 <__errno>
 800ca88:	2321      	movs	r3, #33	; 0x21
 800ca8a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800ca8e:	6003      	str	r3, [r0, #0]
 800ca90:	e7c3      	b.n	800ca1a <powf+0x46>
 800ca92:	f7fa fd65 	bl	8007560 <__errno>
 800ca96:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800ca9a:	2322      	movs	r3, #34	; 0x22
 800ca9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa0:	6003      	str	r3, [r0, #0]
 800caa2:	d508      	bpl.n	800cab6 <powf+0xe2>
 800caa4:	eeb0 0a68 	vmov.f32	s0, s17
 800caa8:	f001 fa02 	bl	800deb0 <rintf>
 800caac:	eeb4 0a68 	vcmp.f32	s0, s17
 800cab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab4:	d1d1      	bne.n	800ca5a <powf+0x86>
 800cab6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800cb00 <powf+0x12c>
 800caba:	e7ae      	b.n	800ca1a <powf+0x46>
 800cabc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac4:	d1a9      	bne.n	800ca1a <powf+0x46>
 800cac6:	eeb0 0a49 	vmov.f32	s0, s18
 800caca:	f001 f9a2 	bl	800de12 <finitef>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0a3      	beq.n	800ca1a <powf+0x46>
 800cad2:	eeb0 0a68 	vmov.f32	s0, s17
 800cad6:	f001 f99c 	bl	800de12 <finitef>
 800cada:	2800      	cmp	r0, #0
 800cadc:	d09d      	beq.n	800ca1a <powf+0x46>
 800cade:	f7fa fd3f 	bl	8007560 <__errno>
 800cae2:	2322      	movs	r3, #34	; 0x22
 800cae4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800caf8 <powf+0x124>
 800cae8:	6003      	str	r3, [r0, #0]
 800caea:	e796      	b.n	800ca1a <powf+0x46>
 800caec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800caf0:	e793      	b.n	800ca1a <powf+0x46>
 800caf2:	bf00      	nop
 800caf4:	20000298 	.word	0x20000298
 800caf8:	00000000 	.word	0x00000000
 800cafc:	ff800000 	.word	0xff800000
 800cb00:	7f800000 	.word	0x7f800000

0800cb04 <sqrtf>:
 800cb04:	b508      	push	{r3, lr}
 800cb06:	ed2d 8b02 	vpush	{d8}
 800cb0a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb0e:	f000 fd6f 	bl	800d5f0 <__ieee754_sqrtf>
 800cb12:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <sqrtf+0x44>)
 800cb14:	f993 3000 	ldrsb.w	r3, [r3]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	d011      	beq.n	800cb40 <sqrtf+0x3c>
 800cb1c:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb24:	d60c      	bvs.n	800cb40 <sqrtf+0x3c>
 800cb26:	eddf 8a09 	vldr	s17, [pc, #36]	; 800cb4c <sqrtf+0x48>
 800cb2a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb32:	d505      	bpl.n	800cb40 <sqrtf+0x3c>
 800cb34:	f7fa fd14 	bl	8007560 <__errno>
 800cb38:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cb3c:	2321      	movs	r3, #33	; 0x21
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	ecbd 8b02 	vpop	{d8}
 800cb44:	bd08      	pop	{r3, pc}
 800cb46:	bf00      	nop
 800cb48:	20000298 	.word	0x20000298
 800cb4c:	00000000 	.word	0x00000000

0800cb50 <__ieee754_sqrt>:
 800cb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb54:	ec55 4b10 	vmov	r4, r5, d0
 800cb58:	4e56      	ldr	r6, [pc, #344]	; (800ccb4 <__ieee754_sqrt+0x164>)
 800cb5a:	43ae      	bics	r6, r5
 800cb5c:	ee10 0a10 	vmov	r0, s0
 800cb60:	ee10 3a10 	vmov	r3, s0
 800cb64:	4629      	mov	r1, r5
 800cb66:	462a      	mov	r2, r5
 800cb68:	d110      	bne.n	800cb8c <__ieee754_sqrt+0x3c>
 800cb6a:	ee10 2a10 	vmov	r2, s0
 800cb6e:	462b      	mov	r3, r5
 800cb70:	f7f3 fd5a 	bl	8000628 <__aeabi_dmul>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4620      	mov	r0, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7f3 fb9e 	bl	80002bc <__adddf3>
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	ec45 4b10 	vmov	d0, r4, r5
 800cb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	dc10      	bgt.n	800cbb2 <__ieee754_sqrt+0x62>
 800cb90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb94:	4330      	orrs	r0, r6
 800cb96:	d0f5      	beq.n	800cb84 <__ieee754_sqrt+0x34>
 800cb98:	b15d      	cbz	r5, 800cbb2 <__ieee754_sqrt+0x62>
 800cb9a:	ee10 2a10 	vmov	r2, s0
 800cb9e:	462b      	mov	r3, r5
 800cba0:	ee10 0a10 	vmov	r0, s0
 800cba4:	f7f3 fb88 	bl	80002b8 <__aeabi_dsub>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	f7f3 fe66 	bl	800087c <__aeabi_ddiv>
 800cbb0:	e7e6      	b.n	800cb80 <__ieee754_sqrt+0x30>
 800cbb2:	1509      	asrs	r1, r1, #20
 800cbb4:	d076      	beq.n	800cca4 <__ieee754_sqrt+0x154>
 800cbb6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cbba:	07ce      	lsls	r6, r1, #31
 800cbbc:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cbc0:	bf5e      	ittt	pl
 800cbc2:	0fda      	lsrpl	r2, r3, #31
 800cbc4:	005b      	lslpl	r3, r3, #1
 800cbc6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cbca:	0fda      	lsrs	r2, r3, #31
 800cbcc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cbd0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	106d      	asrs	r5, r5, #1
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	f04f 0e16 	mov.w	lr, #22
 800cbde:	4684      	mov	ip, r0
 800cbe0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbe4:	eb0c 0401 	add.w	r4, ip, r1
 800cbe8:	4294      	cmp	r4, r2
 800cbea:	bfde      	ittt	le
 800cbec:	1b12      	suble	r2, r2, r4
 800cbee:	eb04 0c01 	addle.w	ip, r4, r1
 800cbf2:	1840      	addle	r0, r0, r1
 800cbf4:	0052      	lsls	r2, r2, #1
 800cbf6:	f1be 0e01 	subs.w	lr, lr, #1
 800cbfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbfe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cc02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc06:	d1ed      	bne.n	800cbe4 <__ieee754_sqrt+0x94>
 800cc08:	4671      	mov	r1, lr
 800cc0a:	2720      	movs	r7, #32
 800cc0c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cc10:	4562      	cmp	r2, ip
 800cc12:	eb04 060e 	add.w	r6, r4, lr
 800cc16:	dc02      	bgt.n	800cc1e <__ieee754_sqrt+0xce>
 800cc18:	d113      	bne.n	800cc42 <__ieee754_sqrt+0xf2>
 800cc1a:	429e      	cmp	r6, r3
 800cc1c:	d811      	bhi.n	800cc42 <__ieee754_sqrt+0xf2>
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	eb06 0e04 	add.w	lr, r6, r4
 800cc24:	da43      	bge.n	800ccae <__ieee754_sqrt+0x15e>
 800cc26:	f1be 0f00 	cmp.w	lr, #0
 800cc2a:	db40      	blt.n	800ccae <__ieee754_sqrt+0x15e>
 800cc2c:	f10c 0801 	add.w	r8, ip, #1
 800cc30:	eba2 020c 	sub.w	r2, r2, ip
 800cc34:	429e      	cmp	r6, r3
 800cc36:	bf88      	it	hi
 800cc38:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cc3c:	1b9b      	subs	r3, r3, r6
 800cc3e:	4421      	add	r1, r4
 800cc40:	46c4      	mov	ip, r8
 800cc42:	0052      	lsls	r2, r2, #1
 800cc44:	3f01      	subs	r7, #1
 800cc46:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cc4a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cc4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc52:	d1dd      	bne.n	800cc10 <__ieee754_sqrt+0xc0>
 800cc54:	4313      	orrs	r3, r2
 800cc56:	d006      	beq.n	800cc66 <__ieee754_sqrt+0x116>
 800cc58:	1c4c      	adds	r4, r1, #1
 800cc5a:	bf13      	iteet	ne
 800cc5c:	3101      	addne	r1, #1
 800cc5e:	3001      	addeq	r0, #1
 800cc60:	4639      	moveq	r1, r7
 800cc62:	f021 0101 	bicne.w	r1, r1, #1
 800cc66:	1043      	asrs	r3, r0, #1
 800cc68:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc6c:	0849      	lsrs	r1, r1, #1
 800cc6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc72:	07c2      	lsls	r2, r0, #31
 800cc74:	bf48      	it	mi
 800cc76:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cc7a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cc7e:	460c      	mov	r4, r1
 800cc80:	463d      	mov	r5, r7
 800cc82:	e77f      	b.n	800cb84 <__ieee754_sqrt+0x34>
 800cc84:	0ada      	lsrs	r2, r3, #11
 800cc86:	3815      	subs	r0, #21
 800cc88:	055b      	lsls	r3, r3, #21
 800cc8a:	2a00      	cmp	r2, #0
 800cc8c:	d0fa      	beq.n	800cc84 <__ieee754_sqrt+0x134>
 800cc8e:	02d7      	lsls	r7, r2, #11
 800cc90:	d50a      	bpl.n	800cca8 <__ieee754_sqrt+0x158>
 800cc92:	f1c1 0420 	rsb	r4, r1, #32
 800cc96:	fa23 f404 	lsr.w	r4, r3, r4
 800cc9a:	1e4d      	subs	r5, r1, #1
 800cc9c:	408b      	lsls	r3, r1
 800cc9e:	4322      	orrs	r2, r4
 800cca0:	1b41      	subs	r1, r0, r5
 800cca2:	e788      	b.n	800cbb6 <__ieee754_sqrt+0x66>
 800cca4:	4608      	mov	r0, r1
 800cca6:	e7f0      	b.n	800cc8a <__ieee754_sqrt+0x13a>
 800cca8:	0052      	lsls	r2, r2, #1
 800ccaa:	3101      	adds	r1, #1
 800ccac:	e7ef      	b.n	800cc8e <__ieee754_sqrt+0x13e>
 800ccae:	46e0      	mov	r8, ip
 800ccb0:	e7be      	b.n	800cc30 <__ieee754_sqrt+0xe0>
 800ccb2:	bf00      	nop
 800ccb4:	7ff00000 	.word	0x7ff00000

0800ccb8 <__ieee754_atan2f>:
 800ccb8:	ee10 2a90 	vmov	r2, s1
 800ccbc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ccc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	eef0 7a40 	vmov.f32	s15, s0
 800ccca:	dc06      	bgt.n	800ccda <__ieee754_atan2f+0x22>
 800cccc:	ee10 0a10 	vmov	r0, s0
 800ccd0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ccd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ccd8:	dd04      	ble.n	800cce4 <__ieee754_atan2f+0x2c>
 800ccda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ccde:	eeb0 0a67 	vmov.f32	s0, s15
 800cce2:	bd10      	pop	{r4, pc}
 800cce4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800cce8:	d103      	bne.n	800ccf2 <__ieee754_atan2f+0x3a>
 800ccea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccee:	f000 bfb5 	b.w	800dc5c <atanf>
 800ccf2:	1794      	asrs	r4, r2, #30
 800ccf4:	f004 0402 	and.w	r4, r4, #2
 800ccf8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ccfc:	b943      	cbnz	r3, 800cd10 <__ieee754_atan2f+0x58>
 800ccfe:	2c02      	cmp	r4, #2
 800cd00:	d05e      	beq.n	800cdc0 <__ieee754_atan2f+0x108>
 800cd02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cdd4 <__ieee754_atan2f+0x11c>
 800cd06:	2c03      	cmp	r4, #3
 800cd08:	bf08      	it	eq
 800cd0a:	eef0 7a47 	vmoveq.f32	s15, s14
 800cd0e:	e7e6      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cd10:	b941      	cbnz	r1, 800cd24 <__ieee754_atan2f+0x6c>
 800cd12:	eddf 7a31 	vldr	s15, [pc, #196]	; 800cdd8 <__ieee754_atan2f+0x120>
 800cd16:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800cddc <__ieee754_atan2f+0x124>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	bfb8      	it	lt
 800cd1e:	eef0 7a40 	vmovlt.f32	s15, s0
 800cd22:	e7dc      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cd24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cd28:	d110      	bne.n	800cd4c <__ieee754_atan2f+0x94>
 800cd2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd2e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd32:	d107      	bne.n	800cd44 <__ieee754_atan2f+0x8c>
 800cd34:	2c02      	cmp	r4, #2
 800cd36:	d846      	bhi.n	800cdc6 <__ieee754_atan2f+0x10e>
 800cd38:	4b29      	ldr	r3, [pc, #164]	; (800cde0 <__ieee754_atan2f+0x128>)
 800cd3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd3e:	edd4 7a00 	vldr	s15, [r4]
 800cd42:	e7cc      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cd44:	2c02      	cmp	r4, #2
 800cd46:	d841      	bhi.n	800cdcc <__ieee754_atan2f+0x114>
 800cd48:	4b26      	ldr	r3, [pc, #152]	; (800cde4 <__ieee754_atan2f+0x12c>)
 800cd4a:	e7f6      	b.n	800cd3a <__ieee754_atan2f+0x82>
 800cd4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd50:	d0df      	beq.n	800cd12 <__ieee754_atan2f+0x5a>
 800cd52:	1a5b      	subs	r3, r3, r1
 800cd54:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800cd58:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cd5c:	da1a      	bge.n	800cd94 <__ieee754_atan2f+0xdc>
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	da01      	bge.n	800cd66 <__ieee754_atan2f+0xae>
 800cd62:	313c      	adds	r1, #60	; 0x3c
 800cd64:	db19      	blt.n	800cd9a <__ieee754_atan2f+0xe2>
 800cd66:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cd6a:	f001 f84b 	bl	800de04 <fabsf>
 800cd6e:	f000 ff75 	bl	800dc5c <atanf>
 800cd72:	eef0 7a40 	vmov.f32	s15, s0
 800cd76:	2c01      	cmp	r4, #1
 800cd78:	d012      	beq.n	800cda0 <__ieee754_atan2f+0xe8>
 800cd7a:	2c02      	cmp	r4, #2
 800cd7c:	d017      	beq.n	800cdae <__ieee754_atan2f+0xf6>
 800cd7e:	2c00      	cmp	r4, #0
 800cd80:	d0ad      	beq.n	800ccde <__ieee754_atan2f+0x26>
 800cd82:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800cde8 <__ieee754_atan2f+0x130>
 800cd86:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cd8a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800cdec <__ieee754_atan2f+0x134>
 800cd8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cd92:	e7a4      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cd94:	eddf 7a10 	vldr	s15, [pc, #64]	; 800cdd8 <__ieee754_atan2f+0x120>
 800cd98:	e7ed      	b.n	800cd76 <__ieee754_atan2f+0xbe>
 800cd9a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cdf0 <__ieee754_atan2f+0x138>
 800cd9e:	e7ea      	b.n	800cd76 <__ieee754_atan2f+0xbe>
 800cda0:	ee17 3a90 	vmov	r3, s15
 800cda4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cda8:	ee07 3a90 	vmov	s15, r3
 800cdac:	e797      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cdae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cde8 <__ieee754_atan2f+0x130>
 800cdb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cdb6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800cdec <__ieee754_atan2f+0x134>
 800cdba:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cdbe:	e78e      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cdc0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800cdec <__ieee754_atan2f+0x134>
 800cdc4:	e78b      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cdc6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800cdf4 <__ieee754_atan2f+0x13c>
 800cdca:	e788      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cdcc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cdf0 <__ieee754_atan2f+0x138>
 800cdd0:	e785      	b.n	800ccde <__ieee754_atan2f+0x26>
 800cdd2:	bf00      	nop
 800cdd4:	c0490fdb 	.word	0xc0490fdb
 800cdd8:	3fc90fdb 	.word	0x3fc90fdb
 800cddc:	bfc90fdb 	.word	0xbfc90fdb
 800cde0:	0800e694 	.word	0x0800e694
 800cde4:	0800e6a0 	.word	0x0800e6a0
 800cde8:	33bbbd2e 	.word	0x33bbbd2e
 800cdec:	40490fdb 	.word	0x40490fdb
 800cdf0:	00000000 	.word	0x00000000
 800cdf4:	3f490fdb 	.word	0x3f490fdb

0800cdf8 <__ieee754_powf>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	ee10 5a90 	vmov	r5, s1
 800ce00:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800ce04:	ed2d 8b02 	vpush	{d8}
 800ce08:	eeb0 8a40 	vmov.f32	s16, s0
 800ce0c:	eef0 8a60 	vmov.f32	s17, s1
 800ce10:	f000 8291 	beq.w	800d336 <__ieee754_powf+0x53e>
 800ce14:	ee10 8a10 	vmov	r8, s0
 800ce18:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800ce1c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ce20:	dc06      	bgt.n	800ce30 <__ieee754_powf+0x38>
 800ce22:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ce26:	dd0a      	ble.n	800ce3e <__ieee754_powf+0x46>
 800ce28:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ce2c:	f000 8283 	beq.w	800d336 <__ieee754_powf+0x53e>
 800ce30:	ecbd 8b02 	vpop	{d8}
 800ce34:	48d8      	ldr	r0, [pc, #864]	; (800d198 <__ieee754_powf+0x3a0>)
 800ce36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	f7fb bacb 	b.w	80083d4 <nanf>
 800ce3e:	f1b8 0f00 	cmp.w	r8, #0
 800ce42:	da1f      	bge.n	800ce84 <__ieee754_powf+0x8c>
 800ce44:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800ce48:	da2e      	bge.n	800cea8 <__ieee754_powf+0xb0>
 800ce4a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ce4e:	f2c0 827b 	blt.w	800d348 <__ieee754_powf+0x550>
 800ce52:	15fb      	asrs	r3, r7, #23
 800ce54:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ce58:	fa47 f603 	asr.w	r6, r7, r3
 800ce5c:	fa06 f303 	lsl.w	r3, r6, r3
 800ce60:	42bb      	cmp	r3, r7
 800ce62:	f040 8271 	bne.w	800d348 <__ieee754_powf+0x550>
 800ce66:	f006 0601 	and.w	r6, r6, #1
 800ce6a:	f1c6 0602 	rsb	r6, r6, #2
 800ce6e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ce72:	d120      	bne.n	800ceb6 <__ieee754_powf+0xbe>
 800ce74:	2d00      	cmp	r5, #0
 800ce76:	f280 8264 	bge.w	800d342 <__ieee754_powf+0x54a>
 800ce7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ce7e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ce82:	e00d      	b.n	800cea0 <__ieee754_powf+0xa8>
 800ce84:	2600      	movs	r6, #0
 800ce86:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ce8a:	d1f0      	bne.n	800ce6e <__ieee754_powf+0x76>
 800ce8c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ce90:	f000 8251 	beq.w	800d336 <__ieee754_powf+0x53e>
 800ce94:	dd0a      	ble.n	800ceac <__ieee754_powf+0xb4>
 800ce96:	2d00      	cmp	r5, #0
 800ce98:	f280 8250 	bge.w	800d33c <__ieee754_powf+0x544>
 800ce9c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800d19c <__ieee754_powf+0x3a4>
 800cea0:	ecbd 8b02 	vpop	{d8}
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	2602      	movs	r6, #2
 800ceaa:	e7ec      	b.n	800ce86 <__ieee754_powf+0x8e>
 800ceac:	2d00      	cmp	r5, #0
 800ceae:	daf5      	bge.n	800ce9c <__ieee754_powf+0xa4>
 800ceb0:	eeb1 0a68 	vneg.f32	s0, s17
 800ceb4:	e7f4      	b.n	800cea0 <__ieee754_powf+0xa8>
 800ceb6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ceba:	d102      	bne.n	800cec2 <__ieee754_powf+0xca>
 800cebc:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cec0:	e7ee      	b.n	800cea0 <__ieee754_powf+0xa8>
 800cec2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cec6:	eeb0 0a48 	vmov.f32	s0, s16
 800ceca:	d108      	bne.n	800cede <__ieee754_powf+0xe6>
 800cecc:	f1b8 0f00 	cmp.w	r8, #0
 800ced0:	db05      	blt.n	800cede <__ieee754_powf+0xe6>
 800ced2:	ecbd 8b02 	vpop	{d8}
 800ced6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceda:	f000 bb89 	b.w	800d5f0 <__ieee754_sqrtf>
 800cede:	f000 ff91 	bl	800de04 <fabsf>
 800cee2:	b124      	cbz	r4, 800ceee <__ieee754_powf+0xf6>
 800cee4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cee8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ceec:	d117      	bne.n	800cf1e <__ieee754_powf+0x126>
 800ceee:	2d00      	cmp	r5, #0
 800cef0:	bfbc      	itt	lt
 800cef2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cef6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cefa:	f1b8 0f00 	cmp.w	r8, #0
 800cefe:	dacf      	bge.n	800cea0 <__ieee754_powf+0xa8>
 800cf00:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800cf04:	ea54 0306 	orrs.w	r3, r4, r6
 800cf08:	d104      	bne.n	800cf14 <__ieee754_powf+0x11c>
 800cf0a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cf0e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cf12:	e7c5      	b.n	800cea0 <__ieee754_powf+0xa8>
 800cf14:	2e01      	cmp	r6, #1
 800cf16:	d1c3      	bne.n	800cea0 <__ieee754_powf+0xa8>
 800cf18:	eeb1 0a40 	vneg.f32	s0, s0
 800cf1c:	e7c0      	b.n	800cea0 <__ieee754_powf+0xa8>
 800cf1e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800cf22:	3801      	subs	r0, #1
 800cf24:	ea56 0300 	orrs.w	r3, r6, r0
 800cf28:	d104      	bne.n	800cf34 <__ieee754_powf+0x13c>
 800cf2a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cf2e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cf32:	e7b5      	b.n	800cea0 <__ieee754_powf+0xa8>
 800cf34:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800cf38:	dd6b      	ble.n	800d012 <__ieee754_powf+0x21a>
 800cf3a:	4b99      	ldr	r3, [pc, #612]	; (800d1a0 <__ieee754_powf+0x3a8>)
 800cf3c:	429c      	cmp	r4, r3
 800cf3e:	dc06      	bgt.n	800cf4e <__ieee754_powf+0x156>
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	daab      	bge.n	800ce9c <__ieee754_powf+0xa4>
 800cf44:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800d1a4 <__ieee754_powf+0x3ac>
 800cf48:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cf4c:	e7a8      	b.n	800cea0 <__ieee754_powf+0xa8>
 800cf4e:	4b96      	ldr	r3, [pc, #600]	; (800d1a8 <__ieee754_powf+0x3b0>)
 800cf50:	429c      	cmp	r4, r3
 800cf52:	dd02      	ble.n	800cf5a <__ieee754_powf+0x162>
 800cf54:	2d00      	cmp	r5, #0
 800cf56:	dcf5      	bgt.n	800cf44 <__ieee754_powf+0x14c>
 800cf58:	e7a0      	b.n	800ce9c <__ieee754_powf+0xa4>
 800cf5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cf5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf62:	eddf 6a92 	vldr	s13, [pc, #584]	; 800d1ac <__ieee754_powf+0x3b4>
 800cf66:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cf6a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cf6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cf72:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cf76:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cf7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800d1b0 <__ieee754_powf+0x3b8>
 800cf82:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800cf86:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d1b4 <__ieee754_powf+0x3bc>
 800cf8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cf8e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d1b8 <__ieee754_powf+0x3c0>
 800cf92:	eef0 6a67 	vmov.f32	s13, s15
 800cf96:	eee0 6a07 	vfma.f32	s13, s0, s14
 800cf9a:	ee16 3a90 	vmov	r3, s13
 800cf9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cfa2:	f023 030f 	bic.w	r3, r3, #15
 800cfa6:	ee00 3a90 	vmov	s1, r3
 800cfaa:	eee0 0a47 	vfms.f32	s1, s0, s14
 800cfae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cfb2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800cfb6:	f025 050f 	bic.w	r5, r5, #15
 800cfba:	ee07 5a10 	vmov	s14, r5
 800cfbe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cfc2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cfce:	3e01      	subs	r6, #1
 800cfd0:	ea56 0200 	orrs.w	r2, r6, r0
 800cfd4:	ee07 5a10 	vmov	s14, r5
 800cfd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfdc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cfe0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cfe4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cfe8:	ee17 4a10 	vmov	r4, s14
 800cfec:	bf08      	it	eq
 800cfee:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cff2:	2c00      	cmp	r4, #0
 800cff4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cff8:	f340 8184 	ble.w	800d304 <__ieee754_powf+0x50c>
 800cffc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d000:	f340 80fc 	ble.w	800d1fc <__ieee754_powf+0x404>
 800d004:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d1a4 <__ieee754_powf+0x3ac>
 800d008:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d00c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d010:	e746      	b.n	800cea0 <__ieee754_powf+0xa8>
 800d012:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800d016:	bf01      	itttt	eq
 800d018:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800d1bc <__ieee754_powf+0x3c4>
 800d01c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d020:	f06f 0217 	mvneq.w	r2, #23
 800d024:	ee17 4a90 	vmoveq	r4, s15
 800d028:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d02c:	bf18      	it	ne
 800d02e:	2200      	movne	r2, #0
 800d030:	3b7f      	subs	r3, #127	; 0x7f
 800d032:	4413      	add	r3, r2
 800d034:	4a62      	ldr	r2, [pc, #392]	; (800d1c0 <__ieee754_powf+0x3c8>)
 800d036:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d03a:	4294      	cmp	r4, r2
 800d03c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d040:	dd06      	ble.n	800d050 <__ieee754_powf+0x258>
 800d042:	4a60      	ldr	r2, [pc, #384]	; (800d1c4 <__ieee754_powf+0x3cc>)
 800d044:	4294      	cmp	r4, r2
 800d046:	f340 80a4 	ble.w	800d192 <__ieee754_powf+0x39a>
 800d04a:	3301      	adds	r3, #1
 800d04c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d050:	2400      	movs	r4, #0
 800d052:	4a5d      	ldr	r2, [pc, #372]	; (800d1c8 <__ieee754_powf+0x3d0>)
 800d054:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d058:	ee07 1a90 	vmov	s15, r1
 800d05c:	ed92 7a00 	vldr	s14, [r2]
 800d060:	4a5a      	ldr	r2, [pc, #360]	; (800d1cc <__ieee754_powf+0x3d4>)
 800d062:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d066:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d06a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d06e:	1049      	asrs	r1, r1, #1
 800d070:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d074:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d078:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d07c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d080:	ee06 1a10 	vmov	s12, r1
 800d084:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d088:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d08c:	ee14 7a90 	vmov	r7, s9
 800d090:	4017      	ands	r7, r2
 800d092:	ee05 7a90 	vmov	s11, r7
 800d096:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d09a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d09e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d1d0 <__ieee754_powf+0x3d8>
 800d0a2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d0a6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d0aa:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d0ae:	eddf 6a49 	vldr	s13, [pc, #292]	; 800d1d4 <__ieee754_powf+0x3dc>
 800d0b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d0b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d1d8 <__ieee754_powf+0x3e0>
 800d0ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0be:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d1ac <__ieee754_powf+0x3b4>
 800d0c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d0c6:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d1dc <__ieee754_powf+0x3e4>
 800d0ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d0ce:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d1e0 <__ieee754_powf+0x3e8>
 800d0d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d0d6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d0da:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d0de:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d0e2:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d0e6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d0ea:	eef0 7a45 	vmov.f32	s15, s10
 800d0ee:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f6:	ee17 1a90 	vmov	r1, s15
 800d0fa:	4011      	ands	r1, r2
 800d0fc:	ee07 1a90 	vmov	s15, r1
 800d100:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d104:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d108:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d10c:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d110:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d114:	eeb0 6a47 	vmov.f32	s12, s14
 800d118:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d11c:	ee16 1a10 	vmov	r1, s12
 800d120:	4011      	ands	r1, r2
 800d122:	ee06 1a90 	vmov	s13, r1
 800d126:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d12a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800d1e4 <__ieee754_powf+0x3ec>
 800d12e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d1e8 <__ieee754_powf+0x3f0>
 800d132:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d136:	ee06 1a10 	vmov	s12, r1
 800d13a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d13e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d1ec <__ieee754_powf+0x3f4>
 800d142:	492b      	ldr	r1, [pc, #172]	; (800d1f0 <__ieee754_powf+0x3f8>)
 800d144:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d14c:	edd1 7a00 	vldr	s15, [r1]
 800d150:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d154:	ee07 3a90 	vmov	s15, r3
 800d158:	4b26      	ldr	r3, [pc, #152]	; (800d1f4 <__ieee754_powf+0x3fc>)
 800d15a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d15e:	eef0 7a47 	vmov.f32	s15, s14
 800d162:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d16a:	edd4 0a00 	vldr	s1, [r4]
 800d16e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d176:	ee17 3a90 	vmov	r3, s15
 800d17a:	4013      	ands	r3, r2
 800d17c:	ee07 3a90 	vmov	s15, r3
 800d180:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d184:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d188:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d18c:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d190:	e70f      	b.n	800cfb2 <__ieee754_powf+0x1ba>
 800d192:	2401      	movs	r4, #1
 800d194:	e75d      	b.n	800d052 <__ieee754_powf+0x25a>
 800d196:	bf00      	nop
 800d198:	0800e693 	.word	0x0800e693
 800d19c:	00000000 	.word	0x00000000
 800d1a0:	3f7ffff7 	.word	0x3f7ffff7
 800d1a4:	7149f2ca 	.word	0x7149f2ca
 800d1a8:	3f800007 	.word	0x3f800007
 800d1ac:	3eaaaaab 	.word	0x3eaaaaab
 800d1b0:	3fb8aa3b 	.word	0x3fb8aa3b
 800d1b4:	36eca570 	.word	0x36eca570
 800d1b8:	3fb8aa00 	.word	0x3fb8aa00
 800d1bc:	4b800000 	.word	0x4b800000
 800d1c0:	001cc471 	.word	0x001cc471
 800d1c4:	005db3d6 	.word	0x005db3d6
 800d1c8:	0800e6ac 	.word	0x0800e6ac
 800d1cc:	fffff000 	.word	0xfffff000
 800d1d0:	3e6c3255 	.word	0x3e6c3255
 800d1d4:	3e53f142 	.word	0x3e53f142
 800d1d8:	3e8ba305 	.word	0x3e8ba305
 800d1dc:	3edb6db7 	.word	0x3edb6db7
 800d1e0:	3f19999a 	.word	0x3f19999a
 800d1e4:	3f76384f 	.word	0x3f76384f
 800d1e8:	3f763800 	.word	0x3f763800
 800d1ec:	369dc3a0 	.word	0x369dc3a0
 800d1f0:	0800e6bc 	.word	0x0800e6bc
 800d1f4:	0800e6b4 	.word	0x0800e6b4
 800d1f8:	3338aa3c 	.word	0x3338aa3c
 800d1fc:	f040 8092 	bne.w	800d324 <__ieee754_powf+0x52c>
 800d200:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d1f8 <__ieee754_powf+0x400>
 800d204:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d208:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d20c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d214:	f73f aef6 	bgt.w	800d004 <__ieee754_powf+0x20c>
 800d218:	15db      	asrs	r3, r3, #23
 800d21a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d21e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d222:	4103      	asrs	r3, r0
 800d224:	4423      	add	r3, r4
 800d226:	4949      	ldr	r1, [pc, #292]	; (800d34c <__ieee754_powf+0x554>)
 800d228:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d22c:	3a7f      	subs	r2, #127	; 0x7f
 800d22e:	4111      	asrs	r1, r2
 800d230:	ea23 0101 	bic.w	r1, r3, r1
 800d234:	ee07 1a10 	vmov	s14, r1
 800d238:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d23c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d240:	f1c2 0217 	rsb	r2, r2, #23
 800d244:	4110      	asrs	r0, r2
 800d246:	2c00      	cmp	r4, #0
 800d248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d24c:	bfb8      	it	lt
 800d24e:	4240      	neglt	r0, r0
 800d250:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d254:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800d350 <__ieee754_powf+0x558>
 800d258:	ee17 3a10 	vmov	r3, s14
 800d25c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d260:	f023 030f 	bic.w	r3, r3, #15
 800d264:	ee07 3a10 	vmov	s14, r3
 800d268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d26c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d270:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d354 <__ieee754_powf+0x55c>
 800d274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d278:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d27c:	eddf 6a36 	vldr	s13, [pc, #216]	; 800d358 <__ieee754_powf+0x560>
 800d280:	eeb0 0a67 	vmov.f32	s0, s15
 800d284:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d288:	eeb0 6a40 	vmov.f32	s12, s0
 800d28c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d290:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d294:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d298:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d35c <__ieee754_powf+0x564>
 800d29c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800d360 <__ieee754_powf+0x568>
 800d2a0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d2a4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d364 <__ieee754_powf+0x56c>
 800d2a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d2ac:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d368 <__ieee754_powf+0x570>
 800d2b0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d2b4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800d36c <__ieee754_powf+0x574>
 800d2b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d2bc:	eeb0 6a40 	vmov.f32	s12, s0
 800d2c0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d2c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d2c8:	eeb0 7a46 	vmov.f32	s14, s12
 800d2cc:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d2d0:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d2d4:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d2d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d2dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d2e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d2ec:	ee10 3a10 	vmov	r3, s0
 800d2f0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d2f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d2f8:	da1a      	bge.n	800d330 <__ieee754_powf+0x538>
 800d2fa:	f000 fe35 	bl	800df68 <scalbnf>
 800d2fe:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d302:	e5cd      	b.n	800cea0 <__ieee754_powf+0xa8>
 800d304:	4a1a      	ldr	r2, [pc, #104]	; (800d370 <__ieee754_powf+0x578>)
 800d306:	4293      	cmp	r3, r2
 800d308:	dd02      	ble.n	800d310 <__ieee754_powf+0x518>
 800d30a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d374 <__ieee754_powf+0x57c>
 800d30e:	e67b      	b.n	800d008 <__ieee754_powf+0x210>
 800d310:	d108      	bne.n	800d324 <__ieee754_powf+0x52c>
 800d312:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d316:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31e:	f6ff af7b 	blt.w	800d218 <__ieee754_powf+0x420>
 800d322:	e7f2      	b.n	800d30a <__ieee754_powf+0x512>
 800d324:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d328:	f73f af76 	bgt.w	800d218 <__ieee754_powf+0x420>
 800d32c:	2000      	movs	r0, #0
 800d32e:	e78f      	b.n	800d250 <__ieee754_powf+0x458>
 800d330:	ee00 3a10 	vmov	s0, r3
 800d334:	e7e3      	b.n	800d2fe <__ieee754_powf+0x506>
 800d336:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d33a:	e5b1      	b.n	800cea0 <__ieee754_powf+0xa8>
 800d33c:	eeb0 0a68 	vmov.f32	s0, s17
 800d340:	e5ae      	b.n	800cea0 <__ieee754_powf+0xa8>
 800d342:	eeb0 0a48 	vmov.f32	s0, s16
 800d346:	e5ab      	b.n	800cea0 <__ieee754_powf+0xa8>
 800d348:	2600      	movs	r6, #0
 800d34a:	e590      	b.n	800ce6e <__ieee754_powf+0x76>
 800d34c:	007fffff 	.word	0x007fffff
 800d350:	3f317218 	.word	0x3f317218
 800d354:	35bfbe8c 	.word	0x35bfbe8c
 800d358:	3f317200 	.word	0x3f317200
 800d35c:	3331bb4c 	.word	0x3331bb4c
 800d360:	b5ddea0e 	.word	0xb5ddea0e
 800d364:	388ab355 	.word	0x388ab355
 800d368:	bb360b61 	.word	0xbb360b61
 800d36c:	3e2aaaab 	.word	0x3e2aaaab
 800d370:	43160000 	.word	0x43160000
 800d374:	0da24260 	.word	0x0da24260

0800d378 <__ieee754_rem_pio2f>:
 800d378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d37a:	ee10 6a10 	vmov	r6, s0
 800d37e:	4b8e      	ldr	r3, [pc, #568]	; (800d5b8 <__ieee754_rem_pio2f+0x240>)
 800d380:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d384:	429d      	cmp	r5, r3
 800d386:	b087      	sub	sp, #28
 800d388:	eef0 7a40 	vmov.f32	s15, s0
 800d38c:	4604      	mov	r4, r0
 800d38e:	dc05      	bgt.n	800d39c <__ieee754_rem_pio2f+0x24>
 800d390:	2300      	movs	r3, #0
 800d392:	ed80 0a00 	vstr	s0, [r0]
 800d396:	6043      	str	r3, [r0, #4]
 800d398:	2000      	movs	r0, #0
 800d39a:	e01a      	b.n	800d3d2 <__ieee754_rem_pio2f+0x5a>
 800d39c:	4b87      	ldr	r3, [pc, #540]	; (800d5bc <__ieee754_rem_pio2f+0x244>)
 800d39e:	429d      	cmp	r5, r3
 800d3a0:	dc46      	bgt.n	800d430 <__ieee754_rem_pio2f+0xb8>
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d5c0 <__ieee754_rem_pio2f+0x248>
 800d3a8:	4b86      	ldr	r3, [pc, #536]	; (800d5c4 <__ieee754_rem_pio2f+0x24c>)
 800d3aa:	f025 050f 	bic.w	r5, r5, #15
 800d3ae:	dd1f      	ble.n	800d3f0 <__ieee754_rem_pio2f+0x78>
 800d3b0:	429d      	cmp	r5, r3
 800d3b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d3b6:	d00e      	beq.n	800d3d6 <__ieee754_rem_pio2f+0x5e>
 800d3b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d5c8 <__ieee754_rem_pio2f+0x250>
 800d3bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d3c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d3c4:	ed80 0a00 	vstr	s0, [r0]
 800d3c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	edc4 7a01 	vstr	s15, [r4, #4]
 800d3d2:	b007      	add	sp, #28
 800d3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d5cc <__ieee754_rem_pio2f+0x254>
 800d3da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d5d0 <__ieee754_rem_pio2f+0x258>
 800d3de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d3e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d3e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d3ea:	edc0 6a00 	vstr	s13, [r0]
 800d3ee:	e7eb      	b.n	800d3c8 <__ieee754_rem_pio2f+0x50>
 800d3f0:	429d      	cmp	r5, r3
 800d3f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d3f6:	d00e      	beq.n	800d416 <__ieee754_rem_pio2f+0x9e>
 800d3f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d5c8 <__ieee754_rem_pio2f+0x250>
 800d3fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d400:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d404:	ed80 0a00 	vstr	s0, [r0]
 800d408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
 800d410:	edc4 7a01 	vstr	s15, [r4, #4]
 800d414:	e7dd      	b.n	800d3d2 <__ieee754_rem_pio2f+0x5a>
 800d416:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d5cc <__ieee754_rem_pio2f+0x254>
 800d41a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d5d0 <__ieee754_rem_pio2f+0x258>
 800d41e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d422:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d42a:	edc0 6a00 	vstr	s13, [r0]
 800d42e:	e7eb      	b.n	800d408 <__ieee754_rem_pio2f+0x90>
 800d430:	4b68      	ldr	r3, [pc, #416]	; (800d5d4 <__ieee754_rem_pio2f+0x25c>)
 800d432:	429d      	cmp	r5, r3
 800d434:	dc72      	bgt.n	800d51c <__ieee754_rem_pio2f+0x1a4>
 800d436:	f000 fce5 	bl	800de04 <fabsf>
 800d43a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d5d8 <__ieee754_rem_pio2f+0x260>
 800d43e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d442:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d44a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d44e:	ee17 0a90 	vmov	r0, s15
 800d452:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d5c0 <__ieee754_rem_pio2f+0x248>
 800d456:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d45a:	281f      	cmp	r0, #31
 800d45c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d5c8 <__ieee754_rem_pio2f+0x250>
 800d460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d464:	eeb1 6a47 	vneg.f32	s12, s14
 800d468:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d46c:	ee16 2a90 	vmov	r2, s13
 800d470:	dc1c      	bgt.n	800d4ac <__ieee754_rem_pio2f+0x134>
 800d472:	495a      	ldr	r1, [pc, #360]	; (800d5dc <__ieee754_rem_pio2f+0x264>)
 800d474:	1e47      	subs	r7, r0, #1
 800d476:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d47a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d47e:	428b      	cmp	r3, r1
 800d480:	d014      	beq.n	800d4ac <__ieee754_rem_pio2f+0x134>
 800d482:	6022      	str	r2, [r4, #0]
 800d484:	ed94 7a00 	vldr	s14, [r4]
 800d488:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d48c:	2e00      	cmp	r6, #0
 800d48e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d492:	ed84 0a01 	vstr	s0, [r4, #4]
 800d496:	da9c      	bge.n	800d3d2 <__ieee754_rem_pio2f+0x5a>
 800d498:	eeb1 7a47 	vneg.f32	s14, s14
 800d49c:	eeb1 0a40 	vneg.f32	s0, s0
 800d4a0:	ed84 7a00 	vstr	s14, [r4]
 800d4a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800d4a8:	4240      	negs	r0, r0
 800d4aa:	e792      	b.n	800d3d2 <__ieee754_rem_pio2f+0x5a>
 800d4ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d4b0:	15eb      	asrs	r3, r5, #23
 800d4b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d4b6:	2d08      	cmp	r5, #8
 800d4b8:	dde3      	ble.n	800d482 <__ieee754_rem_pio2f+0x10a>
 800d4ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d5cc <__ieee754_rem_pio2f+0x254>
 800d4be:	eef0 6a40 	vmov.f32	s13, s0
 800d4c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d4c6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d4ca:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d4ce:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d5d0 <__ieee754_rem_pio2f+0x258>
 800d4d2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800d4d6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d4da:	eef0 7a40 	vmov.f32	s15, s0
 800d4de:	ee15 2a90 	vmov	r2, s11
 800d4e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d4e6:	1a5b      	subs	r3, r3, r1
 800d4e8:	2b19      	cmp	r3, #25
 800d4ea:	dc04      	bgt.n	800d4f6 <__ieee754_rem_pio2f+0x17e>
 800d4ec:	edc4 5a00 	vstr	s11, [r4]
 800d4f0:	eeb0 0a66 	vmov.f32	s0, s13
 800d4f4:	e7c6      	b.n	800d484 <__ieee754_rem_pio2f+0x10c>
 800d4f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d5e0 <__ieee754_rem_pio2f+0x268>
 800d4fa:	eeb0 0a66 	vmov.f32	s0, s13
 800d4fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d502:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d506:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d5e4 <__ieee754_rem_pio2f+0x26c>
 800d50a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d50e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d512:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d516:	ed84 7a00 	vstr	s14, [r4]
 800d51a:	e7b3      	b.n	800d484 <__ieee754_rem_pio2f+0x10c>
 800d51c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d520:	db06      	blt.n	800d530 <__ieee754_rem_pio2f+0x1b8>
 800d522:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d526:	edc0 7a01 	vstr	s15, [r0, #4]
 800d52a:	edc0 7a00 	vstr	s15, [r0]
 800d52e:	e733      	b.n	800d398 <__ieee754_rem_pio2f+0x20>
 800d530:	15ea      	asrs	r2, r5, #23
 800d532:	3a86      	subs	r2, #134	; 0x86
 800d534:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d538:	ee07 3a90 	vmov	s15, r3
 800d53c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d540:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d5e8 <__ieee754_rem_pio2f+0x270>
 800d544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d54c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d55c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d560:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d570:	edcd 7a05 	vstr	s15, [sp, #20]
 800d574:	d11e      	bne.n	800d5b4 <__ieee754_rem_pio2f+0x23c>
 800d576:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57e:	bf14      	ite	ne
 800d580:	2302      	movne	r3, #2
 800d582:	2301      	moveq	r3, #1
 800d584:	4919      	ldr	r1, [pc, #100]	; (800d5ec <__ieee754_rem_pio2f+0x274>)
 800d586:	9101      	str	r1, [sp, #4]
 800d588:	2102      	movs	r1, #2
 800d58a:	9100      	str	r1, [sp, #0]
 800d58c:	a803      	add	r0, sp, #12
 800d58e:	4621      	mov	r1, r4
 800d590:	f000 f892 	bl	800d6b8 <__kernel_rem_pio2f>
 800d594:	2e00      	cmp	r6, #0
 800d596:	f6bf af1c 	bge.w	800d3d2 <__ieee754_rem_pio2f+0x5a>
 800d59a:	edd4 7a00 	vldr	s15, [r4]
 800d59e:	eef1 7a67 	vneg.f32	s15, s15
 800d5a2:	edc4 7a00 	vstr	s15, [r4]
 800d5a6:	edd4 7a01 	vldr	s15, [r4, #4]
 800d5aa:	eef1 7a67 	vneg.f32	s15, s15
 800d5ae:	edc4 7a01 	vstr	s15, [r4, #4]
 800d5b2:	e779      	b.n	800d4a8 <__ieee754_rem_pio2f+0x130>
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	e7e5      	b.n	800d584 <__ieee754_rem_pio2f+0x20c>
 800d5b8:	3f490fd8 	.word	0x3f490fd8
 800d5bc:	4016cbe3 	.word	0x4016cbe3
 800d5c0:	3fc90f80 	.word	0x3fc90f80
 800d5c4:	3fc90fd0 	.word	0x3fc90fd0
 800d5c8:	37354443 	.word	0x37354443
 800d5cc:	37354400 	.word	0x37354400
 800d5d0:	2e85a308 	.word	0x2e85a308
 800d5d4:	43490f80 	.word	0x43490f80
 800d5d8:	3f22f984 	.word	0x3f22f984
 800d5dc:	0800e6c4 	.word	0x0800e6c4
 800d5e0:	2e85a300 	.word	0x2e85a300
 800d5e4:	248d3132 	.word	0x248d3132
 800d5e8:	43800000 	.word	0x43800000
 800d5ec:	0800e744 	.word	0x0800e744

0800d5f0 <__ieee754_sqrtf>:
 800d5f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d5f4:	4770      	bx	lr
	...

0800d5f8 <__kernel_cosf>:
 800d5f8:	ee10 3a10 	vmov	r3, s0
 800d5fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d600:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d604:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d608:	da05      	bge.n	800d616 <__kernel_cosf+0x1e>
 800d60a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d60e:	ee17 2a90 	vmov	r2, s15
 800d612:	2a00      	cmp	r2, #0
 800d614:	d03d      	beq.n	800d692 <__kernel_cosf+0x9a>
 800d616:	ee60 5a00 	vmul.f32	s11, s0, s0
 800d61a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d698 <__kernel_cosf+0xa0>
 800d61e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d69c <__kernel_cosf+0xa4>
 800d622:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d6a0 <__kernel_cosf+0xa8>
 800d626:	4a1f      	ldr	r2, [pc, #124]	; (800d6a4 <__kernel_cosf+0xac>)
 800d628:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d62c:	4293      	cmp	r3, r2
 800d62e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d6a8 <__kernel_cosf+0xb0>
 800d632:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d636:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d6ac <__kernel_cosf+0xb4>
 800d63a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d63e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d6b0 <__kernel_cosf+0xb8>
 800d642:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d646:	eeb0 7a66 	vmov.f32	s14, s13
 800d64a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d64e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d652:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800d656:	ee67 6a25 	vmul.f32	s13, s14, s11
 800d65a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800d65e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d662:	dc04      	bgt.n	800d66e <__kernel_cosf+0x76>
 800d664:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d668:	ee36 0a47 	vsub.f32	s0, s12, s14
 800d66c:	4770      	bx	lr
 800d66e:	4a11      	ldr	r2, [pc, #68]	; (800d6b4 <__kernel_cosf+0xbc>)
 800d670:	4293      	cmp	r3, r2
 800d672:	bfda      	itte	le
 800d674:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d678:	ee06 3a90 	vmovle	s13, r3
 800d67c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800d680:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d684:	ee36 0a66 	vsub.f32	s0, s12, s13
 800d688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d68c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d690:	4770      	bx	lr
 800d692:	eeb0 0a46 	vmov.f32	s0, s12
 800d696:	4770      	bx	lr
 800d698:	ad47d74e 	.word	0xad47d74e
 800d69c:	310f74f6 	.word	0x310f74f6
 800d6a0:	3d2aaaab 	.word	0x3d2aaaab
 800d6a4:	3e999999 	.word	0x3e999999
 800d6a8:	b493f27c 	.word	0xb493f27c
 800d6ac:	37d00d01 	.word	0x37d00d01
 800d6b0:	bab60b61 	.word	0xbab60b61
 800d6b4:	3f480000 	.word	0x3f480000

0800d6b8 <__kernel_rem_pio2f>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	ed2d 8b04 	vpush	{d8-d9}
 800d6c0:	b0d7      	sub	sp, #348	; 0x15c
 800d6c2:	4616      	mov	r6, r2
 800d6c4:	4698      	mov	r8, r3
 800d6c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d6c8:	4bbb      	ldr	r3, [pc, #748]	; (800d9b8 <__kernel_rem_pio2f+0x300>)
 800d6ca:	9001      	str	r0, [sp, #4]
 800d6cc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800d6d0:	1d33      	adds	r3, r6, #4
 800d6d2:	460d      	mov	r5, r1
 800d6d4:	f108 39ff 	add.w	r9, r8, #4294967295
 800d6d8:	db29      	blt.n	800d72e <__kernel_rem_pio2f+0x76>
 800d6da:	1ef1      	subs	r1, r6, #3
 800d6dc:	bf48      	it	mi
 800d6de:	1d31      	addmi	r1, r6, #4
 800d6e0:	10c9      	asrs	r1, r1, #3
 800d6e2:	1c4c      	adds	r4, r1, #1
 800d6e4:	00e3      	lsls	r3, r4, #3
 800d6e6:	9302      	str	r3, [sp, #8]
 800d6e8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d6ea:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800d6ee:	eba1 0009 	sub.w	r0, r1, r9
 800d6f2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800d6f6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800d6fa:	eb07 0c09 	add.w	ip, r7, r9
 800d6fe:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800d702:	2300      	movs	r3, #0
 800d704:	4563      	cmp	r3, ip
 800d706:	dd14      	ble.n	800d732 <__kernel_rem_pio2f+0x7a>
 800d708:	ab1a      	add	r3, sp, #104	; 0x68
 800d70a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800d70e:	46cc      	mov	ip, r9
 800d710:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800d714:	f1c8 0b01 	rsb	fp, r8, #1
 800d718:	eb0b 020c 	add.w	r2, fp, ip
 800d71c:	4297      	cmp	r7, r2
 800d71e:	db27      	blt.n	800d770 <__kernel_rem_pio2f+0xb8>
 800d720:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d724:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800d728:	4618      	mov	r0, r3
 800d72a:	2200      	movs	r2, #0
 800d72c:	e016      	b.n	800d75c <__kernel_rem_pio2f+0xa4>
 800d72e:	2100      	movs	r1, #0
 800d730:	e7d7      	b.n	800d6e2 <__kernel_rem_pio2f+0x2a>
 800d732:	42d8      	cmn	r0, r3
 800d734:	bf5d      	ittte	pl
 800d736:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800d73a:	ee07 2a90 	vmovpl	s15, r2
 800d73e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d742:	eef0 7a47 	vmovmi.f32	s15, s14
 800d746:	ecea 7a01 	vstmia	sl!, {s15}
 800d74a:	3301      	adds	r3, #1
 800d74c:	e7da      	b.n	800d704 <__kernel_rem_pio2f+0x4c>
 800d74e:	ecfe 6a01 	vldmia	lr!, {s13}
 800d752:	ed90 7a00 	vldr	s14, [r0]
 800d756:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d75a:	3201      	adds	r2, #1
 800d75c:	454a      	cmp	r2, r9
 800d75e:	f1a0 0004 	sub.w	r0, r0, #4
 800d762:	ddf4      	ble.n	800d74e <__kernel_rem_pio2f+0x96>
 800d764:	ecea 7a01 	vstmia	sl!, {s15}
 800d768:	3304      	adds	r3, #4
 800d76a:	f10c 0c01 	add.w	ip, ip, #1
 800d76e:	e7d3      	b.n	800d718 <__kernel_rem_pio2f+0x60>
 800d770:	ab06      	add	r3, sp, #24
 800d772:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800d776:	9304      	str	r3, [sp, #16]
 800d778:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d77a:	eddf 8a92 	vldr	s17, [pc, #584]	; 800d9c4 <__kernel_rem_pio2f+0x30c>
 800d77e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800d9c0 <__kernel_rem_pio2f+0x308>
 800d782:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	46ba      	mov	sl, r7
 800d78a:	ab56      	add	r3, sp, #344	; 0x158
 800d78c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d790:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d794:	ab06      	add	r3, sp, #24
 800d796:	4618      	mov	r0, r3
 800d798:	4652      	mov	r2, sl
 800d79a:	2a00      	cmp	r2, #0
 800d79c:	dc51      	bgt.n	800d842 <__kernel_rem_pio2f+0x18a>
 800d79e:	4620      	mov	r0, r4
 800d7a0:	9305      	str	r3, [sp, #20]
 800d7a2:	f000 fbe1 	bl	800df68 <scalbnf>
 800d7a6:	eeb0 8a40 	vmov.f32	s16, s0
 800d7aa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d7ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d7b2:	f000 fb3b 	bl	800de2c <floorf>
 800d7b6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d7ba:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d7be:	2c00      	cmp	r4, #0
 800d7c0:	9b05      	ldr	r3, [sp, #20]
 800d7c2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d7c6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d7ca:	edcd 7a00 	vstr	s15, [sp]
 800d7ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d7d2:	dd4b      	ble.n	800d86c <__kernel_rem_pio2f+0x1b4>
 800d7d4:	f10a 3cff 	add.w	ip, sl, #4294967295
 800d7d8:	aa06      	add	r2, sp, #24
 800d7da:	f1c4 0e08 	rsb	lr, r4, #8
 800d7de:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d7e2:	ee17 1a90 	vmov	r1, s15
 800d7e6:	fa42 f00e 	asr.w	r0, r2, lr
 800d7ea:	4401      	add	r1, r0
 800d7ec:	9100      	str	r1, [sp, #0]
 800d7ee:	fa00 f00e 	lsl.w	r0, r0, lr
 800d7f2:	a906      	add	r1, sp, #24
 800d7f4:	1a12      	subs	r2, r2, r0
 800d7f6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d7fa:	f1c4 0007 	rsb	r0, r4, #7
 800d7fe:	fa42 fb00 	asr.w	fp, r2, r0
 800d802:	f1bb 0f00 	cmp.w	fp, #0
 800d806:	dd43      	ble.n	800d890 <__kernel_rem_pio2f+0x1d8>
 800d808:	9a00      	ldr	r2, [sp, #0]
 800d80a:	f04f 0e00 	mov.w	lr, #0
 800d80e:	3201      	adds	r2, #1
 800d810:	9200      	str	r2, [sp, #0]
 800d812:	4670      	mov	r0, lr
 800d814:	45f2      	cmp	sl, lr
 800d816:	dc6c      	bgt.n	800d8f2 <__kernel_rem_pio2f+0x23a>
 800d818:	2c00      	cmp	r4, #0
 800d81a:	dd04      	ble.n	800d826 <__kernel_rem_pio2f+0x16e>
 800d81c:	2c01      	cmp	r4, #1
 800d81e:	d079      	beq.n	800d914 <__kernel_rem_pio2f+0x25c>
 800d820:	2c02      	cmp	r4, #2
 800d822:	f000 8082 	beq.w	800d92a <__kernel_rem_pio2f+0x272>
 800d826:	f1bb 0f02 	cmp.w	fp, #2
 800d82a:	d131      	bne.n	800d890 <__kernel_rem_pio2f+0x1d8>
 800d82c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d830:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d834:	b360      	cbz	r0, 800d890 <__kernel_rem_pio2f+0x1d8>
 800d836:	4620      	mov	r0, r4
 800d838:	f000 fb96 	bl	800df68 <scalbnf>
 800d83c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d840:	e026      	b.n	800d890 <__kernel_rem_pio2f+0x1d8>
 800d842:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d846:	3a01      	subs	r2, #1
 800d848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d84c:	a942      	add	r1, sp, #264	; 0x108
 800d84e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d852:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800d856:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d85a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d85e:	eca0 0a01 	vstmia	r0!, {s0}
 800d862:	ed9c 0a00 	vldr	s0, [ip]
 800d866:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d86a:	e796      	b.n	800d79a <__kernel_rem_pio2f+0xe2>
 800d86c:	d107      	bne.n	800d87e <__kernel_rem_pio2f+0x1c6>
 800d86e:	f10a 32ff 	add.w	r2, sl, #4294967295
 800d872:	a906      	add	r1, sp, #24
 800d874:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d878:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800d87c:	e7c1      	b.n	800d802 <__kernel_rem_pio2f+0x14a>
 800d87e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d882:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88a:	da2f      	bge.n	800d8ec <__kernel_rem_pio2f+0x234>
 800d88c:	f04f 0b00 	mov.w	fp, #0
 800d890:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d898:	f040 8098 	bne.w	800d9cc <__kernel_rem_pio2f+0x314>
 800d89c:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d8a0:	469c      	mov	ip, r3
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	45bc      	cmp	ip, r7
 800d8a6:	da48      	bge.n	800d93a <__kernel_rem_pio2f+0x282>
 800d8a8:	2a00      	cmp	r2, #0
 800d8aa:	d05f      	beq.n	800d96c <__kernel_rem_pio2f+0x2b4>
 800d8ac:	aa06      	add	r2, sp, #24
 800d8ae:	3c08      	subs	r4, #8
 800d8b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d8b4:	2900      	cmp	r1, #0
 800d8b6:	d07d      	beq.n	800d9b4 <__kernel_rem_pio2f+0x2fc>
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	f000 fb52 	bl	800df68 <scalbnf>
 800d8c4:	9b01      	ldr	r3, [sp, #4]
 800d8c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800d9c4 <__kernel_rem_pio2f+0x30c>
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	2900      	cmp	r1, #0
 800d8ce:	f280 80af 	bge.w	800da30 <__kernel_rem_pio2f+0x378>
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	2400      	movs	r4, #0
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	f2c0 80d0 	blt.w	800da7c <__kernel_rem_pio2f+0x3c4>
 800d8dc:	a942      	add	r1, sp, #264	; 0x108
 800d8de:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800d8e2:	4a36      	ldr	r2, [pc, #216]	; (800d9bc <__kernel_rem_pio2f+0x304>)
 800d8e4:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	e0bb      	b.n	800da64 <__kernel_rem_pio2f+0x3ac>
 800d8ec:	f04f 0b02 	mov.w	fp, #2
 800d8f0:	e78a      	b.n	800d808 <__kernel_rem_pio2f+0x150>
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	b948      	cbnz	r0, 800d90a <__kernel_rem_pio2f+0x252>
 800d8f6:	b11a      	cbz	r2, 800d900 <__kernel_rem_pio2f+0x248>
 800d8f8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f10e 0e01 	add.w	lr, lr, #1
 800d904:	3304      	adds	r3, #4
 800d906:	4610      	mov	r0, r2
 800d908:	e784      	b.n	800d814 <__kernel_rem_pio2f+0x15c>
 800d90a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	4602      	mov	r2, r0
 800d912:	e7f5      	b.n	800d900 <__kernel_rem_pio2f+0x248>
 800d914:	f10a 3cff 	add.w	ip, sl, #4294967295
 800d918:	ab06      	add	r3, sp, #24
 800d91a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d922:	aa06      	add	r2, sp, #24
 800d924:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800d928:	e77d      	b.n	800d826 <__kernel_rem_pio2f+0x16e>
 800d92a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800d92e:	ab06      	add	r3, sp, #24
 800d930:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d938:	e7f3      	b.n	800d922 <__kernel_rem_pio2f+0x26a>
 800d93a:	a906      	add	r1, sp, #24
 800d93c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800d940:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d944:	4302      	orrs	r2, r0
 800d946:	e7ad      	b.n	800d8a4 <__kernel_rem_pio2f+0x1ec>
 800d948:	3001      	adds	r0, #1
 800d94a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d94e:	2a00      	cmp	r2, #0
 800d950:	d0fa      	beq.n	800d948 <__kernel_rem_pio2f+0x290>
 800d952:	a91a      	add	r1, sp, #104	; 0x68
 800d954:	eb0a 0208 	add.w	r2, sl, r8
 800d958:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d95c:	f10a 0301 	add.w	r3, sl, #1
 800d960:	eb0a 0100 	add.w	r1, sl, r0
 800d964:	4299      	cmp	r1, r3
 800d966:	da04      	bge.n	800d972 <__kernel_rem_pio2f+0x2ba>
 800d968:	468a      	mov	sl, r1
 800d96a:	e70e      	b.n	800d78a <__kernel_rem_pio2f+0xd2>
 800d96c:	9b04      	ldr	r3, [sp, #16]
 800d96e:	2001      	movs	r0, #1
 800d970:	e7eb      	b.n	800d94a <__kernel_rem_pio2f+0x292>
 800d972:	9803      	ldr	r0, [sp, #12]
 800d974:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d978:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d97c:	9000      	str	r0, [sp, #0]
 800d97e:	ee07 0a90 	vmov	s15, r0
 800d982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d986:	2000      	movs	r0, #0
 800d988:	ece2 7a01 	vstmia	r2!, {s15}
 800d98c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800d990:	4696      	mov	lr, r2
 800d992:	4548      	cmp	r0, r9
 800d994:	dd06      	ble.n	800d9a4 <__kernel_rem_pio2f+0x2ec>
 800d996:	a842      	add	r0, sp, #264	; 0x108
 800d998:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d99c:	edc0 7a00 	vstr	s15, [r0]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	e7df      	b.n	800d964 <__kernel_rem_pio2f+0x2ac>
 800d9a4:	ecfc 6a01 	vldmia	ip!, {s13}
 800d9a8:	ed3e 7a01 	vldmdb	lr!, {s14}
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d9b2:	e7ee      	b.n	800d992 <__kernel_rem_pio2f+0x2da>
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	e779      	b.n	800d8ac <__kernel_rem_pio2f+0x1f4>
 800d9b8:	0800ea88 	.word	0x0800ea88
 800d9bc:	0800ea5c 	.word	0x0800ea5c
 800d9c0:	43800000 	.word	0x43800000
 800d9c4:	3b800000 	.word	0x3b800000
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	9b02      	ldr	r3, [sp, #8]
 800d9ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d2:	1b98      	subs	r0, r3, r6
 800d9d4:	f000 fac8 	bl	800df68 <scalbnf>
 800d9d8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800d9c0 <__kernel_rem_pio2f+0x308>
 800d9dc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	db1b      	blt.n	800da1e <__kernel_rem_pio2f+0x366>
 800d9e6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d9c4 <__kernel_rem_pio2f+0x30c>
 800d9ea:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d9ee:	aa06      	add	r2, sp, #24
 800d9f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9f4:	a906      	add	r1, sp, #24
 800d9f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9fa:	3408      	adds	r4, #8
 800d9fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800da00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800da08:	ee10 3a10 	vmov	r3, s0
 800da0c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800da10:	ee17 2a90 	vmov	r2, s15
 800da14:	f10a 0301 	add.w	r3, sl, #1
 800da18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800da1c:	e74c      	b.n	800d8b8 <__kernel_rem_pio2f+0x200>
 800da1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800da22:	aa06      	add	r2, sp, #24
 800da24:	ee10 3a10 	vmov	r3, s0
 800da28:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800da2c:	4653      	mov	r3, sl
 800da2e:	e743      	b.n	800d8b8 <__kernel_rem_pio2f+0x200>
 800da30:	aa42      	add	r2, sp, #264	; 0x108
 800da32:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800da36:	aa06      	add	r2, sp, #24
 800da38:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800da3c:	9201      	str	r2, [sp, #4]
 800da3e:	ee07 2a90 	vmov	s15, r2
 800da42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da46:	3901      	subs	r1, #1
 800da48:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da4c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800da50:	edc0 7a00 	vstr	s15, [r0]
 800da54:	e73a      	b.n	800d8cc <__kernel_rem_pio2f+0x214>
 800da56:	ecf2 6a01 	vldmia	r2!, {s13}
 800da5a:	ecb6 7a01 	vldmia	r6!, {s14}
 800da5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800da62:	3101      	adds	r1, #1
 800da64:	42b9      	cmp	r1, r7
 800da66:	dc01      	bgt.n	800da6c <__kernel_rem_pio2f+0x3b4>
 800da68:	428c      	cmp	r4, r1
 800da6a:	daf4      	bge.n	800da56 <__kernel_rem_pio2f+0x39e>
 800da6c:	aa56      	add	r2, sp, #344	; 0x158
 800da6e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800da72:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800da76:	3801      	subs	r0, #1
 800da78:	3401      	adds	r4, #1
 800da7a:	e72c      	b.n	800d8d6 <__kernel_rem_pio2f+0x21e>
 800da7c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800da7e:	2a02      	cmp	r2, #2
 800da80:	dc0a      	bgt.n	800da98 <__kernel_rem_pio2f+0x3e0>
 800da82:	2a00      	cmp	r2, #0
 800da84:	dc61      	bgt.n	800db4a <__kernel_rem_pio2f+0x492>
 800da86:	d03c      	beq.n	800db02 <__kernel_rem_pio2f+0x44a>
 800da88:	9b00      	ldr	r3, [sp, #0]
 800da8a:	f003 0007 	and.w	r0, r3, #7
 800da8e:	b057      	add	sp, #348	; 0x15c
 800da90:	ecbd 8b04 	vpop	{d8-d9}
 800da94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da98:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800da9a:	2a03      	cmp	r2, #3
 800da9c:	d1f4      	bne.n	800da88 <__kernel_rem_pio2f+0x3d0>
 800da9e:	aa2e      	add	r2, sp, #184	; 0xb8
 800daa0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800daa4:	4608      	mov	r0, r1
 800daa6:	461c      	mov	r4, r3
 800daa8:	2c00      	cmp	r4, #0
 800daaa:	f1a0 0004 	sub.w	r0, r0, #4
 800daae:	dc59      	bgt.n	800db64 <__kernel_rem_pio2f+0x4ac>
 800dab0:	4618      	mov	r0, r3
 800dab2:	2801      	cmp	r0, #1
 800dab4:	f1a1 0104 	sub.w	r1, r1, #4
 800dab8:	dc64      	bgt.n	800db84 <__kernel_rem_pio2f+0x4cc>
 800daba:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	dc70      	bgt.n	800dba4 <__kernel_rem_pio2f+0x4ec>
 800dac2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800dac6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800daca:	f1bb 0f00 	cmp.w	fp, #0
 800dace:	d172      	bne.n	800dbb6 <__kernel_rem_pio2f+0x4fe>
 800dad0:	edc5 6a00 	vstr	s13, [r5]
 800dad4:	ed85 7a01 	vstr	s14, [r5, #4]
 800dad8:	edc5 7a02 	vstr	s15, [r5, #8]
 800dadc:	e7d4      	b.n	800da88 <__kernel_rem_pio2f+0x3d0>
 800dade:	aa2e      	add	r2, sp, #184	; 0xb8
 800dae0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800dae4:	ed91 7a00 	vldr	s14, [r1]
 800dae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800daec:	3b01      	subs	r3, #1
 800daee:	2b00      	cmp	r3, #0
 800daf0:	daf5      	bge.n	800dade <__kernel_rem_pio2f+0x426>
 800daf2:	f1bb 0f00 	cmp.w	fp, #0
 800daf6:	d001      	beq.n	800dafc <__kernel_rem_pio2f+0x444>
 800daf8:	eef1 7a67 	vneg.f32	s15, s15
 800dafc:	edc5 7a00 	vstr	s15, [r5]
 800db00:	e7c2      	b.n	800da88 <__kernel_rem_pio2f+0x3d0>
 800db02:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800db06:	e7f2      	b.n	800daee <__kernel_rem_pio2f+0x436>
 800db08:	aa2e      	add	r2, sp, #184	; 0xb8
 800db0a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800db0e:	edd0 7a00 	vldr	s15, [r0]
 800db12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db16:	3901      	subs	r1, #1
 800db18:	2900      	cmp	r1, #0
 800db1a:	daf5      	bge.n	800db08 <__kernel_rem_pio2f+0x450>
 800db1c:	f1bb 0f00 	cmp.w	fp, #0
 800db20:	d017      	beq.n	800db52 <__kernel_rem_pio2f+0x49a>
 800db22:	eef1 7a47 	vneg.f32	s15, s14
 800db26:	edc5 7a00 	vstr	s15, [r5]
 800db2a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800db2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db32:	a82f      	add	r0, sp, #188	; 0xbc
 800db34:	2101      	movs	r1, #1
 800db36:	428b      	cmp	r3, r1
 800db38:	da0e      	bge.n	800db58 <__kernel_rem_pio2f+0x4a0>
 800db3a:	f1bb 0f00 	cmp.w	fp, #0
 800db3e:	d001      	beq.n	800db44 <__kernel_rem_pio2f+0x48c>
 800db40:	eef1 7a67 	vneg.f32	s15, s15
 800db44:	edc5 7a01 	vstr	s15, [r5, #4]
 800db48:	e79e      	b.n	800da88 <__kernel_rem_pio2f+0x3d0>
 800db4a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800d9c8 <__kernel_rem_pio2f+0x310>
 800db4e:	4619      	mov	r1, r3
 800db50:	e7e2      	b.n	800db18 <__kernel_rem_pio2f+0x460>
 800db52:	eef0 7a47 	vmov.f32	s15, s14
 800db56:	e7e6      	b.n	800db26 <__kernel_rem_pio2f+0x46e>
 800db58:	ecb0 7a01 	vldmia	r0!, {s14}
 800db5c:	3101      	adds	r1, #1
 800db5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db62:	e7e8      	b.n	800db36 <__kernel_rem_pio2f+0x47e>
 800db64:	edd0 7a00 	vldr	s15, [r0]
 800db68:	edd0 6a01 	vldr	s13, [r0, #4]
 800db6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db70:	3c01      	subs	r4, #1
 800db72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db76:	ed80 7a00 	vstr	s14, [r0]
 800db7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db7e:	edc0 7a01 	vstr	s15, [r0, #4]
 800db82:	e791      	b.n	800daa8 <__kernel_rem_pio2f+0x3f0>
 800db84:	edd1 7a00 	vldr	s15, [r1]
 800db88:	edd1 6a01 	vldr	s13, [r1, #4]
 800db8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db90:	3801      	subs	r0, #1
 800db92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db96:	ed81 7a00 	vstr	s14, [r1]
 800db9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db9e:	edc1 7a01 	vstr	s15, [r1, #4]
 800dba2:	e786      	b.n	800dab2 <__kernel_rem_pio2f+0x3fa>
 800dba4:	aa2e      	add	r2, sp, #184	; 0xb8
 800dba6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800dbaa:	ed91 7a00 	vldr	s14, [r1]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbb4:	e783      	b.n	800dabe <__kernel_rem_pio2f+0x406>
 800dbb6:	eef1 6a66 	vneg.f32	s13, s13
 800dbba:	eeb1 7a47 	vneg.f32	s14, s14
 800dbbe:	edc5 6a00 	vstr	s13, [r5]
 800dbc2:	ed85 7a01 	vstr	s14, [r5, #4]
 800dbc6:	eef1 7a67 	vneg.f32	s15, s15
 800dbca:	e785      	b.n	800dad8 <__kernel_rem_pio2f+0x420>

0800dbcc <__kernel_sinf>:
 800dbcc:	ee10 3a10 	vmov	r3, s0
 800dbd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbd4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dbd8:	da04      	bge.n	800dbe4 <__kernel_sinf+0x18>
 800dbda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dbde:	ee17 3a90 	vmov	r3, s15
 800dbe2:	b35b      	cbz	r3, 800dc3c <__kernel_sinf+0x70>
 800dbe4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dbe8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dc40 <__kernel_sinf+0x74>
 800dbec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dc44 <__kernel_sinf+0x78>
 800dbf0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dbf4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dc48 <__kernel_sinf+0x7c>
 800dbf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dbfc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dc4c <__kernel_sinf+0x80>
 800dc00:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dc04:	eddf 7a12 	vldr	s15, [pc, #72]	; 800dc50 <__kernel_sinf+0x84>
 800dc08:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dc0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dc10:	b930      	cbnz	r0, 800dc20 <__kernel_sinf+0x54>
 800dc12:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dc54 <__kernel_sinf+0x88>
 800dc16:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dc1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dc1e:	4770      	bx	lr
 800dc20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dc24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dc28:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dc2c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dc30:	eddf 7a09 	vldr	s15, [pc, #36]	; 800dc58 <__kernel_sinf+0x8c>
 800dc34:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dc38:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	2f2ec9d3 	.word	0x2f2ec9d3
 800dc44:	b2d72f34 	.word	0xb2d72f34
 800dc48:	3638ef1b 	.word	0x3638ef1b
 800dc4c:	b9500d01 	.word	0xb9500d01
 800dc50:	3c088889 	.word	0x3c088889
 800dc54:	be2aaaab 	.word	0xbe2aaaab
 800dc58:	3e2aaaab 	.word	0x3e2aaaab

0800dc5c <atanf>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	ee10 5a10 	vmov	r5, s0
 800dc62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dc66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800dc6a:	eef0 7a40 	vmov.f32	s15, s0
 800dc6e:	db10      	blt.n	800dc92 <atanf+0x36>
 800dc70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dc74:	dd04      	ble.n	800dc80 <atanf+0x24>
 800dc76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800dc7a:	eeb0 0a67 	vmov.f32	s0, s15
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ddb8 <atanf+0x15c>
 800dc84:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ddbc <atanf+0x160>
 800dc88:	2d00      	cmp	r5, #0
 800dc8a:	bfd8      	it	le
 800dc8c:	eef0 7a40 	vmovle.f32	s15, s0
 800dc90:	e7f3      	b.n	800dc7a <atanf+0x1e>
 800dc92:	4b4b      	ldr	r3, [pc, #300]	; (800ddc0 <atanf+0x164>)
 800dc94:	429c      	cmp	r4, r3
 800dc96:	dc10      	bgt.n	800dcba <atanf+0x5e>
 800dc98:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800dc9c:	da0a      	bge.n	800dcb4 <atanf+0x58>
 800dc9e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ddc4 <atanf+0x168>
 800dca2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb2:	dce2      	bgt.n	800dc7a <atanf+0x1e>
 800dcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb8:	e013      	b.n	800dce2 <atanf+0x86>
 800dcba:	f000 f8a3 	bl	800de04 <fabsf>
 800dcbe:	4b42      	ldr	r3, [pc, #264]	; (800ddc8 <atanf+0x16c>)
 800dcc0:	429c      	cmp	r4, r3
 800dcc2:	dc4f      	bgt.n	800dd64 <atanf+0x108>
 800dcc4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800dcc8:	429c      	cmp	r4, r3
 800dcca:	dc41      	bgt.n	800dd50 <atanf+0xf4>
 800dccc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800dcd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dcd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dcd8:	2300      	movs	r3, #0
 800dcda:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dcde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800dce8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ddcc <atanf+0x170>
 800dcec:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800ddd0 <atanf+0x174>
 800dcf0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ddd4 <atanf+0x178>
 800dcf4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800ddd8 <atanf+0x17c>
 800dcf8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800dcfc:	eea7 6a25 	vfma.f32	s12, s14, s11
 800dd00:	eddf 5a36 	vldr	s11, [pc, #216]	; 800dddc <atanf+0x180>
 800dd04:	eee6 5a07 	vfma.f32	s11, s12, s14
 800dd08:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800dde0 <atanf+0x184>
 800dd0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800dd10:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dde4 <atanf+0x188>
 800dd14:	eee6 5a07 	vfma.f32	s11, s12, s14
 800dd18:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800dde8 <atanf+0x18c>
 800dd1c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800dd20:	eddf 5a32 	vldr	s11, [pc, #200]	; 800ddec <atanf+0x190>
 800dd24:	eee7 5a05 	vfma.f32	s11, s14, s10
 800dd28:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800ddf0 <atanf+0x194>
 800dd2c:	eea5 5a87 	vfma.f32	s10, s11, s14
 800dd30:	eddf 5a30 	vldr	s11, [pc, #192]	; 800ddf4 <atanf+0x198>
 800dd34:	eee5 5a07 	vfma.f32	s11, s10, s14
 800dd38:	eea5 0a87 	vfma.f32	s0, s11, s14
 800dd3c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dd40:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dd44:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dd48:	d121      	bne.n	800dd8e <atanf+0x132>
 800dd4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dd4e:	e794      	b.n	800dc7a <atanf+0x1e>
 800dd50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd54:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dd58:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd62:	e7be      	b.n	800dce2 <atanf+0x86>
 800dd64:	4b24      	ldr	r3, [pc, #144]	; (800ddf8 <atanf+0x19c>)
 800dd66:	429c      	cmp	r4, r3
 800dd68:	dc0b      	bgt.n	800dd82 <atanf+0x126>
 800dd6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800dd6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd72:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dd76:	2302      	movs	r3, #2
 800dd78:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd80:	e7af      	b.n	800dce2 <atanf+0x86>
 800dd82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dd86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd8a:	2303      	movs	r3, #3
 800dd8c:	e7a9      	b.n	800dce2 <atanf+0x86>
 800dd8e:	4a1b      	ldr	r2, [pc, #108]	; (800ddfc <atanf+0x1a0>)
 800dd90:	491b      	ldr	r1, [pc, #108]	; (800de00 <atanf+0x1a4>)
 800dd92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dd96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dd9a:	ed93 7a00 	vldr	s14, [r3]
 800dd9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dda2:	2d00      	cmp	r5, #0
 800dda4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dda8:	ed92 0a00 	vldr	s0, [r2]
 800ddac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ddb0:	bfb8      	it	lt
 800ddb2:	eef1 7a67 	vneglt.f32	s15, s15
 800ddb6:	e760      	b.n	800dc7a <atanf+0x1e>
 800ddb8:	3fc90fdb 	.word	0x3fc90fdb
 800ddbc:	bfc90fdb 	.word	0xbfc90fdb
 800ddc0:	3edfffff 	.word	0x3edfffff
 800ddc4:	7149f2ca 	.word	0x7149f2ca
 800ddc8:	3f97ffff 	.word	0x3f97ffff
 800ddcc:	3c8569d7 	.word	0x3c8569d7
 800ddd0:	3d4bda59 	.word	0x3d4bda59
 800ddd4:	bd15a221 	.word	0xbd15a221
 800ddd8:	be4ccccd 	.word	0xbe4ccccd
 800dddc:	3d886b35 	.word	0x3d886b35
 800dde0:	3dba2e6e 	.word	0x3dba2e6e
 800dde4:	3e124925 	.word	0x3e124925
 800dde8:	3eaaaaab 	.word	0x3eaaaaab
 800ddec:	bd6ef16b 	.word	0xbd6ef16b
 800ddf0:	bd9d8795 	.word	0xbd9d8795
 800ddf4:	bde38e38 	.word	0xbde38e38
 800ddf8:	401bffff 	.word	0x401bffff
 800ddfc:	0800ea94 	.word	0x0800ea94
 800de00:	0800eaa4 	.word	0x0800eaa4

0800de04 <fabsf>:
 800de04:	ee10 3a10 	vmov	r3, s0
 800de08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de0c:	ee00 3a10 	vmov	s0, r3
 800de10:	4770      	bx	lr

0800de12 <finitef>:
 800de12:	b082      	sub	sp, #8
 800de14:	ed8d 0a01 	vstr	s0, [sp, #4]
 800de18:	9801      	ldr	r0, [sp, #4]
 800de1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800de1e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800de22:	bfac      	ite	ge
 800de24:	2000      	movge	r0, #0
 800de26:	2001      	movlt	r0, #1
 800de28:	b002      	add	sp, #8
 800de2a:	4770      	bx	lr

0800de2c <floorf>:
 800de2c:	ee10 3a10 	vmov	r3, s0
 800de30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800de34:	3a7f      	subs	r2, #127	; 0x7f
 800de36:	2a16      	cmp	r2, #22
 800de38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de3c:	dc2a      	bgt.n	800de94 <floorf+0x68>
 800de3e:	2a00      	cmp	r2, #0
 800de40:	da11      	bge.n	800de66 <floorf+0x3a>
 800de42:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dea4 <floorf+0x78>
 800de46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de52:	dd05      	ble.n	800de60 <floorf+0x34>
 800de54:	2b00      	cmp	r3, #0
 800de56:	da23      	bge.n	800dea0 <floorf+0x74>
 800de58:	4a13      	ldr	r2, [pc, #76]	; (800dea8 <floorf+0x7c>)
 800de5a:	2900      	cmp	r1, #0
 800de5c:	bf18      	it	ne
 800de5e:	4613      	movne	r3, r2
 800de60:	ee00 3a10 	vmov	s0, r3
 800de64:	4770      	bx	lr
 800de66:	4911      	ldr	r1, [pc, #68]	; (800deac <floorf+0x80>)
 800de68:	4111      	asrs	r1, r2
 800de6a:	420b      	tst	r3, r1
 800de6c:	d0fa      	beq.n	800de64 <floorf+0x38>
 800de6e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dea4 <floorf+0x78>
 800de72:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800de7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7e:	ddef      	ble.n	800de60 <floorf+0x34>
 800de80:	2b00      	cmp	r3, #0
 800de82:	bfbe      	ittt	lt
 800de84:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800de88:	fa40 f202 	asrlt.w	r2, r0, r2
 800de8c:	189b      	addlt	r3, r3, r2
 800de8e:	ea23 0301 	bic.w	r3, r3, r1
 800de92:	e7e5      	b.n	800de60 <floorf+0x34>
 800de94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800de98:	d3e4      	bcc.n	800de64 <floorf+0x38>
 800de9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de9e:	4770      	bx	lr
 800dea0:	2300      	movs	r3, #0
 800dea2:	e7dd      	b.n	800de60 <floorf+0x34>
 800dea4:	7149f2ca 	.word	0x7149f2ca
 800dea8:	bf800000 	.word	0xbf800000
 800deac:	007fffff 	.word	0x007fffff

0800deb0 <rintf>:
 800deb0:	ee10 2a10 	vmov	r2, s0
 800deb4:	b513      	push	{r0, r1, r4, lr}
 800deb6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800deba:	397f      	subs	r1, #127	; 0x7f
 800debc:	2916      	cmp	r1, #22
 800debe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800dec2:	dc47      	bgt.n	800df54 <rintf+0xa4>
 800dec4:	b32b      	cbz	r3, 800df12 <rintf+0x62>
 800dec6:	2900      	cmp	r1, #0
 800dec8:	ee10 3a10 	vmov	r3, s0
 800decc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800ded0:	da21      	bge.n	800df16 <rintf+0x66>
 800ded2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800ded6:	425b      	negs	r3, r3
 800ded8:	4921      	ldr	r1, [pc, #132]	; (800df60 <rintf+0xb0>)
 800deda:	0a5b      	lsrs	r3, r3, #9
 800dedc:	0d12      	lsrs	r2, r2, #20
 800dede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dee2:	0512      	lsls	r2, r2, #20
 800dee4:	4313      	orrs	r3, r2
 800dee6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800deea:	ee07 3a90 	vmov	s15, r3
 800deee:	edd1 6a00 	vldr	s13, [r1]
 800def2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800def6:	ed8d 7a01 	vstr	s14, [sp, #4]
 800defa:	eddd 7a01 	vldr	s15, [sp, #4]
 800defe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df02:	ee17 3a90 	vmov	r3, s15
 800df06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df0a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800df0e:	ee00 3a10 	vmov	s0, r3
 800df12:	b002      	add	sp, #8
 800df14:	bd10      	pop	{r4, pc}
 800df16:	4a13      	ldr	r2, [pc, #76]	; (800df64 <rintf+0xb4>)
 800df18:	410a      	asrs	r2, r1
 800df1a:	4213      	tst	r3, r2
 800df1c:	d0f9      	beq.n	800df12 <rintf+0x62>
 800df1e:	0854      	lsrs	r4, r2, #1
 800df20:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800df24:	d006      	beq.n	800df34 <rintf+0x84>
 800df26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800df2a:	ea23 0304 	bic.w	r3, r3, r4
 800df2e:	fa42 f101 	asr.w	r1, r2, r1
 800df32:	430b      	orrs	r3, r1
 800df34:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <rintf+0xb0>)
 800df36:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800df3a:	ed90 7a00 	vldr	s14, [r0]
 800df3e:	ee07 3a90 	vmov	s15, r3
 800df42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df46:	edcd 7a01 	vstr	s15, [sp, #4]
 800df4a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800df4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df52:	e7de      	b.n	800df12 <rintf+0x62>
 800df54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df58:	d3db      	bcc.n	800df12 <rintf+0x62>
 800df5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df5e:	e7d8      	b.n	800df12 <rintf+0x62>
 800df60:	0800eab4 	.word	0x0800eab4
 800df64:	007fffff 	.word	0x007fffff

0800df68 <scalbnf>:
 800df68:	ee10 3a10 	vmov	r3, s0
 800df6c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800df70:	d025      	beq.n	800dfbe <scalbnf+0x56>
 800df72:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800df76:	d302      	bcc.n	800df7e <scalbnf+0x16>
 800df78:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df7c:	4770      	bx	lr
 800df7e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800df82:	d122      	bne.n	800dfca <scalbnf+0x62>
 800df84:	4b2a      	ldr	r3, [pc, #168]	; (800e030 <scalbnf+0xc8>)
 800df86:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e034 <scalbnf+0xcc>
 800df8a:	4298      	cmp	r0, r3
 800df8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df90:	db16      	blt.n	800dfc0 <scalbnf+0x58>
 800df92:	ee10 3a10 	vmov	r3, s0
 800df96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800df9a:	3a19      	subs	r2, #25
 800df9c:	4402      	add	r2, r0
 800df9e:	2afe      	cmp	r2, #254	; 0xfe
 800dfa0:	dd15      	ble.n	800dfce <scalbnf+0x66>
 800dfa2:	ee10 3a10 	vmov	r3, s0
 800dfa6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e038 <scalbnf+0xd0>
 800dfaa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e03c <scalbnf+0xd4>
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	eeb0 7a67 	vmov.f32	s14, s15
 800dfb4:	bfb8      	it	lt
 800dfb6:	eef0 7a66 	vmovlt.f32	s15, s13
 800dfba:	ee27 0a27 	vmul.f32	s0, s14, s15
 800dfbe:	4770      	bx	lr
 800dfc0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e040 <scalbnf+0xd8>
 800dfc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dfc8:	4770      	bx	lr
 800dfca:	0dd2      	lsrs	r2, r2, #23
 800dfcc:	e7e6      	b.n	800df9c <scalbnf+0x34>
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	dd06      	ble.n	800dfe0 <scalbnf+0x78>
 800dfd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfd6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dfda:	ee00 3a10 	vmov	s0, r3
 800dfde:	4770      	bx	lr
 800dfe0:	f112 0f16 	cmn.w	r2, #22
 800dfe4:	da1a      	bge.n	800e01c <scalbnf+0xb4>
 800dfe6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dfea:	4298      	cmp	r0, r3
 800dfec:	ee10 3a10 	vmov	r3, s0
 800dff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dff4:	dd0a      	ble.n	800e00c <scalbnf+0xa4>
 800dff6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e038 <scalbnf+0xd0>
 800dffa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e03c <scalbnf+0xd4>
 800dffe:	eef0 7a40 	vmov.f32	s15, s0
 800e002:	2b00      	cmp	r3, #0
 800e004:	bf18      	it	ne
 800e006:	eeb0 0a47 	vmovne.f32	s0, s14
 800e00a:	e7db      	b.n	800dfc4 <scalbnf+0x5c>
 800e00c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e040 <scalbnf+0xd8>
 800e010:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e044 <scalbnf+0xdc>
 800e014:	eef0 7a40 	vmov.f32	s15, s0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	e7f3      	b.n	800e004 <scalbnf+0x9c>
 800e01c:	3219      	adds	r2, #25
 800e01e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e022:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e026:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e048 <scalbnf+0xe0>
 800e02a:	ee07 3a10 	vmov	s14, r3
 800e02e:	e7c4      	b.n	800dfba <scalbnf+0x52>
 800e030:	ffff3cb0 	.word	0xffff3cb0
 800e034:	4c000000 	.word	0x4c000000
 800e038:	7149f2ca 	.word	0x7149f2ca
 800e03c:	f149f2ca 	.word	0xf149f2ca
 800e040:	0da24260 	.word	0x0da24260
 800e044:	8da24260 	.word	0x8da24260
 800e048:	33000000 	.word	0x33000000

0800e04c <_init>:
 800e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04e:	bf00      	nop
 800e050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e052:	bc08      	pop	{r3}
 800e054:	469e      	mov	lr, r3
 800e056:	4770      	bx	lr

0800e058 <_fini>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	bf00      	nop
 800e05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05e:	bc08      	pop	{r3}
 800e060:	469e      	mov	lr, r3
 800e062:	4770      	bx	lr
